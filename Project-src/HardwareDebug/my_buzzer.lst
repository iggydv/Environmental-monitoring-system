   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.global	_cycleTimer
  28                             	.data
  29                             		.balign 2
  32                             	_cycleTimer:
  33 0000 00 00                   		.zero	2
  34                             		.global	_cycleMode
  35                             		.balign 2
  38                             	_cycleMode:
  39 0002 00 00                   		.zero	2
  40                             		.global	_centreBuf
  43                             	_centreBuf:
  44 0004 01                      		.byte	1
  45 0005 01                      		.byte	1
  46 0006 01                      		.byte	1
  47                             		.global	_centreFlag
  48 0007 00                      		.balign 2
  51                             	_centreFlag:
  52 0008 00 00                   		.zero	2
  53                             		.global	_centreSet
  54                             		.balign 2
  57                             	_centreSet:
  58 000a 01 00                   		.short	1
  59                             		.global	_upBuf
  62                             	_upBuf:
  63 000c 01                      		.byte	1
  64 000d 01                      		.byte	1
  65 000e 01                      		.byte	1
  66                             		.global	_upFlag
  67 000f 00                      		.balign 2
  70                             	_upFlag:
  71 0010 00 00                   		.zero	2
  72                             		.global	_upSet
  73                             		.balign 2
  76                             	_upSet:
  77 0012 01 00                   		.short	1
  78                             		.global	_downBuf
  81                             	_downBuf:
  82 0014 01                      		.byte	1
  83 0015 01                      		.byte	1
  84 0016 01                      		.byte	1
  85                             		.global	_downFlag
  86 0017 00                      		.balign 2
  89                             	_downFlag:
  90 0018 00 00                   		.zero	2
  91                             		.global	_downSet
  92                             		.balign 2
  95                             	_downSet:
  96 001a 01 00                   		.short	1
  97                             		.global	_leftBuf
 100                             	_leftBuf:
 101 001c 01                      		.byte	1
 102 001d 01                      		.byte	1
 103 001e 01                      		.byte	1
 104                             		.global	_leftFlag
 105 001f 00                      		.balign 2
 108                             	_leftFlag:
 109 0020 00 00                   		.zero	2
 110                             		.global	_leftSet
 111                             		.balign 2
 114                             	_leftSet:
 115 0022 01 00                   		.short	1
 116                             	 .global	_rightBuf
 119                             	_rightBuf:
 120 0024 01                      		.byte	1
 121 0025 01                      		.byte	1
 122 0026 01                      		.byte	1
 123                             		.global	_rightFlag
 124 0027 00                      		.balign 2
 127                             	_rightFlag:
 128 0028 00 00                   		.zero	2
 129                             		.global	_rightSet
 130                             		.balign 2
 133                             	_rightSet:
 134 002a 01 00                   		.short	1
 135                             		.global	_Temperature
 138                             	_Temperature:
 139 002c 00                      		.zero	1
 140                             		.global	_Humidity
 143                             	_Humidity:
 144 002d 00                      		.zero	1
 145                             		.global	_Pressure
 148                             	_Pressure:
 149 002e 00                      		.zero	1
 150                             		.global	_WindSpeed
 153                             	_WindSpeed:
 154 002f 00                      		.zero	1
 155                             		.global	_tempArr1
 158                             	_tempArr1:
 159 0030 54 65 6D 70 65 72 61 74 		.string	"Temperature"
 159      75 72 65 00 
 160                             		.global	_humArr1
 163                             	_humArr1:
 164 003c 48 75 6D 69 64 69 74 79 		.string	"Humidity"
 164      00 
 165                             		.global	_presArr1
 168                             	_presArr1:
 169 0045 50 72 65 73 73 75 72 65 		.string	"Pressure"
 169      00 
 170                             		.global	_windArr1
 173                             	_windArr1:
 174 004e 57 69 6E 64 20 53 70 65 		.string	"Wind Speed"
 174      65 64 00 
 175                             		.global	_DTArr1
 178                             	_DTArr1:
 179 0059 44 61 74 65 2F 54 69 6D 		.string	"Date/Time"
 179      65 00 
 180                             		.comm	_display,1,1
 181                             		.comm	_wind_8bit,1,1
 182 0063 00                      	.text
 183                             		.global	_cycle
 185                             	_cycle:
 186                             	.LFB0:
 187                             		.file 1 "../src/my_functions.c"
   1:../src/my_functions.c **** 
   2:../src/my_functions.c **** #include "my_functions.h"
   3:../src/my_functions.c **** #include "r_cg_macrodriver.h"
   4:../src/my_functions.c **** #include "r_cg_cgc.h"
   5:../src/my_functions.c **** #include "r_cg_port.h"
   6:../src/my_functions.c **** #include "r_cg_serial.h"
   7:../src/my_functions.c **** #include "r_cg_timer.h"
   8:../src/my_functions.c **** #include "r_cg_rtc.h"
   9:../src/my_functions.c **** #include "r_cg_pclbuz.h"
  10:../src/my_functions.c **** #include "r_cg_userdefine.h"
  11:../src/my_functions.c **** #include <string.h>
  12:../src/my_functions.c **** 
  13:../src/my_functions.c **** int cycleTimer = 0;
  14:../src/my_functions.c **** int cycleMode = 0;
  15:../src/my_functions.c **** char centreBuf[3] = {1,1,1};
  16:../src/my_functions.c **** int centreFlag = 0, centreSet = 1;
  17:../src/my_functions.c **** 
  18:../src/my_functions.c **** char upBuf[3] = {1,1,1};
  19:../src/my_functions.c **** int upFlag = 0, upSet = 1;
  20:../src/my_functions.c **** 
  21:../src/my_functions.c **** char downBuf[3] = {1,1,1};
  22:../src/my_functions.c **** int downFlag = 0, downSet = 1;
  23:../src/my_functions.c **** 
  24:../src/my_functions.c **** char leftBuf[3] = {1,1,1};
  25:../src/my_functions.c **** int leftFlag = 0, leftSet = 1;
  26:../src/my_functions.c **** 
  27:../src/my_functions.c **** char rightBuf[3] = {1,1,1};
  28:../src/my_functions.c **** int rightFlag = 0, rightSet = 1;
  29:../src/my_functions.c **** 
  30:../src/my_functions.c **** char Temperature =0,Humidity=0,Pressure=0,WindSpeed=0;
  31:../src/my_functions.c **** 
  32:../src/my_functions.c **** 
  33:../src/my_functions.c **** char tempArr1[] = "Temperature";
  34:../src/my_functions.c **** char humArr1[] = "Humidity";
  35:../src/my_functions.c **** char presArr1[] = "Pressure";
  36:../src/my_functions.c **** char windArr1[] = "Wind Speed";
  37:../src/my_functions.c **** char DTArr1[] = "Date/Time";
  38:../src/my_functions.c **** uint8_t display;
  39:../src/my_functions.c **** 
  40:../src/my_functions.c **** uint8_t wind_8bit;
  41:../src/my_functions.c **** 
  42:../src/my_functions.c **** 
  43:../src/my_functions.c **** //temp, hum, press, wind, time
  44:../src/my_functions.c **** void cycle()
  45:../src/my_functions.c **** {
 188                             		.loc 1 45 0
 189                             		; start of function
 190                             		; outgoing: 8 bytes
 191 0000 20 08                   		subw	sp, #8
 192                             	.LCFI0:
  46:../src/my_functions.c **** 	if(cycleStart)
 193                             		.loc 1 46 0
 194 0002 AF 00 00                		movw	ax, !_cycleStart
 195 0005 BD F0                   		movw	r8, ax
 196 0007 44 00 00                		cmpw	ax, #0 
 197 000a 61 F8                   		sknz 
 198 000c EC 2C 00 00             		br	!!.L2
  47:../src/my_functions.c **** 	{
  48:../src/my_functions.c **** 		R_TAU0_Channel3_Stop();
 199                             		.loc 1 48 0
 200 0010 FC 00 00 00             		call	!!%code(_R_TAU0_Channel3_Stop)
  49:../src/my_functions.c **** 		R_TAU0_Channel3_Start();
 201                             		.loc 1 49 0
 202 0014 FC 00 00 00             		call	!!%code(_R_TAU0_Channel3_Start)
  50:../src/my_functions.c **** 		cycleMode = modeTemp;
 203                             		.loc 1 50 0
 204 0018 F6                      		clrw	ax
 205 0019 BF 00 00                		movw	!_cycleMode, ax
  51:../src/my_functions.c **** 		cycleTimer = 0;
 206                             		.loc 1 51 0
 207 001c F6                      		clrw	ax
 208 001d BF 00 00                		movw	!_cycleTimer, ax
  52:../src/my_functions.c **** 		cycleStart = 0;
 209                             		.loc 1 52 0
 210 0020 F6                      		clrw	ax
 211 0021 BF 00 00                		movw	!_cycleStart, ax
  53:../src/my_functions.c **** 		oneFlag = 0;
 212                             		.loc 1 53 0
 213 0024 F6                      		clrw	ax
 214 0025 BF 00 00                		movw	!_oneFlag, ax
  54:../src/my_functions.c **** 		twoFlag = 0;
 215                             		.loc 1 54 0
 216 0028 F6                      		clrw	ax
 217 0029 BF 00 00                		movw	!_twoFlag, ax
 218                             	.L2:
  55:../src/my_functions.c **** 	}
  56:../src/my_functions.c **** 
  57:../src/my_functions.c **** 	RS = 0;
 219                             		.loc 1 57 0
 220 002c C9 F0 07 FF             		movw	r8, #-249
 221 0030 AD F0                   		movw	ax, r8
 222 0032 BD F4                   		movw	r12, ax
 223 0034 FA F4                   		movw	hl, r12
 224 0036 8B                      		mov	a, [hl]
 225 0037 9D F2                   		mov	r10, a
 226 0039 5A F2 BF                		and	r10, #-65
 227 003c AD F0                   		movw	ax, r8
 228 003e DA F4                   		movw	bc, r12
 229 0040 8D F2                   		mov	a, r10
 230 0042 48 00 00                		mov	[bc], a
  58:../src/my_functions.c **** 	//Clear
  59:../src/my_functions.c **** 	LCD_write_Nibble(0,0,0,0);
 231                             		.loc 1 59 0
 232 0045 C8 00 00                		mov	[sp], #0
 233 0048 C8 02 00                		mov	[sp+2], #0
 234 004b C8 04 00                		mov	[sp+4], #0
 235 004e C8 06 00                		mov	[sp+6], #0
 236 0051 FC 00 00 00             		call	!!%code(_LCD_write_Nibble)
  60:../src/my_functions.c **** 	LCD_write_Nibble(0,0,0,1);
 237                             		.loc 1 60 0
 238 0055 C8 00 00                		mov	[sp], #0
 239 0058 C8 02 00                		mov	[sp+2], #0
 240 005b C8 04 00                		mov	[sp+4], #0
 241 005e C8 06 01                		mov	[sp+6], #1
 242 0061 FC 00 00 00             		call	!!%code(_LCD_write_NibblarmConditionWind;
 102:../src/r_mai	delayNoInt(3000);
 243                             		.loc 1 61 0
 244 0065 30 B8 0B                		movw	ax, #3000
 245 0068 B8 00                   		movw	[sp], ax
 246 006a FC 00 00 00             		call	!!%code(_delayNoInt)
  62:../src/my_functions.c **** 
  63:../src/my_functions.c **** 	// Cursor home
  64:../src/my_functions.c **** 	LCD_write_Nibble(0,0,0,0);
 247                             		.loc 1 64 0
 248 006e C8 00 00                		mov	[sp], #0
 249 0071 C8 02 00                		mov	[sp+2], #0
 250 0074 C8 04 00                		mov	[sp+4], #0
 251 0077 C8 06 00                		mov	[sp+6], #0
 252 007a FC 00 00 00             		call	!!%code(_LCD_write_Nibble)
  65:../src/my_functions.c **** 	LCD_write_Nibble(0,0,1,0);
 253                             		.loc 1 65 0
 254 007e C8 00 00                		mov	[sp], #0
 255 0081 C8 02 00                		mov	[sp+2], #0
 256 0084 C8 04 01                		mov	[sp+4], #1
 257 0087 C8 06 00                		mov	[sp+6], #0
 258 008a FC 00 00 00             		call	!!%code(_LCD_write_Nibble)
  66:../src/my_functions.c **** 	delayNoInt(1640);
 259                             		.loc 1 66 0
 260 008e 30 68 06                		movw	ax, #1640
 261 0091 B8 00                   		movw	[sp], ax
 262 0093 FC 00 00 00             		call	!!%code(_delayNoInt)
  67:../src/my_functions.c **** 
  68:../src/my_functions.c **** 	RS = 1;
 263                             		.loc 1 68 0
 264 0097 C9 F0 07 FF             		movw	r8, #-249
 265 009b AD F0                   		movw	ax, r8
 266 009d BD F4                   		movw	r12, ax
 267 009f FA F4                   		movw	hl, r12
 268 00a1 8B                      		mov	a, [hl]
 269 00a2 9D F2                   		mov	r10, a
 270 00a4 6A F2 40                		or	r10, #64
 271 00a7 AD F0                   		movw	ax, r8
 272 00a9 DA F4                   		movw	bc, r12
 273 00ab 8D F2                   		mov	a, r10
 274 00ad 48 00 00                		mov	[bc], a
  69:../src/my_functions.c **** 
  70:../src/my_functions.c **** 	if((cycleTimer<9)&&((twoFlag)))
 275                             		.loc 1 70 0
 276 00b0 AF 00 00                		movw	ax, !_cycleTimer
 277 00b3 BD F0                   		movw	r8, ax
 278 00b5 44 08 00                		cmpw	ax, #8 
 279 00b8 71 FF                   		xor1 CY,a.7
 280 00ba 61 F3                   		sknh 
 281 00bc EC E2 00 00             		br	!!.L3
 282                             		.loc 1 70 0 is_stmt 0 discriminator 1
 283 00c0 AF 00 00                		movw	ax, !_twoFlag
 284 00c3 BD F0                   		movw	r8, ax
 285 00c5 44 00 00                		cmpw	ax, #0 
 286 00c8 61 F8                   		sknz 
 287 00ca EC E2 00 00             		br	!!.L3
  71:../src/my_functions.c **** 	{
  72:../src/my_functions.c **** 		twoFlag = 0;
 288                             		.loc 1 72 0 is_stmt 1
 289 00ce F6                      		clrw	ax
 290 00cf BF 00 00                		movw	!_twoFlag, ax
  73:../src/my_functions.c **** 		cycleMode++;
 291                             		.loc 1 73 0
 292 00d2 AF 00 00                		movw	ax, !_cycleMode
 293 00d5 BD F0                   		movw	r8, ax
 294 00d7 A6 F0                   		incw	r8
 295 00d9 AD F0                   		movw	ax, r8
 296 00db BF 00 00                		movw	!_cycleMode, ax
 297 00de EC 02 01 00             		br	!!.L4
 298                             	.L3:
  74:../src/my_functions.c **** 	}
  75:../src/my_functions.c **** 	else if(cycleTimer>=60)
 299                             		.loc 1 75 0
 300 00e2 AF 00 00                		movw	ax, !_cycleTimer
 301 00e5 BD F0                   		movw	r8, ax
 302 00e7 44 3B 00                		cmpw	ax, #59 
 303 00ea 71 FF                   		xor1 CY,a.7
 304 00ec 61 E3                   		skh 
 305 00ee EC 02 01 00             		br	!!.L4
  76:../src/my_functions.c **** 	{
  77:../src/my_functions.c **** 		cycleTimer = 0;
 306                             		.loc 1 77 0
 307 00f2 F6                      		clrw	ax
 308 00f3 BF 00 00                		movw	!_cycleTimer, ax
 ;
 172                             	eMode = 0;
 309                             		.loc 1 78 0
 310 00f6 F6                      		clrw	ax
 311 00f7 BF 00 00                		movw	!_cycleMode, ax
  79:../src/my_functions.c **** 		oneFlag = 0;
 312                             		.loc 1 79 0
 313 00fa F6                      		clrw	ax
 314 00fb BF 00 00                		movw	!_oneFlag, ax
  80:../src/my_functions.c **** 		twoFlag = 0;
 315                             		.loc 1 80 0
 316 00fe F6                      		clrw	ax
 317 00ff BF 00 00                		movw	!_twoFlag, ax
 318                             	.L4:
  81:../src/my_functions.c **** 	}
  82:../src/my_functions.c **** 
  83:../src/my_functions.c **** 	switch(cycleMode)
 319                             		.loc 1 83 0
 320 0102 AF 00 00                		movw	ax, !_cycleMode
 321 0105 BD F0                   		movw	r8, ax
 322 0107 44 02 00                		cmpw	ax, #2 
 323 010a 61 F8                   		sknz 
 324 010c EC E3 01 00             		br	!!.L6
 325 0110 AD F0                   		movw	ax, r8
 326 0112 44 02 00                		cmpw	ax, #2 
 327 0115 71 FF                   		xor1 CY,a.7
 328 0117 61 F3                   		sknh 
 329 0119 EC 37 01 00             		br	!!.L7
 330 011d AD F0                   		movw	ax, r8
 331 011f 44 00 00                		cmpw	ax, #0 
 332 0122 61 F8                   		sknz 
 333 0124 EC 51 01 00             		br	!!.L8
 334 0128 AD F0                   		movw	ax, r8
 335 012a 44 01 00                		cmpw	ax, #1 
 336 012d 61 F8                   		sknz 
 337 012f EC 94 01 00             		br	!!.L9
 338 0133 EC 7B 03 00             		br	!!.L1
 339                             	.L7:
 340 0137 AD F0                   		movw	ax, r8
 341 0139 44 03 00                		cmpw	ax, #3 
 342 013c 61 F8                   		sknz 
 343 013e EC 2E 02 00             		br	!!.L10
 344 0142 AD F0                   		movw	ax, r8
 345 0144 44 04 00                		cmpw	ax, #4 
 346 0147 61 F8                   		sknz 
 347 0149 EC 7D 02 00             		br	!!.L11
 348 014d EC 7B 03 00             		br	!!.L1
 349                             	.L8:
  84:../src/my_functions.c **** 	{
  85:../src/my_functions.c **** 
  86:../src/my_functions.c **** 	case modeTemp :
  87:../src/my_functions.c **** 	{
  88:../src/my_functions.c **** 		strcpy(displayArr, "Temp ");
 350                             		.loc 1 88 0
 351 0151 CF 00 00 54             		mov	!_displayArr, #84
 352 0155 CF 00 00 65             		mov	!_displayArr+1, #101
 353 0159 CF 00 00 6D             		mov	!_displayArr+2, #109
 354 015d CF 00 00 70             		mov	!_displayArr+3, #112
 355 0161 CF 00 00 20             		mov	!_displayArr+4, #32
 356 0165 F5 00 00                		clrb	!_displayArr+5
  89:../src/my_functions.c **** 		writeNumber(displayArr + 5, Temperature);
 357                             		.loc 1 89 0
 358 0168 8F 00 00                		mov	a, !_Temperature
 359 016b 9D F0                   		mov	r8, a
 360 016d 30 00 00                		movw	ax, #_displayArr+5
 361 0170 B8 00                   		movw	[sp], ax
 362 0172 8D F0                   		mov	a, r8
 363 0174 98 02                   		mov	[sp+2], a
 364 0176 FC 00 00 00             		call	!!%code(_writeNumber)
  90:../src/my_functions.c **** 		displayArr[10] = '\'';
 365                             		.loc 1 90 0
 366 017a CF 00 00 27             		mov	!_displayArr+10, #39
  91:../src/my_functions.c **** 		displayArr[11] = 'C';
 367                             		.loc 1 91 0
 368 017e CF 00 00 43             		mov	!_displayArr+11, #67
  92:../src/my_functions.c **** 		Start(displayArr,12);
 369                             		.loc 1 92 0
 370 0182 30 00 00                		movw	ax, #_displayArr
 371 0185 B8 00                   		movw	[sp], ax
 372 0187 30 0C 00                		movw	ax, #12
 373 018a B8 02                   		movw	[sp+2], ax
 374 018c FC 00 00 00             		call	!!%code(_Start)
  93:../src/my_functions.c **** 	}
  94:../src/my_functions.c **** 	break;
 375                             		.loc 1 94 009b 61 E3                   		skh  		br	!!.L1
 377                             	.L9:
  95:../src/my_functions.c **** 
  96:../src/my_functions.c **** 	case modeHum :
  97:../src/my_functions.c **** 
  98:../src/my_functions.c **** 		strcpy(displayArr, "Humidity ");
 378                             		.loc 1 98 0
 379 0194 CF 00 00 48             		mov	!_displayArr, #72
 380 0198 CF 00 00 75             		mov	!_displayArr+1, #117
 381 019c CF 00 00 6D             		mov	!_displayArr+2, #109
 382 01a0 CF 00 00 69             		mov	!_displayArr+3, #105
 383 01a4 CF 00 00 64             		mov	!_displayArr+4, #100
 384 01a8 CF 00 00 69             		mov	!_displayArr+5, #105
 385 01ac CF 00 00 74             		mov	!_displayArr+6, #116
 386 01b0 CF 00 00 79             		mov	!_displayArr+7, #121
 387 01b4 CF 00 00 20             		mov	!_displayArr+8, #32
 388 01b8 F5 00 00                		clrb	!_displayArr+9
  99:../src/my_functions.c **** 		writeNumber(displayArr + 9, Humidity);
 389                             		.loc 1 99 0
 390 01bb 8F 00 00                		mov	a, !_Humidity
 391 01be 9D F0                   		mov	r8, a
 392 01c0 30 00 00                		movw	ax, #_displayArr+9
 393 01c3 B8 00                   		movw	[sp], ax
 394 01c5 8D F0                   		mov	a, r8
 395 01c7 98 02                   		mov	[sp+2], a
 396 01c9 FC 00 00 00             		call	!!%code(_writeNumber)
 100:../src/my_functions.c **** 		displayArr[14] = '%';
 397                             		.loc 1 100 0
 398 01cd CF 00 00 25             		mov	!_displayArr+14, #37
 101:../src/my_functions.c **** 		Start(displayArr,15);
 399                             		.loc 1 101 0
 400 01d1 30 00 00                		movw	ax, #_displayArr
 401 01d4 B8 00                   		movw	[sp], ax
 402 01d6 30 0F 00                		movw	ax, #15
 403 01d9 B8 02                   		movw	[sp+2], ax
 404 01db FC 00 00 00             		call	!!%code(_Start)
 102:../src/my_functions.c **** 
 103:../src/my_functions.c **** 		break;
 405                             		.loc 1 103 0
 406 01df EC 7B 03 00             		br	!!.L1
 407                             	.L6:
 104:../src/my_functions.c **** 
 105:../src/my_functions.c **** 	case modePres :
 106:../src/my_functions.c **** 
 107:../src/my_functions.c **** 		strcpy(displayArr, "Press ");
 408                             		.loc 1 107 0
 409 01e3 CF 00 00 50             		mov	!_displayArr, #80
 410 01e7 CF 00 00 72             		mov	!_displayArr+1, #114
 411 01eb CF 00 00 65             		mov	!_displayArr+2, #101
 412 01ef CF 00 00 73             		mov	!_displayArr+3, #115
 413 01f3 CF 00 00 73             		mov	!_displayArr+4, #115
 414 01f7 CF 00 00 20             		mov	!_displayArr+5, #32
 415 01fb F5 00 00                		clrb	!_displayArr+6
 108:../src/my_functions.c **** 		writeNumber(displayArr + 6, Pressure);
 416                             		.loc 1 108 0
 417 01fe 8F 00 00                		mov	a, !_Pressure
 418 0201 9D F0                   		mov	r8, a
 419 0203 30 00 00                		movw	ax, #_displayArr+6
 420 0206 B8 00                   		movw	[sp], ax
 421 0208 8D F0                   		mov	a, r8
 422 020a 98 02                   		mov	[sp+2], a
 423 020c FC 00 00 00             		call	!!%code(_writeNumber)
 109:../src/my_functions.c **** 		displayArr[11] = 'k';
 424                             		.loc 1 109 0
 425 0210 CF 00 00 6B             		mov	!_displayArr+11, #107
 110:../src/my_functions.c **** 		displayArr[12] = 'P';
 426                             		.loc 1 110 0
 427 0214 CF 00 00 50             		mov	!_displayArr+12, #80
 111:../src/my_functions.c **** 		displayArr[13] = 'a';
 428                             		.loc 1 111 0
 429 0218 CF 00 00 61             		mov	!_displayArr+13, #97
 112:../src/my_functions.c **** 
 113:../src/my_functions.c **** 		Start(displayArr,14);
 430                             		.loc 1 113 0
 431 021c 30 00 00                		movw	ax, #_displayArr
 432 021f B8 00                   		movw	[sp], ax
 433 0221 30 0E 00                		movw	ax, #14
 434 0224 B8 02                		.loc 1 186 0
 296 0128 30 03 FC 00 00 00             		call	!!%code(_Start)
 114:../src/my_functions.c **** 		break;
 436                             		.loc 1 114 0
 437 022a EC 7B 03 00             		br	!!.L1
 438                             	.L10:
 115:../src/my_functions.c **** 
 116:../src/my_functions.c **** 	case modeWind :
 117:../src/my_functions.c **** 
 118:../src/my_functions.c **** 		strcpy(displayArr, "Wind/S ");
 439                             		.loc 1 118 0
 440 022e CF 00 00 57             		mov	!_displayArr, #87
 441 0232 CF 00 00 69             		mov	!_displayArr+1, #105
 442 0236 CF 00 00 6E             		mov	!_displayArr+2, #110
 443 023a CF 00 00 64             		mov	!_displayArr+3, #100
 444 023e CF 00 00 2F             		mov	!_displayArr+4, #47
 445 0242 CF 00 00 53             		mov	!_displayArr+5, #83
 446 0246 CF 00 00 20             		mov	!_displayArr+6, #32
 447 024a F5 00 00                		clrb	!_displayArr+7
 119:../src/my_functions.c **** 		writeNumber(displayArr + 7, WindSpeed);
 448                             		.loc 1 119 0
 449 024d 8F 00 00                		mov	a, !_WindSpeed
 450 0250 9D F0                   		mov	r8, a
 451 0252 30 00 00                		movw	ax, #_displayArr+7
 452 0255 B8 00                   		movw	[sp], ax
 453 0257 8D F0                   		mov	a, r8
 454 0259 98 02                   		mov	[sp+2], a
 455 025b FC 00 00 00             		call	!!%code(_writeNumber)
 120:../src/my_functions.c **** 		displayArr[12] = 'm';
 456                             		.loc 1 120 0
 457 025f CF 00 00 6D             		mov	!_displayArr+12, #109
 121:../src/my_functions.c **** 		displayArr[13] = '/';
 458                             		.loc 1 121 0
 459 0263 CF 00 00 2F             		mov	!_displayArr+13, #47
 122:../src/my_functions.c **** 		displayArr[14] = 's';
 460                             		.loc 1 122 0
 461 0267 CF 00 00 73             		mov	!_displayArr+14, #115
 123:../src/my_functions.c **** 		Start(displayArr,15);
 462                             		.loc 1 123 0
 463 026b 30 00 00                		movw	ax, #_displayArr
 464 026e B8 00                   		movw	[sp], ax
 465 0270 30 0F 00                		movw	ax, #15
 466 0273 B8 02                   		movw	[sp+2], ax
 467 0275 FC 00 00 00             		call	!!%code(_Start)
 124:../src/my_functions.c **** 		break;
 468                             		.loc 1 124 0
 469 0279 EC 7B 03 00             		br	!!.L1
 470                             	.L11:
 471                             	.LBB2:
 125:../src/my_functions.c **** 
 126:../src/my_functions.c **** 	case modeDT :
 127:../src/my_functions.c **** 	{
 128:../src/my_functions.c **** 
 129:../src/my_functions.c **** 		uart1TxBuf[5] = BCD_to_Dec(my_time.sec);
 472                             		.loc 1 129 0
 473 027d 8F 00 00                		mov	a, !_my_time
 474 0280 9D F0                   		mov	r8, a
 475 0282 CD F1 00                		mov	r9, #0
 476 0285 AD F0                   		movw	ax, r8
 477 0287 B8 00                   		movw	[sp], ax
 478 0289 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 479 028d 8D F0                   		mov	a, r8
 480 028f 9F 00 00                		mov	!_uart1TxBuf+5, a
 130:../src/my_functions.c **** 		uart1TxBuf[4] = BCD_to_Dec(my_time.min);
 481                             		.loc 1 130 0
 482 0292 8F 00 00                		mov	a, !_my_time+1
 483 0295 9D F0                   		mov	r8, a
 484 0297 CD F1 00                		mov	r9, #0
 485 029a AD F0                   		movw	ax, r8
 486 029c B8 00                   		movw	[sp], ax
 487 029e FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 488 02a2 8D F0                   		mov	a, r8
 489 02a4 9F 00 00                		mov	!_uart1TxBuf+4, a
 131:../src/my_functions.c **** 		uart1TxBuf[3] = BCD_to_Dec(my_time.hour);
 490                             		.loc 1 131 0
 491 02a7 8F 00 00                		mov	a, !_my_time+2
 492 02aa 9D F0                   		mov	r8, a
 493 02ac CD F1 00                		mov	r9, #0
 494 02af AD F0                   		movw	ax, r8
 495 02b1 B8 00                  00                		movw	!_ FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 497 02b7 8D F0                   		mov	a, r8
 498 02b9 9F 00 00                		mov	!_uart1TxBuf+3, a
 132:../src/my_functions.c **** 		uart1TxBuf[2] = BCD_to_Dec(my_time.day);
 499                             		.loc 1 132 0
 500 02bc 8F 00 00                		mov	a, !_my_time+3
 501 02bf 9D F0                   		mov	r8, a
 502 02c1 CD F1 00                		mov	r9, #0
 503 02c4 AD F0                   		movw	ax, r8
 504 02c6 B8 00                   		movw	[sp], ax
 505 02c8 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 506 02cc 8D F0                   		mov	a, r8
 507 02ce 9F 00 00                		mov	!_uart1TxBuf+2, a
 133:../src/my_functions.c **** 		uart1TxBuf[1] = BCD_to_Dec(my_time.month);
 508                             		.loc 1 133 0
 509 02d1 8F 00 00                		mov	a, !_my_time+5
 510 02d4 9D F0                   		mov	r8, a
 511 02d6 CD F1 00                		mov	r9, #0
 512 02d9 AD F0                   		movw	ax, r8
 513 02db B8 00                   		movw	[sp], ax
 514 02dd FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 515 02e1 8D F0                   		mov	a, r8
 516 02e3 9F 00 00                		mov	!_uart1TxBuf+1, a
 134:../src/my_functions.c **** 
 135:../src/my_functions.c **** 		strcpy(displayArr, "");
 517                             		.loc 1 135 0
 518 02e6 CD F0 00                		mov	r8, #0
 519 02e9 8D F0                   		mov	a, r8
 520 02eb 9F 00 00                		mov	!_displayArr, a
 136:../src/my_functions.c **** 		writeNumber2(displayArr, uart1TxBuf[2]*2);
 521                             		.loc 1 136 0
 522 02ee 8F 00 00                		mov	a, !_uart1TxBuf+2
 523 02f1 9D F0                   		mov	r8, a
 524 02f3 61 01                   		add	a, a
 525 02f5 9D F0                   		mov	r8, a
 526 02f7 30 00 00                		movw	ax, #_displayArr
 527 02fa B8 00                   		movw	[sp], ax
 528 02fc 8D F0                   		mov	a, r8
 529 02fe 98 02                   		mov	[sp+2], a
 530 0300 FC 00 00 00             		call	!!%code(_writeNumber2)
 137:../src/my_functions.c **** 		displayArr[2] = '/';
 531                             		.loc 1 137 0
 532 0304 CF 00 00 2F             		mov	!_displayArr+2, #47
 138:../src/my_functions.c **** 		writeNumber2(displayArr+3, uart1TxBuf[1]*2);
 533                             		.loc 1 138 0
 534 0308 8F 00 00                		mov	a, !_uart1TxBuf+1
 535 030b 9D F0                   		mov	r8, a
 536 030d 61 01                   		add	a, a
 537 030f 9D F0                   		mov	r8, a
 538 0311 30 00 00                		movw	ax, #_displayArr+3
 539 0314 B8 00                   		movw	[sp], ax
 540 0316 8D F0                   		mov	a, r8
 541 0318 98 02                   		mov	[sp+2], a
 542 031a FC 00 00 00             		call	!!%code(_writeNumber2)
 139:../src/my_functions.c **** 		displayArr[5] = ' ';
 543                             		.loc 1 139 0
 544 031e CF 00 00 20             		mov	!_displayArr+5, #32
 140:../src/my_functions.c **** 		writeNumber2(displayArr+6, uart1TxBuf[3]*2);
 545                             		.loc 1 140 0
 546 0322 8F 00 00                		mov	a, !_uart1TxBuf+3
 547 0325 9D F0                   		mov	r8, a
 548 0327 61 01                   		add	a, a
 549 0329 9D F0                   		mov	r8, a
 550 032b 30 00 00                		movw	ax, #_displayArr+6
 551 032e B8 00                   		movw	[sp], ax
 552 0330 8D F0                   		mov	a, r8
 553 0332 98 02                   		mov	[sp+2], a
 554 0334 FC 00 00 00             		call	!!%code(_writeNumber2)
 141:../src/my_functions.c **** 		displayArr[8] = ':';
 555                             		.loc 1 141 0
 556 0338 CF 00 00 3A             		mov	!_displayArr+8, #58
 142:../src/my_functions.c **** 		writeNumber2(displayArr+9, uart1TxBuf[4]*2);
 557                             		.loc 1 142 0
 558 033c 8F 00 00                		mov	a, !_uart1TxBuf+4
 559 033f 9D F0                   		mov	r8, a
 560 0341 61 01                   		add	a, a
 561 0343 9D F0  21e EC 13 02 00             		br	!!.L10
 217:../src/r_main.c **** 	IIC_Flag = 0;
 425                             		.loc 1 217 0
 426 0222 F6                      		clrw	ax
 427 0223 BF 00 00                		movw	!_IIC_Flag, ax
 218:../src/r_main.c **** 
 219:../src/r_main.c **** 	delayNoInt(300);
 428                             		.loc 1 219 0
 429 0226 30 2C 01                		movw	ax, #300
 430 0229 B8 00                   		movw	[sp], ax
 431 022b FC 00 00 00             		call	!!%code(_delayNoInt)
 220:../src/r_main.c **** 
 221:../src/r_main.c **** 
 222:../src/r_main.c **** 	delayNoInt(50000);
 432                             		.loc 1 222 0
 433 022f 30 50 C3                		movw	ax, #-15536
 434 0232 B8 00                   		movw	[sp], ax
 435 0234 F6                      		clrw	ax
 436 0235 B8 02                   		movw	[sp+2], ax
 437 0237 FC 00 00 00             		call	!!%code(_delayNoInt)
 223:../src/r_main.c **** 	delayNoInt(39000);
 438                             		.loc 1 223 0
 439 023b 30 58 98                		movw	ax, #-26536
 440 023e B8 00                   		movw	[sp], ax
 441 0240 F6                      		clrw	ax
 442 0241 B8 02                   		movw	[sp+2], ax
 443 0243 FC 00 00 00             		call	!!%code(_delayNoInt)
 224:../src/r_main.c **** 	R_IICA0_Master_Receive(0xC1, IIC_Buf, 8, 0);
 444                             		.loc 1 224 0
 445 0247 C8 00 C1                		mov	[sp], #-63
 446 024a 30 00 00                		movw	ax, #_IIC_Buf
 447 024d B8 02                   		movw	[sp+2], ax
 448 024f 30 08 00                		movw	ax, #8
 449 0252 B8 04                   		movw	[sp+4], ax
 450 0254 C8 06 00                		mov	[sp+6], #0
 451 0257 FC 00 00 00             		call	!!%code(_R_IICA0_Master_Receive)
 225:../src/r_main.c **** 
 226:../src/r_main.c **** 	while(IIC_Flag == 0)
 452                             		.loc 1 226 0
 453 025b EC 60 02 00             		br	!!.L11
 454                             	.L12:
 227:../src/r_main.c **** 		NOP();
 455                             		.loc 1 227 0
 456                             	 ; 227 "../src/r_main.c" 1
 457 025f 00                      		nop
 458                             	 ; 0 "" 2
 459                             	.L11:
 226:../src/r_main.c **** 	while(IIC_Flag == 0)
 460                             		.loc 1 226 0 discriminator 1
 461 0260 AF 00 00                		movw	ax, !_IIC_Flag
 462 0263 BD F0                   		movw	r8, ax
 463 0265 44 00 00                		cmpw	ax, #0 
 464 0268 61 F8                   		sknz 
 465 026a EC 5F 02 00             		br	!!.L12
 228:../src/r_main.c **** 	IIC_Flag = 0;
 466                             		.loc 1 228 0
 467 026e F6                      		clrw	ax
 468 026f BF 00 00                		movw	!_IIC_Flag, ax
 229:../src/r_main.c **** 
 230:../src/r_main.c **** 	delayNoInt(1000);
 469                             		.loc 1 230 0
 470 0272 30 E8 03                		movw	ax, #1000
 471 0275 B8 00                   		movw	[sp], ax
 472 0277 FC 00 00 00             		call	!!%code(_delayNoInt)
 231:../src/r_main.c **** 
 232:../src/r_main.c **** 	calCoef(IIC_Buf);
 473                             		.loc 1 232 0
 474 027b 30 00 00                		movw	ax, #_IIC_Buf
 475 027e B8 00                   		movw	[sp], ax
 476 0280 FC 00 00 00             		call	!!%code(_calCoef)
 477                             	.L65:
 478                             	.LBB2:
 233:../src/r_main.c **** 
 234:../src/r_main.c **** 
 235:../src/r_main.c **** 
 236:../src/r_main.c **** 	//------------------------------------------------------------------------------------------------
 237:../src/r_main.c **** 
 238:../src/r_main.c **** 
 239:../src/r_main.c **** 	while (1U)
 240:../src/r_main.c **** 	{
 241:../src/r_main.c **** 
 242:../src/r_main.c **** 		flagCheck();
 479                             		.loc 1 242 0
 480 0284 FC 00 00 00             		call	!!%code(_flagCheck)
 243:../src/r_main.c **** 		if((welcomeFlag==0))
 481                             		.loc 1 243 0
 482 0288 AF 00 00                		movw	ax, !_welcomeFlag
 483 028b BD F0                   		movw	r8, ax
 484 028d 44 00 00                		cmpw	ax, #0 
 485 0290 61 E8                   		skz 
 486 0292 EC B8 02 00             		br	!!.L13
 244:../src/r_main.c **** 		{
 245:../src/r_main.c **** 			if((twoFlag))
 487                             		.loc 1 245 0
 488 0296 AF 00 00                		movw	ax, !_twoFlag
 489 0299 BD F0                   		movw	r8, ax
 490 029b 44 00 00                		cmpw	ax, #0 
 491 029e 61 F8                   		sknz 
 492 02a0 EC B8 02 00             		br	!!.L13
 246:../src/r_main.c **** 			{
 247:../src/r_main.c **** 				oneFlag = 0;
 493                             		.loc 1 247 0
 494 02a4 F6                      		clrw	ax
 495 02a5 BF 00 00                		movw	!_oneFlag, ax
 248:../src/r_main.c **** 				twoFlag = 0;
 496                             		.loc 1 248 0
 497 02a8 F6                      		clrw	ax
 498 02a9 BF 00 00                		movw	!_twoFlag, ax
 249:../src/r_main.c **** 				cycleTimer = 0;
 499                             		.loc 1 249 0
 500 02ac F6                      		clrw	ax
 501 02ad BF 00 00                		movw	!_cycleTimer, ax
 250:../src/r_main.c **** 				cycleStart = 1;
 502                             		.loc 1 250 0
 503 02b0 E6                      		onew	ax
 504 02b1 BF 00 00                		movw	!_cycleStart, ax
 251:../src/r_main.c **** 				welcomeFlag = 1;
 505                             		.loc 1 251 0
 506 02b4 E6                      		onew	ax
 507 02b5 BF 00 00                		movw	!_welcomeFlag, ax
 508                             	.L13:
 252:../src/r_main.c **** 			}
 253:../src/r_main.c **** 		}
 254:../src/r_main.c **** 		if((cycleStart)||((oneFlag)&&(welcomeFlag)))
 509                             		.loc 1 254 0
 510 02b8 AF 00 00                		movw	ax, !_cycleStart
 511 02bb BD F0                   		movw	r8, ax
 512 02bd 44 00 00                		cmpw	ax, #0 
 513 02c0 61 E8                   		skz 
 514 02c2 EC E2 02 00             		br	!!.L14
 515                             		.loc 1 254 0 is_stmt 0 discriminator 1
 516 02c6 AF 00 00                		movw	ax, !_oneFlag
 517 02c9 BD F0                   		movw	r8, ax
 518 02cb 44 00 00                		cmpw	ax, #0 
 519 02ce 61 F8                   		sknz 
 520 02d0 EC 14 03 00             		br	!!.L15
 521 02d4 AF 00 00                		movw	ax, !_welcomeFlag
 522 02d7 BD F0                   		movw	r8, ax
 523 02d9 44 00 00                		cmpw	ax, #0 
 524 02dc 61 F8                   		sknz 
 525 02de EC 14 03 00             		br	!!.L15
 526                             	.L14:
 527                             	.LBB3:
 255:../src/r_main.c **** 		{
 256:../src/r_main.c **** 			oneFlag = 0;
 528                             		.loc 1 256 0 is_stmt 1
 529 02e2 F6                      		clrw	ax
 530 02e3 BF 00 00                		movw	!_oneFlag, ax
 257:../src/r_main.c **** 			if((Mode=='N')&&(menuState==CYCLE)&&(!powerFlag))
 531                             		.loc 1 257 0
 532 02e6 8F 00 00                		mov	a, !_Mode
 533 02e9 9D F0                   		mov	r8, a
 534 02eb 4A F0 4E                		cmp	r8, #78 
 535 02ee 61 E8                   		skz 
 536 02f0 EC 14 03 00             		br	!!.L15
 537                             		.loc 1 257 0 is_stmt 0 discriminator 1
 538 02f4 AF 00 00                		movw	ax, !_menuState
 539 02f7 BD F0                   		movw	r8, ax
 540 02f9 44 00 00                		cmpw	ax, #0 
 541 02fc 61 E8                   		skz 
 542 02fe EC 14 03 00             		br	!!.L15
 543 0302 AF 00 00                		movw	ax, !_powerFlag
 544 0305 BD F0                   		movw	r8, ax
 545 0307 44 00 00                		cmpw	ax, #0 
 546 030a 61 E8                   		skz 
 547 030c EC 14 03 00             		br	!!.L15
 258:../src/r_main.c **** 				cycle();
 548                             		.loc 1 258 0 is_stmt 1
 549 0310 FC 00 00 00             		call	!!%code(_cycle)
 550                             	.L15:
 551                             	.LBE3:
 259:../src/r_main.c **** 		}
 260:../src/r_main.c **** 		if (uart1RxFlag)
 552                      	.L30:
 173:../src/my_functions.c **** 		while(IIC_Flag == 0)
 706                             		.loc 1 173 0 discriminator 1
 707 046c AF 00 00                		movw	ax, !_IIC_Flag
 708 046f BD F0                   		movw	r8, ax
 709 0471 44 00 00                		cmpw	ax, #0 
 710 0474 61 F8                   		sknz 
 711 0476 EC 6B 04 00             		br	!!.L31
 175:../src/my_functions.c **** 		IIC_Flag = 0;
 712                             		.loc 1 175 0
 713 047a F6                      		clrw	ax
 714 047b BF 00 00                		movw	!_IIC_Flag, ax
 176:../src/my_functions.c **** 		break;
 715                             		.loc 1 176 0
 716 047e EC 87 0F 00             		br	!!.L12
 717                             	.L19:
 177:../src/my_functions.c **** 	case 2 :
 178:../src/my_functions.c **** 		R_IICA0_StopCondition();
 718                             		.loc 1 178 0
 719 0482 FC 00 00 00             		call	!!%code(_R_IICA0_StopCondition)
 179:../src/my_functions.c **** 		break;
 720                             		.loc 1 179 0
 721 0486 EC 87 0F 00             		br	!!.L12
 722                             	.L16:
 180:../src/my_functions.c **** 	case 11 :
 181:../src/my_functions.c **** 		R_IICA0_Master_Receive(0x81, IIC_Buf, 2, 0);
 723                             		.loc 1 181 0
 724 048a C8 00 81                		mov	[sp], #-127
 725 048d 30 00 00                		movw	ax, #_IIC_Buf
 726 0490 B8 02                   		movw	[sp+2], ax
 727 0492 30 02 00                		movw	ax, #2
 728 0495 B8 04                   		movw	[sp+4], ax
 729 0497 C8 06 00                		mov	[sp+6], #0
 730 049a FC 00 00 00             		call	!!%code(_R_IICA0_Master_Receive)
 182:../src/my_functions.c **** 
 183:../src/my_functions.c **** 		while(IIC_Flag == 0)
 731                             		.loc 1 183 0
 732 049e EC A3 04 00             		br	!!.L32
 733                             	.L33:
 184:../src/my_functions.c **** 			NOP();
 734                             		.loc 1 184 0
 735                             	 ; 184 "../src/my_functions.c" 1
 736 04a2 00                      		nop
 737                             	 ; 0 "" 2
 738                             	.L32:
 183:../src/my_functions.c **** 		while(IIC_Flag == 0)
 739                             		.loc 1 183 0 discriminator 1
 740 04a3 AF 00 00                		movw	ax, !_IIC_Flag
 741 04a6 BD F0                   		movw	r8, ax
 742 04a8 44 00 00                		cmpw	ax, #0 
 743 04ab 61 F8                   		sknz 
 744 04ad EC A2 04 00             		br	!!.L33
 185:../src/my_functions.c **** 		IIC_Flag = 0;
 745                             		.loc 1 185 0
 746 04b1 F6                      		clrw	ax
 747 04b2 BF 00 00                		movw	!_IIC_Flag, ax
 186:../src/my_functions.c **** 		break;
 748                             		.loc 1 186 0
 749 04b5 EC 87 0F 00             		br	!!.L12
 750                             	.L20:
 187:../src/my_functions.c **** 	case 12 :
 188:../src/my_functions.c **** 		R_IICA0_StopCondition(); //Send stop condition
 751                             		.loc 1 188 0
 752 04b9 FC 00 00 00             		call	!!%code(_R_IICA0_StopCondition)
 189:../src/my_functions.c **** 
 190:../src/my_functions.c **** 		IIC_Buf[1] = convertTemp(IIC_Buf);
 753                             		.loc 1 190 0
 754 04bd 30 00 00                		movw	ax, #_IIC_Buf
 755 04c0 B8 00                   		movw	[sp], ax
 756 04c2 FC 00 00 00             		call	!!%code(_convertTemp)
 757 04c6 8D F0                   		mov	a, r8
 758 04c8 9F 00 00                		mov	!_IIC_Buf+1, a
 191:../src/my_functions.c **** 		IIC_Buf[0] = 0xF7;
 759                             		.loc 1 191 0
 760 04cb CF 00 00 F7             		mov	!_IIC_Buf, #-9
 192:../src/my_functions.c **** 
 193:../src/my_functions.c **** 		Temperature = IIC_Buf[1];
 761                             		.loc 1 193 0
 762 04cf 8F 00 00                		mov	a, !_IIC_Buf+1
 763 04d2 9D F0                   		mov	r8, a
 764 04d4 9F 00 00                		mov	!_Temperature, a
 194:../src/my_f	bc, r8
 619 03a2 48 00 00                		mov	_dataBuf[bc], a
 280:../src/r_main.c **** 					if(data_count<40)
 620                             		.loc 1 280 0
 621 03a5 AF 00 00                		movw	ax, !_data_count
 622 03a8 BD F0                   		movw	r8, ax
 623 03aa 44 27 00                		cmpw	ax, #39 
 624 03ad 71 FF                   		xor1 CY,a.7
 625 03af 61 F3                   		sknh 
 626 03b1 EC C1 03 00             		br	!!.L22
 281:../src/r_main.c **** 						data_count++;
 627                             		.loc 1 281 0
 628 03b5 AF 00 00                		movw	ax, !_data_count
 629 03b8 BD F0                   		movw	r8, ax
 630 03ba A6 F0                   		incw	r8
 631 03bc AD F0                   		movw	ax, r8
 632 03be BF 00 00                		movw	!_data_count, ax
 633                             	.L22:
 282:../src/r_main.c **** 					if(rx_count<40)
 634                             		.loc 1 282 0
 635 03c1 AF 00 00                		movw	ax, !_rx_count
 636 03c4 BD F0                   		movw	r8, ax
 637 03c6 44 27 00                		cmpw	ax, #39 
 638 03c9 71 FF                   		xor1 CY,a.7
 639 03cb 61 F3                   		sknh 
 640 03cd EC E1 03 00             		br	!!.L23
 283:../src/r_main.c **** 						rx_count++;
 641                             		.loc 1 283 0
 642 03d1 AF 00 00                		movw	ax, !_rx_count
 643 03d4 BD F0                   		movw	r8, ax
 644 03d6 A6 F0                   		incw	r8
 645 03d8 AD F0                   		movw	ax, r8
 646 03da BF 00 00                		movw	!_rx_count, ax
 284:../src/r_main.c **** 
 285:../src/r_main.c **** 					break;
 647                             		.loc 1 285 0
 648 03dd EC 7C 04 00             		br	!!.L18
 649                             	.L23:
 650 03e1 EC 7C 04 00             		br	!!.L18
 651                             	.L19:
 286:../src/r_main.c **** 
 287:../src/r_main.c **** 				case 0x81 :
 288:../src/r_main.c **** 					//Test&Monitor
 289:../src/r_main.c **** 					R_TAU0_Channel3_Stop();
 652                             		.loc 1 289 0
 653 03e5 FC 00 00 00             		call	!!%code(_R_TAU0_Channel3_Stop)
 290:../src/r_main.c **** 
 291:../src/r_main.c **** 
 292:../src/r_main.c **** 					//BUZZ_SHORT();
 293:../src/r_main.c **** 					buzState = buzzShort;
 654                             		.loc 1 293 0
 655 03e9 30 03 00                		movw	ax, #3
 656 03ec BF 00 00                		movw	!_buzState, ax
 294:../src/r_main.c **** 					Buzzer();
 657                             		.loc 1 294 0
 658 03ef FC 00 00 00             		call	!!%code(_Buzzer)
 295:../src/r_main.c **** 					uart1Status = R_UART1_Send(&uart1RxBuf[rx_count], 1);
 659                             		.loc 1 295 0
 660 03f3 AF 00 00                		movw	ax, !_rx_count
 661 03f6 BD F0                   		movw	r8, ax
 662 03f8 04 00 00                		addw	ax, #_uart1RxBuf
 663 03fb BD F0                   		movw	r8, ax
 664 03fd B8 00                   		movw	[sp], ax
 665 03ff E6                      		onew	ax
 666 0400 B8 02                   		movw	[sp+2], ax
 667 0402 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 668 0406 AD F0                   		movw	ax, r8
 669 0408 BF 00 00                		movw	!_uart1Status, ax
 296:../src/r_main.c **** 					Mode = 'T';
 670                             		.loc 1 296 0
 671 040b CF 00 00 54             		mov	!_Mode, #84
 297:../src/r_main.c **** 					char word[] = {"Test Mode"};
 672                             		.loc 1 297 0
 673 040f 30 54 65                		movw	ax, #25940
 674 0412 B8 28                   		movw	[sp+40], ax
 675 0414 30 73 74                		movw	ax, #29811
 676 0417 B8 2A                   		movw	[sp+42], ax
 677 0419 30 20 4D                		movw	ax, #19744
 678 041c B8 2C                   		movw	[sp+44], ax
 679 041e 30 6F 64                		movw	ax, #25711
 680 0421 B8 2E                   		movw	[sp+46], ax
 681 0423 30 65 00                		movw	ax, #101
 682 0426 B8 30                   		movw	[sp+48], ax
 298:../src/r_main.c **** 					int length = sizeof(word) -1;
 683                             		.loc 1 298 0
 684 0428 30 09 00                		movw	ax, #9
 685 042b B8 34                   		movw	[sp+52], ax
 299:../src/r_main.c **** 					Start(word, length);
 686                             		.loc 1 299 0
 687 042d C9 F0 38 00             		movw	r8, #56
 688 0431 AE F8                   		movw	ax, sp
 689 0433 BD F0                   		movw	r8, ax
 690 0435 04 38 00                		addw	ax, #56
 691 0438 BD F0                   		movw	r8, ax
 692 043a 04 F0 FF                		addw	ax, #-16
 693 043d B8 00                   		movw	[sp], ax
 694 043f A8 34                   		movw	ax, [sp+52]
 695 0441 BD F0                   		movw	r8, ax
 696 0443 B8 02                   		movw	[sp+2], ax
 697 0445 FC 00 00 00             		call	!!%code(_Start)
 300:../src/r_main.c **** 
 301:../src/r_main.c **** 
 302:../src/r_main.c **** 					break;
 698                             		.loc 1 302 0
 699 0449 EC 7C 04 00             		br	!!.L18
 700                             	.L20:
 303:../src/r_main.c **** 
 304:../src/r_main.c **** 				case 0xF4 :
 305:../src/r_main.c **** 
 306:../src/r_main.c **** 					uart1Status = R_UART1_Send(&dataBuf[data_count], 1);
 701                             		.loc 1 306 0
 702 044d AF 00 00                		movw	ax, !_data_count
 703 0450 BD F0                   		movw	r8, ax
 704 0452 04 00 00                		addw	ax, #_dataBuf
 705 0455 BD F0                   		movw	r8, ax
 706 0457 B8 00                   		movw	[sp], ax
 707 0459 E6                      		onew	ax
 708 045a B8 02                   		movw	[sp+2], ax
 709 045c FC 00 00 00             		call	!!%code(_R_UART1_Send)
 710 0460 AD F0                   		movw	ax, r8
 711 0462 BF 00 00                		movw	!_uart1Status, ax
 307:../src/r_main.c **** 					Start(dataBuf,data_count);
 712                             		.loc 1 307 0
 713 0465 AF 00 00                		movw	ax, !_data_count
 714 0468 BD F0                   		movw	r8, ax
 715 046a 30 00 00                		movw	ax, #_dataBuf
 716 046d B8 00                   		movw	[sp], ax
 717 046f AD F0                   		movw	ax, r8
 718 0471 B8 02                   		movw	[sp+2], ax
 719 0473 FC 00 00 00             		call	!!%code(_Start)
 308:../src/r_main.c **** 					data_count =0;
 720                             		.loc 1 308 0
 721 0477 F6                      		clrw	ax
 722 0478 BF 00 00                		movw	!_data_count, ax
 309:../src/r_main.c **** 					break;
 723                             		.loc 1 309 0
 724 047b 00                      		nop
 725                             	.L18:
 726                             	.LBE4:
 310:../src/r_main.c **** 
 311:../src/r_main.c **** 
 312:../src/r_main.c **** 				}
 313:../src/r_main.c **** 
 314:../src/r_main.c **** 			}
 315:../src/r_main.c **** 			flagCheck();
 727                             		.loc 1 315 0
 728 047c FC 00 00 00             		call	!!%code(_flagCheck)
 316:../src/r_main.c **** 			if(Mode == 'T')
 729                             		.loc 1 316 0
 730 0480 8F 00 00                		mov	a, !_Mode
 731 0483 9D F0                   		mov	r8, a
 732 0485 4A F0 54                		cmp	r8, #84 
 733 0488 61 E8                   		skz 
 734 048a EC 52 0B 00             		br	!!.L25
 317:../src/r_main.c **** 			{
 318:../src/r_main.c **** 
 319:../src/r_main.c **** 
 320:../src/r_main.c **** 
 321:../src/r_main.c **** 				switch(last_received)
 735                             		.loc 1 321 0
 736 048e AF 00 00                		movw	ax, !_last_received
 737 0491 BD F0                   		movw	r8, ax
 738 0493 44 F1 00                		cmpw	ax, #241 
 739 0496 61 F8                   		sknz 
 740 0498 EC DA 05 00             		br	!!.L26
 741 049c AD F0                   		movw	ax, r8
 742 049e 44 F1 00                		cmpw	ax, #241 
 743 04a1 71 FF                   		xor1 CY,a.7
 744 04a3 61 F3                   		sknh 
 745 04a5 EC 34 05 00             		br	!!.L27
 746 04a9 AD F0                   		movw	ax, r8
 747 04ab 44 E2 00                		cmpw	ax, #226 
 748 04ae 61 F8                   		sknz 
 749 04b0 EC 31 07 00             		br	!!.L28
 750 04b4 AD F0                   		movw	ax, r8
 751 04b6 44 E2 00                		cmpw	ax, #226 
 752 04b9 71 FF                   		xor1 CY,a.7
 753 04bb 61 F3                   		sknh 
 754 04bd EC 02 05 00             		br	!!.L29
 755 04c1 AD F0                   		movw	ax, r8
 756 04c3 44 80 00                		cmpw	ax, #128 
 757 04c6 61 F8                   		sknz 
 758 04c8 EC 40 06 00             		br	!!.L30
 759 04cc AD F0                   		movw	ax, r8
 760 04ce 44 80 00                		cmpw	ax, #128 
 761 04d1 71 FF                   		xor1 CY,a.7
 762 04d3 61 F3                   		sknh 
 763 04d5 EC E8 04 00             		br	!!.L31
 764 04d9 AD F0                   		movw	ax, r8
 765 04db 44 7F 00                		cmpw	ax, #127 
 766 04de 61 F8                   		sknz 
 767 04e0 EC EA 05 00             		br	!!.L32
 768 04e4 EC 52 0B 00             		br	!!.L25
 769                             	.L31:
 770 04e8 AD F0                   		movw	ax, r8
 771 04ea 44 E0 00                		cmpw	ax, #224 
 772 04ed 61 F8                   		sknz 
 773 04ef EC BB 06 00             		br	!!.L33
 774 04f3 AD F0                   		movw	ax, r8
 775 04f5 44 E1 00                		cmpw	ax, #225 
 776 04f8 61 F8                   		sknz 
 777 04fa EC F6 06 00             		br	!!.L34
 778 04fe EC 52 0B 00             		br	!!.L25
 779                             	.L29:
 780 0502 AD F0                   		movw	ax, r8
 781 0504 44 E4 00                		cmpw	ax, #228 
 782 0507 61 F8                   		sknz 
 783 0509 EC AF 07 00             		br	!!.L35
 784 050d AD F0                   		movw	ax, r8
 785 050f 44 E4 00                		cmpw	ax, #228 
 786 0512 71 FF                   		xor1 CY,a.7
 787 0514 61 D8                   		sknc 
 788 0516 EC 70 07 00             		br	!!.L36
 789 051a AD F0                   		movw	ax, r8
 790 051c 44 E8 00                		cmpw	ax, #232 
 791 051f 61 F8                   		sknz 
 792 0521 EC EA 07 00             		br	!!.L37
 793 0525 AD F0                   		movw	ax, r8
 794 0527 44 F0 00                		cmpw	ax, #240 
 795 052a 61 F8                   		sknz 
 796 052c EC CA 05 00             		br	!!.L38
 797 0530 EC 52 0B 00             		br	!!.L25
 798                             	.L27:
 799 0534 AD F0                   		movw	ax, r8
 800 0536 44 F6 00                		cmpw	ax, #246 
 801 0539 61 F8                   		sknz 
 802 053b EC 37 0A 00             		br	!!.L39
 803 053f AD F0                   		movw	ax, r8
 804 0541 44 F6 00                		cmpw	ax, #246 
 805 0544 71 FF                   		xor1 CY,a.7
 806 0546 61 F3                   		sknh 
 807 0548 EC 7E 05 00             		br	!!.L40
 808 054c AD F0                   		movw	ax, r8
 809 054e 44 F3 00                		cmpw	ax, #243 
 810 0551 61 F8                   		sknz 
 811 0553 EC 3D 09 00             		br	!!.L41
 812 0557 AD F0                   		movw	ax, r8
 813 0559 44 F3 00                		cmpw	ax, #243 
 814 055c 71 FF                   		xor1 CY,a.7
 815 055e 61 D8                   		sknc 
 816 0560 EC 59 08 00             		br	!!.L42
 817 0564 AD F0                   		movw	ax, r8
 818 0566 44 F4 00                		cmpw	ax, #244 
 819 0569 61 F8                   		sknz 
 820 056b EC F9 09 00             		br	!!.L43
 821 056f AD F0                   		movw	ax, r8
 822 0571 44 F5 00                		cmpw	ax, #245 
 823 0574 61 F8                   		sknz 
 824 0576 EC 2B 0A 00             		br	!!.L44
 825 057a EC 52 0B 00             		br	!!.L25
 826                             	.L40:
 827 057e AD F0                   		movw	ax, r8
 828 0580 44 F9 00                		cmpw	ax, #249 
 829 0583 61 F8                   		sknz 
 830 0585 EC EB 0A 00             		br	!!.L45
 831 0589 AD F0                   		movw	ax, r8
 832 058b 44 F9 00                		cmpw	ax, #249 
 833 058e 71 FF                   		xor1 CY,a.7
 834 0590 61 F3                   		sknh 
 835 0592 EC B0 05 00             		br	!!.L46
 836 0596 AD F0                   		movw	ax, r8
 837 0598 44 F7 00                		cmpw	ax, #247 
 838 059b 61 F8                   		sknz 
 839 059d EC A7 0A 00             		br	!!.L47
 840 05a1 AD F0                   		movw	ax, r8
 841 05a3 44 F8 00                		cmpw	ax, #248 
 842 05a6 61 F8                   		sknz 
 843 05a8 EC C9 0A 00             		br	!!.L48
 844 05ac EC 52 0B 00             		br	!!.L25
 845                             	.L46:
 846 05b0 AD F0                   		movw	ax, r8
 847 05b2 44 FE 00                		cmpw	ax, #254 
 848 05b5 61 F8                   		sknz 
 849 05b7 EC 0D 0B 00             		br	!!.L49
 850 05bb AD F0                   		movw	ax, r8
 851 05bd 44 FF 00                		cmpw	ax, #255 
 852 05c0 61 F8                   		sknz 
 853 05c2 EC 2F 0B 00             		br	!!.L50
 854 05c6 EC 52 0B 00             		br	!!.L25
 855                             	.L38:
 856                             	.LBB5:
 322:../src/r_main.c **** 				{
 323:../src/r_main.c **** 				case 0xF0 :
 324:../src/r_main.c **** 
 325:../src/r_main.c **** 					BUZZ_LOOP();
 857                             		.loc 1 325 0
 858 05ca FC 00 00 00             		call	!!%code(_BUZZ_LOOP)
 326:../src/r_main.c **** 					buzState = buzzLong;
 859                             		.loc 1 326 0
 860 05ce E6                      		onew	ax
 861 05cf BF 00 00                		movw	!_buzState, ax
 327:../src/r_main.c **** 					R_TAU0_Channel2_Start();
 862                             		.loc 1 327 0
 863 05d2 FC 00 00 00             		call	!!%code(_R_TAU0_Channel2_Start)
 328:../src/r_main.c **** 
 329:../src/r_main.c **** 					break;
 864                             		.loc 1 329 0
 865 05d6 EC 52 0B 00             		br	!!.L25
 866                             	.L26:
 330:../src/r_main.c **** 
 331:../src/r_main.c **** 				case 0xF1 :
 332:../src/r_main.c **** 
 333:../src/r_main.c **** 					buzState = buzzOff;
 867                             		.loc 1 333 0
 868 05da F6                      		clrw	ax
 869 05db BF 00 00                		movw	!_buzState, ax
 334:../src/r_main.c **** 
 335:../src/r_main.c **** 					buzFlag = 0;
 870                             		.loc 1 335 0
 871 05de F6                      		clrw	ax
 872 05df BF 00 00                		movw	!_buzFlag, ax
 336:../src/r_main.c **** 					R_TAU0_Channel2_Stop();
 873                             		.loc 1 336 0
 874 05e2 FC 00 00 00             		call	!!%code(_R_TAU0_Channel2_Stop)
 337:../src/r_main.c **** 
 338:../src/r_main.c **** 					break;
 875                             		.loc 1 338 0
 876 05e6 EC 52 0B 00             		br	!!.L25
 877                             	.L32:
 339:../src/r_main.c **** 
 340:../src/r_main.c **** 
 341:../src/r_main.c **** 
 342:../src/r_main.c **** 
 343:../src/r_main.c **** 				case 0x7F :
 344:../src/r_main.c **** 
 345:../src/r_main.c **** 					dataBuf[data_count] = uart1RxBuf[rx_count];
 878                             		.loc 1 345 0
 879 05ea AF 00 00                		movw	ax, !_data_count
 880 05ed BD F0                   		movw	r8, ax
 881 05ef AF 00 00                		movw	ax, !_rx_count
 882 05f2 BD F2                   		movw	r10, ax
 883 05f4 04 00 00                		addw	ax, #_uart1RxBuf
 884 05f7 16                      		movw	hl, ax
 885 05f8 8B                      		mov	a, [hl]
 886 05f9 9D F2                   		mov	r10, a
 887 05fb DA F0                   		movw	bc, r8
 888 05fd 48 00 00                		mov	_dataBuf[bc], a
 346:../src/r_main.c **** 					if(data_count<40)
 889                             		.loc 1 346 0
 890 0600 AF 00 00                		movw	ax, !_data_count
 891 0603 BD F0                   		movw	r8, ax
 892 0605 44 27 00                		cmpw	ax, #39 
 893 0608 71 FF                   		xor1 CY,a.7
 894 060a 61 F3                   		sknh 
 895 060c EC 1C 06 00             		br	!!.L52
 347:../src/r_main.c **** 						data_count++;
 896                             		.loc 1 347 0
 897 0610 AF 00 00                		movw	ax, !_data_count
 898 0613 BD F0                   		movw	r8, ax
 899 0615 A6 F0                   		incw	r8
 900 0617 AD F0                   		movw	ax, r8
 901 0619 BF 00 00                		movw	!_data_count, ax
 902                             	.L52:
 348:../src/r_main.c **** 					if(rx_count<40)
 903                             		.loc 1 348 0
 904 061c AF 00 00                		movw	ax, !_rx_count
 905 061f BD F0                   		movw	r8, ax
 906 0621 44 27 00                		cmpw	ax, #39 
 907 0624 71 FF                   		xor1 CY,a.7
 908 0626 61 F3                   		sknh 
 909 0628 EC 3C 06 00             		br	!!.L53
 349:../src/r_main.c **** 						rx_count++;
 910                             		.loc 1 349 0
 911 062c AF 00 00                		movw	ax, !_rx_count
 912 062f BD F0                   		movw	r8, ax
 913 0631 A6 F0                   		incw	r8
 914 0633 AD F0                   		movw	ax, r8
 915 0635 BF 00 00                		movw	!_rx_count, ax
 350:../src/r_main.c **** 
 351:../src/r_main.c **** 					break;
 916                             		.loc 1 351 0
 917 0638 EC 52 0B 00             		br	!!.L25
 918                             	.L53:
 919 063c EC 52 0B 00             		br	!!.L25
 920                             	.L30:
 352:../src/r_main.c **** 
 353:../src/r_main.c **** 
 354:../src/r_main.c **** 				case 0x80 :
 355:../src/r_main.c **** 					//Normal
 356:../src/r_main.c **** 
 357:../src/r_main.c **** 					uart1Status = R_UART1_Send(&uart1RxBuf[rx_count], 1);
 921                             		.loc 1 357 0
 922 0640 AF 00 00                		movw	ax, !_rx_count
 923 0643 BD F0                   		movw	r8, ax
 924 0645 04 00 00                		addw	ax, #_uart1RxBuf
 925 0648 BD F0                   		movw	r8, ax
 926 064a B8 00                   		movw	[sp], ax
 927 064c E6                      		onew	ax
 928 064d B8 02                   		movw	[sp+2], ax
 929 064f FC 00 00 00             		call	!!%code(_R_UART1_Send)
 930 0653 AD F0                   		movw	ax, r8
 931 0655 BF 00 00                		movw	!_uart1Status, ax
 358:../src/r_main.c **** 					Mode = 'N';
 932                             		.loc 1 358 0
 933 0658 CF 00 00 4E             		mov	!_Mode, #78
 359:../src/r_main.c **** 					char word[] = {"Normal Mode"};
 934                             		.loc 1 359 0
 935 065c 30 4E 6F                		movw	ax, #28494
 936 065f B8 1C                   		movw	[sp+28], ax
 937 0661 30 72 6D                		movw	ax, #28018
 938 0664 B8 1E                   		movw	[sp+30], ax
 939 0666 30 61 6C                		movw	ax, #27745
 940 0669 B8 20                   		movw	[sp+32], ax
 941 066b 30 20 4D                		movw	ax, #19744
 942 066e B8 22                   		movw	[sp+34], ax
 943 0670 30 6F 64                		movw	ax, #25711
 944 0673 B8 24                   		movw	[sp+36], ax
 945 0675 30 65 00                		movw	ax, #101
 946 0678 B8 26                   		movw	[sp+38], ax
 360:../src/r_main.c **** 					int length = sizeof(word) -1;
 947                             		.loc 1 360 0
 948 067a 30 0B 00                		movw	ax, #11
 949 067d B8 32                   		movw	[sp+50], ax
 361:../src/r_main.c **** 					Start(word, length);
 950                             		.loc 1 361 0
 951 067f C9 F2 38 00             		movw	r10, #56
 952 0683 AE F8                   		movw	ax, sp
 953 0685 BD F2                   		movw	r10, ax
 954 0687 04 38 00                		addw	ax, #56
 955 068a BD F2                   		movw	r10, ax
 956 068c 04 E4 FF                		addw	ax, #-28
 957 068f B8 00                   		movw	[sp], ax
 958 0691 A8 32                   		movw	ax, [sp+50]
 959 0693 BD F0                   		movw	r8, ax
 960 0695 B8 02                   		movw	[sp+2], ax
 961 0697 FC 00 00 00             		call	!!%code(_Start)
 362:../src/r_main.c **** 					R_TAU0_Channel3_Start();
 962                             		.loc 1 362 0
 963 069b FC 00 00 00             		call	!!%code(_R_TAU0_Channel3_Start)
 363:../src/r_main.c **** 					cycleTimer = 0;
 964                             		.loc 1 363 0
 965 069f F6                      		clrw	ax
 966 06a0 BF 00 00                		movw	!_cycleTimer, ax
 364:../src/r_main.c **** 					cycleMode = 0;
 967                             		.loc 1 364 0
 968 06a3 F6                      		clrw	ax
 969 06a4 BF 00 00                		movw	!_cycleMode, ax
 365:../src/r_main.c **** 					oneFlag = 0;
 970                             		.loc 1 365 0
 971 06a7 F6                      		clrw	ax
 972 06a8 BF 00 00                		movw	!_oneFlag, ax
 366:../src/r_main.c **** 					twoFlag = 0;
 973                             		.loc 1 366 0
 974 06ab F6                      		clrw	ax
 975 06ac BF 00 00                		movw	!_twoFlag, ax
 367:../src/r_main.c **** 					welcomeFlag = 0;
 976                             		.loc 1 367 0
 977 06af F6                      		clrw	ax
 978 06b0 BF 00 00                		movw	!_welcomeFlag, ax
 368:../src/r_main.c **** 
 369:../src/r_main.c **** 					rx_count = 0;
 979                             		.loc 1 369 0
 980 06b3 F6                      		clrw	ax
 981 06b4 BF 00 00                		movw	!_rx_count, ax
 370:../src/r_main.c **** 					break;
 982                             		.loc 1 370 0
 983 06b7 EC 52 0B 00             		br	!!.L25
 984                             	.L33:
 371:../src/r_main.c **** 
 372:../src/r_main.c **** 					//high temp
 373:../src/r_main.c **** 				case 0xE0 :
 374:../src/r_main.c **** 					uart1TxBuf[0] = uart1RxBuf[rx_count];
 985                             		.loc 1 374 0
 986 06bb AF 00 00                		movw	ax, !_rx_count
 987 06be BD F0                   		movw	r8, ax
 988 06c0 04 00 00                		addw	ax, #_uart1RxBuf
 989 06c3 16                      		movw	hl, ax
 990 06c4 8B                      		mov	a, [hl]
 991 06c5 9D F0                   		mov	r8, a
 992 06c7 9F 00 00                		mov	!_uart1TxBuf, a
 375:../src/r_main.c **** 					uart1Status = R_UART1_Send(uart1TxBuf, 1);
 993                             		.loc 1 375 0
 994 06ca 30 00 00                		movw	ax, #_uart1TxBuf
 995 06cd B8 00                   		movw	[sp], ax
 996 06cf E6                      		onew	ax
 997 06d0 B8 02                   		movw	[sp+2], ax
 998 06d2 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 999 06d6 AD F0                   		movw	ax, r8
 1000 06d8 BF 00 00                		movw	!_uart1Status, ax
 376:../src/r_main.c **** 
 377:../src/r_main.c **** 					alarmConditionTemp = uart1RxBuf[rx_count-1];
 1001                             		.loc 1 377 0
 1002 06db AF 00 00                		movw	ax, !_rx_count
 1003 06de BD F0                   		movw	r8, ax
 1004 06e0 B6 F0                   		decw	r8
 1005 06e2 AD F0                   		movw	ax, r8
 1006 06e4 04 00 00                		addw	ax, #_uart1RxBuf
 1007 06e7 16                      		movw	hl, ax
 1008 06e8 8B                      		mov	a, [hl]
 1009 06e9 9D F0                   		mov	r8, a
 1010 06eb 9F 00 00                		mov	!_alarmConditionTemp, a
 378:../src/r_main.c **** 
 379:../src/r_main.c **** 					rx_count = 0;
 1011                             		.loc 1 379 0
 1012 06ee F6                      		clrw	ax
 1013 06ef BF 00 00                		movw	!_rx_count, ax
 380:../src/r_main.c **** 					break;
 1014                             		.loc 1 380 0
 1015 06f2 EC 52 0B 00             		br	!!.L25
 1016                             	.L34:
 381:../src/r_main.c **** 
 382:../src/r_main.c **** 					//low temp
 383:../src/r_main.c **** 				case 0xE1 :
 384:../src/r_main.c **** 					uart1TxBuf[0] = uart1RxBuf[rx_count];
 1017                             		.loc 1 384 0
 1018 06f6 AF 00 00                		movw	ax, !_rx_count
 1019 06f9 BD F0                   		movw	r8, ax
 1020 06fb 04 00 00                		addw	ax, #_uart1RxBuf
 1021 06fe 16                      		movw	hl, ax
 1022 06ff 8B                      		mov	a, [hl]
 1023 0700 9D F0                   		mov	r8, a
 1024 0702 9F 00 00                		mov	!_uart1TxBuf, a
 385:../src/r_main.c **** 					uart1Status = R_UART1_Send(uart1TxBuf, 1);
 1025                             		.loc 1 385 0
 1026 0705 30 00 00                		movw	ax, #_uart1TxBuf
 1027 0708 B8 00                   		movw	[sp], ax
 1028 070a E6                      		onew	ax
 1029 070b B8 02                   		movw	[sp+2], ax
 1030 070d FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1031 0711 AD F0                   		movw	ax, r8
 1032 0713 BF 00 00                		movw	!_uart1Status, ax
 386:../src/r_main.c **** 
 387:../src/r_main.c **** 					alarmConditionLowTemp = uart1RxBuf[rx_count-1];
 1033                             		.loc 1 387 0
 1034 0716 AF 00 00                		movw	ax, !_rx_count
 1035 0719 BD F0                   		movw	r8, ax
 1036 071b B6 F0                   		decw	r8
 1037 071d AD F0                   		movw	ax, r8
 1038 071f 04 00 00                		addw	ax, #_uart1RxBuf
 1039 0722 16                      		movw	hl, ax
 1040 0723 8B                      		mov	a, [hl]
 1041 0724 9D F0                   		mov	r8, a
 1042 0726 9F 00 00                		mov	!_alarmConditionLowTemp, a
 388:../src/r_main.c **** 
 389:../src/r_main.c **** 
 390:../src/r_main.c **** 					rx_count = 0;
 1043                             		.loc 1 390 0
 1044 0729 F6                      		clrw	ax
 1045 072a BF 00 00                		movw	!_rx_count, ax
 391:../src/r_main.c **** 					break;
 1046                             		.loc 1 391 0
 1047 072d EC 52 0B 00             		br	!!.L25
 1048                             	.L28:
 392:../src/r_main.c **** 					//high Humidity
 393:../src/r_main.c **** 				case 0xE2 :
 394:../src/r_main.c **** 					uart1TxBuf[0] = uart1RxBuf[rx_count];
 1049                             		.loc 1 394 0
 1050 0731 AF 00 00                		movw	ax, !_rx_count
 1051 0734 BD F0                   		movw	r8, ax
 1052 0736 04 00 00                		addw	ax, #_uart1RxBuf
 1053 0739 16                      		movw	hl, ax
 1054 073a 8B                      		mov	a, [hl]
 1055 073b 9D F0                   		mov	r8, a
 1056 073d 9F 00 00                		mov	!_uart1TxBuf, a
 395:../src/r_main.c **** 					uart1Status = R_UART1_Send(uart1TxBuf, 1);
 1057                             		.loc 1 395 0
 1058 0740 30 00 00                		movw	ax, #_uart1TxBuf
 1059 0743 B8 00                   		movw	[sp], ax
 1060 0745 E6                      		onew	ax
 1061 0746 B8 02                   		movw	[sp+2], ax
 1062 0748 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1063 074c AD F0                   		movw	ax, r8
 1064 074e BF 00 00                		movw	!_uart1Status, ax
 396:../src/r_main.c **** 
 397:../src/r_main.c **** 					alarmConditionHumidity = uart1RxBuf[rx_count-1] + 80;
 1065                             		.loc 1 397 0
 1066 0751 AF 00 00                		movw	ax, !_rx_count
 1067 0754 BD F0                   		movw	r8, ax
 1068 0756 B6 F0                   		decw	r8
 1069 0758 AD F0                   		movw	ax, r8
 1070 075a 04 00 00                		addw	ax, #_uart1RxBuf
 1071 075d 16                      		movw	hl, ax
 1072 075e 8B                      		mov	a, [hl]
 1073 075f 9D F0                   		mov	r8, a
 1074 0761 0C 50                   		add	a, #80
 1075 0763 9D F0                   		mov	r8, a
 1076 0765 9F 00 00                		mov	!_alarmConditionHumidity, a
 398:../src/r_main.c **** 
 399:../src/r_main.c **** 
 400:../src/r_main.c **** 					rx_count = 0;
 1077                             		.loc 1 400 0
 1078 0768 F6                      		clrw	ax
 1079 0769 BF 00 00                		movw	!_rx_count, ax
 401:../src/r_main.c **** 					break;
 1080                             		.loc 1 401 0
 1081 076c EC 52 0B 00             		br	!!.L25
 1082                             	.L36:
 402:../src/r_main.c **** 					//high pressure
 403:../src/r_main.c **** 				case 0xE3 :
 404:../src/r_main.c **** 					uart1TxBuf[0] = uart1RxBuf[rx_count];
 1083                             		.loc 1 404 0
 1084 0770 AF 00 00                		movw	ax, !_rx_count
 1085 0773 BD F0                   		movw	r8, ax
 1086 0775 04 00 00                		addw	ax, #_uart1RxBuf
 1087 0778 16                      		movw	hl, ax
 1088 0779 8B                      		mov	a, [hl]
 1089 077a 9D F0                   		mov	r8, a
 1090 077c 9F 00 00                		mov	!_uart1TxBuf, a
 405:../src/r_main.c **** 					uart1Status = R_UART1_Send(uart1TxBuf, 1);
 1091                             		.loc 1 405 0
 1092 077f 30 00 00                		movw	ax, #_uart1TxBuf
 1093 0782 B8 00                   		movw	[sp], ax
 1094 0784 E6                      		onew	ax
 1095 0785 B8 02                   		movw	[sp+2], ax
 1096 0787 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1097 078b AD F0                   		movw	ax, r8
 1098 078d BF 00 00                		movw	!_uart1Status, ax
 406:../src/r_main.c **** 
 407:../src/r_main.c **** 					alarmConditionPressure = uart1RxBuf[rx_count-1] + 160;
 1099                             		.loc 1 407 0
 1100 0790 AF 00 00                		movw	ax, !_rx_count
 1101 0793 BD F0                   		movw	r8, ax
 1102 0795 B6 F0                   		decw	r8
 1103 0797 AD F0                   		movw	ax, r8
 1104 0799 04 00 00                		addw	ax, #_uart1RxBuf
 1105 079c 16                      		movw	hl, ax
 1106 079d 8B                      		mov	a, [hl]
 1107 079e 9D F0                   		mov	r8, a
 1108 07a0 0C A0                   		add	a, #-96
 1109 07a2 9D F0                   		mov	r8, a
 1110 07a4 9F 00 00                		mov	!_alarmConditionPressure, a
 408:../src/r_main.c **** 
 409:../src/r_main.c **** 
 410:../src/r_main.c **** 					rx_count = 0;
 1111                             		.loc 1 410 0
 1112 07a7 F6                      		clrw	ax
 1113 07a8 BF 00 00                		movw	!_rx_count, ax
 411:../src/r_main.c **** 					break;
 1114                             		.loc 1 411 0
 1115 07ab EC 52 0B 00             		br	!!.L25
 1116                             	.L35:
 412:../src/r_main.c **** 					//high wind/s
 413:../src/r_main.c **** 				case 0xE4 :
 414:../src/r_main.c **** 					uart1TxBuf[0] = uart1RxBuf[rx_count];
 1117                             		.loc 1 414 0
 1118 07af AF 00 00                		movw	ax, !_rx_count
 1119 07b2 BD F0                   		movw	r8, ax
 1120 07b4 04 00 00                		addw	ax, #_uart1RxBuf
 1121 07b7 16                      		movw	hl, ax
 1122 07b8 8B                      		mov	a, [hl]
 1123 07b9 9D F0                   		mov	r8, a
 1124 07bb 9F 00 00                		mov	!_uart1TxBuf, a
 415:../src/r_main.c **** 					uart1Status = R_UART1_Send(uart1TxBuf, 1);
 1125                             		.loc 1 415 0
 1126 07be 30 00 00                		movw	ax, #_uart1TxBuf
 1127 07c1 B8 00                   		movw	[sp], ax
 1128 07c3 E6                      		onew	ax
 1129 07c4 B8 02                   		movw	[sp+2], ax
 1130 07c6 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1131 07ca AD F0                   		movw	ax, r8
 1132 07cc BF 00 00                		movw	!_uart1Status, ax
 416:../src/r_main.c **** 
 417:../src/r_main.c **** 					alarmConditionWind = uart1RxBuf[rx_count-1];
 1133                             		.loc 1 417 0
 1134 07cf AF 00 00                		movw	ax, !_rx_count
 1135 07d2 BD F0                   		movw	r8, ax
 1136 07d4 B6 F0                   		decw	r8
 1137 07d6 AD F0                   		movw	ax, r8
 1138 07d8 04 00 00                		addw	ax, #_uart1RxBuf
 1139 07db 16                      		movw	hl, ax
 1140 07dc 8B                      		mov	a, [hl]
 1141 07dd 9D F0                   		mov	r8, a
 1142 07df 9F 00 00                		mov	!_alarmConditionWind, a
 418:../src/r_main.c **** 
 419:../src/r_main.c **** 
 420:../src/r_main.c **** 					rx_count = 0;
 1143                             		.loc 1 420 0
 1144 07e2 F6                      		clrw	ax
 1145 07e3 BF 00 00                		movw	!_rx_count, ax
 421:../src/r_main.c **** 					break;
 1146                             		.loc 1 421 0
 1147 07e6 EC 52 0B 00             		br	!!.L25
 1148                             	.L37:
 422:../src/r_main.c **** 				case 0xE8 :
 423:../src/r_main.c **** 					uart1TxBuf[0] = uart1RxBuf[rx_count];
 1149                             		.loc 1 423 0
 1150 07ea AF 00 00                		movw	ax, !_rx_count
 1151 07ed BD F0                   		movw	r8, ax
 1152 07ef 04 00 00                		addw	ax, #_uart1RxBuf
 1153 07f2 16                      		movw	hl, ax
 1154 07f3 8B                      		mov	a, [hl]
 1155 07f4 9D F0                   		mov	r8, a
 1156 07f6 9F 00 00                		mov	!_uart1TxBuf, a
 424:../src/r_main.c **** 					uart1Status = R_UART1_Send(uart1TxBuf, 1);
 1157                             		.loc 1 424 0
 1158 07f9 30 00 00                		movw	ax, #_uart1TxBuf
 1159 07fc B8 00                   		movw	[sp], ax
 1160 07fe E6                      		onew	ax
 1161 07ff B8 02                   		movw	[sp+2], ax
 1162 0801 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1163 0805 AD F0                   		movw	ax, r8
 1164 0807 BF 00 00                		movw	!_uart1Status, ax
 425:../src/r_main.c **** 					switch(uart1RxBuf[rx_count-1])
 1165                             		.loc 1 425 0
 1166 080a AF 00 00                		movw	ax, !_rx_count
 1167 080d BD F0                   		movw	r8, ax
 1168 080f B6 F0                   		decw	r8
 1169 0811 AD F0                   		movw	ax, r8
 1170 0813 04 00 00                		addw	ax, #_uart1RxBuf
 1171 0816 16                      		movw	hl, ax
 1172 0817 8B                      		mov	a, [hl]
 1173 0818 9D F0                   		mov	r8, a
 1174 081a CD F1 00                		mov	r9, #0
 1175 081d AD F0                   		movw	ax, r8
 1176 081f 44 01 00                		cmpw	ax, #1 
 1177 0822 61 F8                   		sknz 
 1178 0824 EC 49 08 00             		br	!!.L55
 1179 0828 AD F0                   		movw	ax, r8
 1180 082a 44 02 00                		cmpw	ax, #2 
 1181 082d 61 F8                   		sknz 
 1182 082f EC 50 08 00             		br	!!.L56
 1183 0833 AD F0                   		movw	ax, r8
 1184 0835 44 00 00                		cmpw	ax, #0 
 1185 0838 61 F8                   		sknz 
 1186 083a EC 42 08 00             		br	!!.L57
 426:../src/r_main.c **** 					{
 427:../src/r_main.c **** 					case HALT_DEFAULT :
 428:../src/r_main.c **** 						haltState = HALT_DEFAULT;
 429:../src/r_main.c **** 						break;
 430:../src/r_main.c **** 					case HALT_NO_HALT :
 431:../src/r_main.c **** 						haltState = HALT_NO_HALT;
 432:../src/r_main.c **** 						break;
 433:../src/r_main.c **** 					case HALT_HALT :
 434:../src/r_main.c **** 						haltState = HALT_HALT;
 435:../src/r_main.c **** 						break;
 436:../src/r_main.c **** 
 437:../src/r_main.c **** 					}
 438:../src/r_main.c **** 
 439:../src/r_main.c **** 					break;
 1187                             		.loc 1 439 0
 1188 083e EC 52 0B 00             		br	!!.L25
 1189                             	.L57:
 428:../src/r_main.c **** 						haltState = HALT_DEFAULT;
 1190                             		.loc 1 428 0
 1191 0842 F5 00 00                		clrb	!_haltState
 429:../src/r_main.c **** 						break;
 1192                             		.loc 1 429 0
 1193 0845 EC 55 08 00             		br	!!.L54
 1194                             	.L55:
 431:../src/r_main.c **** 						haltState = HALT_NO_HALT;
 1195                             		.loc 1 431 0
 1196 0849 E5 00 00                		oneb	!_haltState
 432:../src/r_main.c **** 						break;
 1197                             		.loc 1 432 0
 1198 084c EC 55 08 00             		br	!!.L54
 1199                             	.L56:
 434:../src/r_main.c **** 						haltState = HALT_HALT;
 1200                             		.loc 1 434 0
 1201 0850 CF 00 00 02             		mov	!_haltState, #2
 435:../src/r_main.c **** 						break;
 1202                             		.loc 1 435 0
 1203 0854 00                      		nop
 1204                             	.L54:
 1205                             		.loc 1 439 0
 1206 0855 EC 52 0B 00             		br	!!.L25
 1207                             	.L42:
 440:../src/r_main.c **** 
 441:../src/r_main.c **** 					case 0xF2 :
 442:../src/r_main.c **** 						//Set_Clock
 443:../src/r_main.c **** 						uart1TxBuf[0] = uart1RxBuf[rx_count];
 1208                             		.loc 1 443 0
 1209 0859 AF 00 00                		movw	ax, !_rx_count
 1210 085c BD F0                   		movw	r8, ax
 1211 085e 04 00 00                		addw	ax, #_uart1RxBuf
 1212 0861 16                      		movw	hl, ax
 1213 0862 8B                      		mov	a, [hl]
 1214 0863 9D F0                   		mov	r8, a
 1215 0865 9F 00 00                		mov	!_uart1TxBuf, a
 444:../src/r_main.c **** 						uart1Status = R_UART1_Send(uart1TxBuf, 1);
 1216                             		.loc 1 444 0
 1217 0868 30 00 00                		movw	ax, #_uart1TxBuf
 1218 086b B8 00                   		movw	[sp], ax
 1219 086d E6                      		onew	ax
 1220 086e B8 02                   		movw	[sp+2], ax
 1221 0870 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1222 0874 AD F0                   		movw	ax, r8
 1223 0876 BF 00 00                		movw	!_uart1Status, ax
 445:../src/r_main.c **** 
 446:../src/r_main.c **** 						my_time.sec = Dec_to_BCD(uart1RxBuf[4]);
 1224                             		.loc 1 446 0
 1225 0879 8F 00 00                		mov	a, !_uart1RxBuf+4
 1226 087c 9D F0                   		mov	r8, a
 1227 087e CD F1 00                		mov	r9, #0
 1228 0881 AD F0                   		movw	ax, r8
 1229 0883 B8 00                   		movw	[sp], ax
 1230 0885 FC 00 00 00             		call	!!%code(_Dec_to_BCD)
 1231 0889 8D F0                   		mov	a, r8
 1232 088b 9F 00 00                		mov	!_my_time, a
 447:../src/r_main.c **** 						my_time.min = Dec_to_BCD(uart1RxBuf[3]);
 1233                             		.loc 1 447 0
 1234 088e 8F 00 00                		mov	a, !_uart1RxBuf+3
 1235 0891 9D F0                   		mov	r8, a
 1236 0893 CD F1 00                		mov	r9, #0
 1237 0896 AD F0                   		movw	ax, r8
 1238 0898 B8 00                   		movw	[sp], ax
 1239 089a FC 00 00 00             		call	!!%code(_Dec_to_BCD)
 1240 089e 8D F0                   		mov	a, r8
 1241 08a0 9F 00 00                		mov	!_my_time+1, a
 448:../src/r_main.c **** 						my_time.hour = Dec_to_BCD(uart1RxBuf[2]);
 1242                             		.loc 1 448 0
 1243 08a3 8F 00 00                		mov	a, !_uart1RxBuf+2
 1244 08a6 9D F0                   		mov	r8, a
 1245 08a8 CD F1 00                		mov	r9, #0
 1246 08ab AD F0                   		movw	ax, r8
 1247 08ad B8 00                   		movw	[sp], ax
 1248 08af FC 00 00 00             		call	!!%code(_Dec_to_BCD)
 1249 08b3 8D F0                   		mov	a, r8
 1250 08b5 9F 00 00                		mov	!_my_time+2, a
 449:../src/r_main.c **** 						my_time.day = Dec_to_BCD(uart1RxBuf[1]);
 1251                             		.loc 1 449 0
 1252 08b8 8F 00 00                		mov	a, !_uart1RxBuf+1
 1253 08bb 9D F0                   		mov	r8, a
 1254 08bd CD F1 00                		mov	r9, #0
 1255 08c0 AD F0                   		movw	ax, r8
 1256 08c2 B8 00                   		movw	[sp], ax
 1257 08c4 FC 00 00 00             		call	!!%code(_Dec_to_BCD)
 1258 08c8 8D F0                   		mov	a, r8
 1259 08ca 9F 00 00                		mov	!_my_time+3, a
 450:../src/r_main.c **** 						my_time.month = Dec_to_BCD(uart1RxBuf[0]);
 1260                             		.loc 1 450 0
 1261 08cd 8F 00 00                		mov	a, !_uart1RxBuf
 1262 08d0 9D F0                   		mov	r8, a
 1263 08d2 CD F1 00                		mov	r9, #0
 1264 08d5 AD F0                   		movw	ax, r8
 1265 08d7 B8 00                   		movw	[sp], ax
 1266 08d9 FC 00 00 00             		call	!!%code(_Dec_to_BCD)
 1267 08dd 8D F0                   		mov	a, r8
 1268 08df 9F 00 00                		mov	!_my_time+5, a
 1269                             	.L58:
 451:../src/r_main.c **** 
 452:../src/r_main.c **** 						do{
 453:../src/r_main.c **** 							rtcStatus = R_RTC_Set_CounterValue(my_time); // Update the RTC
 1270                             		.loc 1 453 0 discriminator 1
 1271 08e2 8F 00 00                		mov	a, !_my_time
 1272 08e5 9D F0                   		mov	r8, a
 1273 08e7 98 00                   		mov	[sp], a
 1274 08e9 8F 00 00                		mov	a, !_my_time+1
 1275 08ec 9D F0                   		mov	r8, a
 1276 08ee 98 01                   		mov	[sp+1], a
 1277 08f0 8F 00 00                		mov	a, !_my_time+2
 1278 08f3 9D F0                   		mov	r8, a
 1279 08f5 98 02                   		mov	[sp+2], a
 1280 08f7 8F 00 00                		mov	a, !_my_time+3
 1281 08fa 9D F0                   		mov	r8, a
 1282 08fc 98 03                   		mov	[sp+3], a
 1283 08fe 8F 00 00                		mov	a, !_my_time+4
 1284 0901 9D F0                   		mov	r8, a
 1285 0903 98 04                   		mov	[sp+4], a
 1286 0905 8F 00 00                		mov	a, !_my_time+5
 1287 0908 9D F0                   		mov	r8, a
 1288 090a 98 05                   		mov	[sp+5], a
 1289 090c 8F 00 00                		mov	a, !_my_time+6
 1290 090f 9D F0                   		mov	r8, a
 1291 0911 98 06                   		mov	[sp+6], a
 1292 0913 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 1293 0917 AD F0                   		movw	ax, r8
 1294 0919 BF 00 00                		movw	!_rtcStatus, ax
 454:../src/r_main.c **** 
 455:../src/r_main.c **** 						} while(rtcStatus != MD_OK);
 1295                             		.loc 1 455 0 discriminator 1
 1296 091c BD F0                   		movw	r8, ax
 1297 091e 44 00 00                		cmpw	ax, #0 
 1298 0921 61 E8                   		skz 
 1299 0923 EC E2 08 00             		br	!!.L58
 456:../src/r_main.c **** 
 457:../src/r_main.c **** 
 458:../src/r_main.c **** 						rx_count = 0;
 1300                             		.loc 1 458 0
 1301 0927 F6                      		clrw	ax
 1302 0928 BF 00 00                		movw	!_rx_count, ax
 459:../src/r_main.c **** 						Start(clockSet,sizeof(clockSet)-1);
 1303                             		.loc 1 459 0
 1304 092b 30 00 00                		movw	ax, #_clockSet
 1305 092e B8 00                   		movw	[sp], ax
 1306 0930 30 09 00                		movw	ax, #9
 1307 0933 B8 02                   		movw	[sp+2], ax
 1308 0935 FC 00 00 00             		call	!!%code(_Start)
 460:../src/r_main.c **** 						break;
 1309                             		.loc 1 460 0
 1310 0939 EC 52 0B 00             		br	!!.L25
 1311                             	.L41:
 461:../src/r_main.c **** 
 462:../src/r_main.c **** 					case 0xF3 :
 463:../src/r_main.c **** 						//Receive_Date/Time
 464:../src/r_main.c **** 						uart1TxBuf[0] = uart1RxBuf[rx_count];
 1312                             		.loc 1 464 0
 1313 093d AF 00 00                		movw	ax, !_rx_count
 1314 0940 BD F0                   		movw	r8, ax
 1315 0942 04 00 00                		addw	ax, #_uart1RxBuf
 1316 0945 16                      		movw	hl, ax
 1317 0946 8B                      		mov	a, [hl]
 1318 0947 9D F0                   		mov	r8, a
 1319 0949 9F 00 00                		mov	!_uart1TxBuf, a
 1320                             	.L59:
 465:../src/r_main.c **** 
 466:../src/r_main.c **** 						do{
 467:../src/r_main.c **** 							rtcStatus = R_RTC_Get_CounterValue(my_time_point); // Update the RTC
 1321                             		.loc 1 467 0 discriminator 1
 1322 094c AF 00 00                		movw	ax, !_my_time_point
 1323 094f BD F0                   		movw	r8, ax
 1324 0951 B8 00                   		movw	[sp], ax
 1325 0953 FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 1326 0957 AD F0                   		movw	ax, r8
 1327 0959 BF 00 00                		movw	!_rtcStatus, ax
 468:../src/r_main.c **** 
 469:../src/r_main.c **** 						} while(rtcStatus != MD_OK);
 1328                             		.loc 1 469 0 discriminator 1
 1329 095c BD F0                   		movw	r8, ax
 1330 095e 44 00 00                		cmpw	ax, #0 
 1331 0961 61 E8                   		skz 
 1332 0963 EC 4C 09 00             		br	!!.L59
 470:../src/r_main.c **** 
 471:../src/r_main.c **** 						uart1TxBuf[5] = BCD_to_Dec(my_time.sec);
 1333                             		.loc 1 471 0
 1334 0967 8F 00 00                		mov	a, !_my_time
 1335 096a 9D F0                   		mov	r8, a
 1336 096c CD F1 00                		mov	r9, #0
 1337 096f AD F0                   		movw	ax, r8
 1338 0971 B8 00                   		movw	[sp], ax
 1339 0973 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 1340 0977 8D F0                   		mov	a, r8
 1341 0979 9F 00 00                		mov	!_uart1TxBuf+5, a
 472:../src/r_main.c **** 						uart1TxBuf[4] = BCD_to_Dec(my_time.min);
 1342                             		.loc 1 472 0
 1343 097c 8F 00 00                		mov	a, !_my_time+1
 1344 097f 9D F0                   		mov	r8, a
 1345 0981 CD F1 00                		mov	r9, #0
 1346 0984 AD F0                   		movw	ax, r8
 1347 0986 B8 00                   		movw	[sp], ax
 1348 0988 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 1349 098c 8D F0                   		mov	a, r8
 1350 098e 9F 00 00                		mov	!_uart1TxBuf+4, a
 473:../src/r_main.c **** 						uart1TxBuf[3] = BCD_to_Dec(my_time.hour);
 1351                             		.loc 1 473 0
 1352 0991 8F 00 00                		mov	a, !_my_time+2
 1353 0994 9D F0                   		mov	r8, a
 1354 0996 CD F1 00                		mov	r9, #0
 1355 0999 AD F0                   		movw	ax, r8
 1356 099b B8 00                   		movw	[sp], ax
 1357 099d FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 1358 09a1 8D F0                   		mov	a, r8
 1359 09a3 9F 00 00                		mov	!_uart1TxBuf+3, a
 474:../src/r_main.c **** 						uart1TxBuf[2] = BCD_to_Dec(my_time.day);
 1360                             		.loc 1 474 0
 1361 09a6 8F 00 00                		mov	a, !_my_time+3
 1362 09a9 9D F0                   		mov	r8, a
 1363 09ab CD F1 00                		mov	r9, #0
 1364 09ae AD F0                   		movw	ax, r8
 1365 09b0 B8 00                   		movw	[sp], ax
 1366 09b2 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 1367 09b6 8D F0                   		mov	a, r8
 1368 09b8 9F 00 00                		mov	!_uart1TxBuf+2, a
 475:../src/r_main.c **** 						uart1TxBuf[1] = BCD_to_Dec(my_time.month);
 1369                             		.loc 1 475 0
 1370 09bb 8F 00 00                		mov	a, !_my_time+5
 1371 09be 9D F0                   		mov	r8, a
 1372 09c0 CD F1 00                		mov	r9, #0
 1373 09c3 AD F0                   		movw	ax, r8
 1374 09c5 B8 00                   		movw	[sp], ax
 1375 09c7 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 1376 09cb 8D F0                   		mov	a, r8
 1377 09cd 9F 00 00                		mov	!_uart1TxBuf+1, a
 476:../src/r_main.c **** 
 477:../src/r_main.c **** 						uart1Status = R_UART1_Send(uart1TxBuf,6);
 1378                             		.loc 1 477 0
 1379 09d0 30 00 00                		movw	ax, #_uart1TxBuf
 1380 09d3 B8 00                   		movw	[sp], ax
 1381 09d5 30 06 00                		movw	ax, #6
 1382 09d8 B8 02                   		movw	[sp+2], ax
 1383 09da FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1384 09de AD F0                   		movw	ax, r8
 1385 09e0 BF 00 00                		movw	!_uart1Status, ax
 478:../src/r_main.c **** 						Start(clockGet,sizeof(clockGet)-1);
 1386                             		.loc 1 478 0
 1387 09e3 30 00 00                		movw	ax, #_clockGet
 1388 09e6 B8 00                   		movw	[sp], ax
 1389 09e8 30 09 00                		movw	ax, #9
 1390 09eb B8 02                   		movw	[sp+2], ax
 1391 09ed FC 00 00 00             		call	!!%code(_Start)
 479:../src/r_main.c **** 
 480:../src/r_main.c **** 						rx_count = 0;
 1392                             		.loc 1 480 0
 1393 09f1 F6                      		clrw	ax
 1394 09f2 BF 00 00                		movw	!_rx_count, ax
 481:../src/r_main.c **** 						break;
 1395                             		.loc 1 481 0
 1396 09f5 EC 52 0B 00             		br	!!.L25
 1397                             	.L43:
 482:../src/r_main.c **** 
 483:../src/r_main.c **** 					case 0xF4 :
 484:../src/r_main.c **** 
 485:../src/r_main.c **** 						uart1Status = R_UART1_Send(&dataBuf[data_count], 1);
 1398                             		.loc 1 485 0
 1399 09f9 AF 00 00                		movw	ax, !_data_count
 1400 09fc BD F0                   		movw	r8, ax
 1401 09fe 04 00 00                		addw	ax, #_dataBuf
 1402 0a01 BD F0                   		movw	r8, ax
 1403 0a03 B8 00                   		movw	[sp], ax
 1404 0a05 E6                      		onew	ax
 1405 0a06 B8 02                   		movw	[sp+2], ax
 1406 0a08 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1407 0a0c AD F0                   		movw	ax, r8
 1408 0a0e BF 00 00                		movw	!_uart1Status, ax
 486:../src/r_main.c **** 						Start(dataBuf,data_count);
 1409                             		.loc 1 486 0
 1410 0a11 AF 00 00                		movw	ax, !_data_count
 1411 0a14 BD F0                   		movw	r8, ax
 1412 0a16 30 00 00                		movw	ax, #_dataBuf
 1413 0a19 B8 00                   		movw	[sp], ax
 1414 0a1b AD F0                   		movw	ax, r8
 1415 0a1d B8 02                   		movw	[sp+2], ax
 1416 0a1f FC 00 00 00             		call	!!%code(_Start)
 487:../src/r_main.c **** 						data_count =0;
 1417                             		.loc 1 487 0
 1418 0a23 F6                      		clrw	ax
 1419 0a24 BF 00 00                		movw	!_data_count, ax
 488:../src/r_main.c **** 						break;
 1420                             		.loc 1 488 0
 1421 0a27 EC 52 0B 00             		br	!!.L25
 1422                             	.L44:
 489:../src/r_main.c **** 
 490:../src/r_main.c **** 					case 0xF5 :
 491:../src/r_main.c **** 						alarmCount = 0;
 1423                             		.loc 1 491 0
 1424 0a2b F6                      		clrw	ax
 1425 0a2c BF 00 00                		movw	!_alarmCount, ax
 492:../src/r_main.c **** 						alarmCurrent = 0;
 1426                             		.loc 1 492 0
 1427 0a2f F6                      		clrw	ax
 1428 0a30 BF 00 00                		movw	!_alarmCurrent, ax
 493:../src/r_main.c **** 						break;
 1429                             		.loc 1 493 0
 1430 0a33 EC 52 0B 00             		br	!!.L25
 1431                             	.L39:
 494:../src/r_main.c **** 
 495:../src/r_main.c **** 					case 0xF6 :
 496:../src/r_main.c **** 
 497:../src/r_main.c **** 						IIC_Buf[0] = 0xF6;
 1432                             		.loc 1 497 0
 1433 0a37 CF 00 00 F6             		mov	!_IIC_Buf, #-10
 498:../src/r_main.c **** 						memcpy((IIC_Buf+1),alarmsArr,7*alarmCount);
 1434                             		.loc 1 498 0
 1435 0a3b AF 00 00                		movw	ax, !_alarmCount
 1436 0a3e BD F0                   		movw	r8, ax
 1437 0a40 B8 1A                   		movw	[sp+26], ax
 1438 0a42 BD F2                   		movw	r10, ax
 1439 0a44 B8 0E                   		movw	[sp+14], ax
 1440 0a46 31 3D                   		shlw	ax, 3
 1441 0a48 B8 0C                   		movw	[sp+12], ax
 1442 0a4a BD F0                   		movw	r8, ax
 1443 0a4c B8 0E                   		movw	[sp+14], ax
 1444 0a4e A8 1A                   		movw	ax, [sp+26]
 1445 0a50 16                      		movw	hl, ax
 1446 0a51 A8 0E                   		movw	ax, [sp+14]
 1447 0a53 27                      		subw	ax, hl
 1448 0a54 B8 18                   		movw	[sp+24], ax
 1449 0a56 BD F2                   		movw	r10, ax
 1450 0a58 B8 16                   		movw	[sp+22], ax
 1451 0a5a 30 00 00                		movw	ax, #_IIC_Buf+1
 1452 0a5d B8 00                   		movw	[sp], ax
 1453 0a5f 30 00 00                		movw	ax, #_alarmsArr
 1454 0a62 B8 02                   		movw	[sp+2], ax
 1455 0a64 A8 16                   		movw	ax, [sp+22]
 1456 0a66 BD F0                   		movw	r8, ax
 1457 0a68 B8 04                   		movw	[sp+4], ax
 1458 0a6a FC 00 00 00             		call	!!%code(_memcpy)
 499:../src/r_main.c **** 
 500:../src/r_main.c **** 						R_UART1_Send(IIC_Buf, (1+7*alarmCount));
 1459                             		.loc 1 500 0
 1460 0a6e AF 00 00                		movw	ax, !_alarmCount
 1461 0a71 BD F2                   		movw	r10, ax
 1462 0a73 B8 14                   		movw	[sp+20], ax
 1463 0a75 BD F0                   		movw	r8, ax
 1464 0a77 B8 0A                   		movw	[sp+10], ax
 1465 0a79 31 3D                   		shlw	ax, 3
 1466 0a7b B8 08                   		movw	[sp+8], ax
 1467 0a7d BD F2                   		movw	r10, ax
 1468 0a7f B8 0A                   		movw	[sp+10], ax
 1469 0a81 A8 14                   		movw	ax, [sp+20]
 1470 0a83 16                      		movw	hl, ax
 1471 0a84 A8 0A                   		movw	ax, [sp+10]
 1472 0a86 27                      		subw	ax, hl
 1473 0a87 BD F0                   		movw	r8, ax
 1474 0a89 A1                      		incw	ax
 1475 0a8a B8 12                   		movw	[sp+18], ax
 1476 0a8c BD F0                   		movw	r8, ax
 1477 0a8e B8 10                   		movw	[sp+16], ax
 1478 0a90 30 00 00                		movw	ax, #_IIC_Buf
 1479 0a93 B8 00                   		movw	[sp], ax
 1480 0a95 A8 10                   		movw	ax, [sp+16]
 1481 0a97 BD F2                   		movw	r10, ax
 1482 0a99 B8 02                   		movw	[sp+2], ax
 1483 0a9b FC 00 00 00             		call	!!%code(_R_UART1_Send)
 501:../src/r_main.c **** 
 502:../src/r_main.c **** 
 503:../src/r_main.c **** 						rx_count = 0;
 1484                             		.loc 1 503 0
 1485 0a9f F6                      		clrw	ax
 1486 0aa0 BF 00 00                		movw	!_rx_count, ax
 504:../src/r_main.c **** 						break;
 1487                             		.loc 1 504 0
 1488 0aa3 EC 52 0B 00             		br	!!.L25
 1489                             	.L47:
 505:../src/r_main.c **** 
 506:../src/r_main.c **** 					case 0xF7 :
 507:../src/r_main.c **** 
 508:../src/r_main.c **** 						//Read Temperature Sample
 509:../src/r_main.c **** 						IIC_Buf[1] = Temperature;
 1490                             		.loc 1 509 0
 1491 0aa7 8F 00 00                		mov	a, !_Temperature
 1492 0aaa 9D F0                   		mov	r8, a
 1493 0aac 9F 00 00                		mov	!_IIC_Buf+1, a
 510:../src/r_main.c **** 						IIC_Buf[0] = 0xF7;
 1494                             		.loc 1 510 0
 1495 0aaf CF 00 00 F7             		mov	!_IIC_Buf, #-9
 511:../src/r_main.c **** 						R_UART1_Send(IIC_Buf, 2);
 1496                             		.loc 1 511 0
 1497 0ab3 30 00 00                		movw	ax, #_IIC_Buf
 1498 0ab6 B8 00                   		movw	[sp], ax
 1499 0ab8 30 02 00                		movw	ax, #2
 1500 0abb B8 02                   		movw	[sp+2], ax
 1501 0abd FC 00 00 00             		call	!!%code(_R_UART1_Send)
 512:../src/r_main.c **** 
 513:../src/r_main.c **** 
 514:../src/r_main.c **** 						rx_count = 0;
 1502                             		.loc 1 514 0
 1503 0ac1 F6                      		clrw	ax
 1504 0ac2 BF 00 00                		movw	!_rx_count, ax
 515:../src/r_main.c **** 						break;
 1505                             		.loc 1 515 0
 1506 0ac5 EC 52 0B 00             		br	!!.L25
 1507                             	.L48:
 516:../src/r_main.c **** 
 517:../src/r_main.c **** 					case 0xF8 :
 518:../src/r_main.c **** 
 519:../src/r_main.c **** 						IIC_Buf[1] = Humidity;
 1508                             		.loc 1 519 0
 1509 0ac9 8F 00 00                		mov	a, !_Humidity
 1510 0acc 9D F0                   		mov	r8, a
 1511 0ace 9F 00 00                		mov	!_IIC_Buf+1, a
 520:../src/r_main.c **** 						IIC_Buf[0] = 0xF8;
 1512                             		.loc 1 520 0
 1513 0ad1 CF 00 00 F8             		mov	!_IIC_Buf, #-8
 521:../src/r_main.c **** 						R_UART1_Send(IIC_Buf, 2);
 1514                             		.loc 1 521 0
 1515 0ad5 30 00 00                		movw	ax, #_IIC_Buf
 1516 0ad8 B8 00                   		movw	[sp], ax
 1517 0ada 30 02 00                		movw	ax, #2
 1518 0add B8 02                   		movw	[sp+2], ax
 1519 0adf FC 00 00 00             		call	!!%code(_R_UART1_Send)
 522:../src/r_main.c **** 
 523:../src/r_main.c **** 
 524:../src/r_main.c **** 						rx_count = 0;
 1520                             		.loc 1 524 0
 1521 0ae3 F6                      		clrw	ax
 1522 0ae4 BF 00 00                		movw	!_rx_count, ax
 525:../src/r_main.c **** 						break;
 1523                             		.loc 1 525 0
 1524 0ae7 EC 52 0B 00             		br	!!.L25
 1525                             	.L45:
 526:../src/r_main.c **** 
 527:../src/r_main.c **** 
 528:../src/r_main.c **** 					case 0xF9 :
 529:../src/r_main.c **** 						IIC_Buf[1] = Pressure;
 1526                             		.loc 1 529 0
 1527 0aeb 8F 00 00                		mov	a, !_Pressure
 1528 0aee 9D F0                   		mov	r8, a
 1529 0af0 9F 00 00                		mov	!_IIC_Buf+1, a
 530:../src/r_main.c **** 						IIC_Buf[0] = 0xF9;
 1530                             		.loc 1 530 0
 1531 0af3 CF 00 00 F9             		mov	!_IIC_Buf, #-7
 531:../src/r_main.c **** 						R_UART1_Send(IIC_Buf, 2);
 1532                             		.loc 1 531 0
 1533 0af7 30 00 00                		movw	ax, #_IIC_Buf
 1534 0afa B8 00                   		movw	[sp], ax
 1535 0afc 30 02 00                		movw	ax, #2
 1536 0aff B8 02                   		movw	[sp+2], ax
 1537 0b01 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 532:../src/r_main.c **** 
 533:../src/r_main.c **** 
 534:../src/r_main.c **** 						rx_count = 0;
 1538                             		.loc 1 534 0
 1539 0b05 F6                      		clrw	ax
 1540 0b06 BF 00 00                		movw	!_rx_count, ax
 535:../src/r_main.c **** 						break;
 1541                             		.loc 1 535 0
 1542 0b09 EC 52 0B 00             		br	!!.L25
 1543                             	.L49:
 536:../src/r_main.c **** 
 537:../src/r_main.c **** 					case 0xFE :
 538:../src/r_main.c **** 						IIC_Buf[1] = WindSpeed;
 1544                             		.loc 1 538 0
 1545 0b0d 8F 00 00                		mov	a, !_WindSpeed
 1546 0b10 9D F0                   		mov	r8, a
 1547 0b12 9F 00 00                		mov	!_IIC_Buf+1, a
 539:../src/r_main.c **** 						IIC_Buf[0] = 0xFE;
 1548                             		.loc 1 539 0
 1549 0b15 CF 00 00 FE             		mov	!_IIC_Buf, #-2
 540:../src/r_main.c **** 						R_UART1_Send(IIC_Buf, 2);
 1550                             		.loc 1 540 0
 1551 0b19 30 00 00                		movw	ax, #_IIC_Buf
 1552 0b1c B8 00                   		movw	[sp], ax
 1553 0b1e 30 02 00                		movw	ax, #2
 1554 0b21 B8 02                   		movw	[sp+2], ax
 1555 0b23 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 541:../src/r_main.c **** 
 542:../src/r_main.c **** 
 543:../src/r_main.c **** 						rx_count = 0;
 1556                             		.loc 1 543 0
 1557 0b27 F6                      		clrw	ax
 1558 0b28 BF 00 00                		movw	!_rx_count, ax
 544:../src/r_main.c **** 						break;
 1559                             		.loc 1 544 0
 1560 0b2b EC 52 0B 00             		br	!!.L25
 1561                             	.L50:
 545:../src/r_main.c **** 
 546:../src/r_main.c **** 					case 0xFF :
 547:../src/r_main.c **** 						readStatus();
 1562                             		.loc 1 547 0
 1563 0b2f FC 00 00 00             		call	!!%code(_readStatus)
 548:../src/r_main.c **** 						IIC_Buf[0] = 0xFF;
 1564                             		.loc 1 548 0
 1565 0b33 CF 00 00 FF             		mov	!_IIC_Buf, #-1
 549:../src/r_main.c **** 						IIC_Buf[1] = statusByte;
 1566                             		.loc 1 549 0
 1567 0b37 8F 00 00                		mov	a, !_statusByte
 1568 0b3a 9D F0                   		mov	r8, a
 1569 0b3c 9F 00 00                		mov	!_IIC_Buf+1, a
 550:../src/r_main.c **** 						R_UART1_Send(IIC_Buf, 2);
 1570                             		.loc 1 550 0
 1571 0b3f 30 00 00                		movw	ax, #_IIC_Buf
 1572 0b42 B8 00                   		movw	[sp], ax
 1573 0b44 30 02 00                		movw	ax, #2
 1574 0b47 B8 02                   		movw	[sp+2], ax
 1575 0b49 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 551:../src/r_main.c **** 
 552:../src/r_main.c **** 
 553:../src/r_main.c **** 						rx_count = 0;
 1576                             		.loc 1 553 0
 1577 0b4d F6                      		clrw	ax
 1578 0b4e BF 00 00                		movw	!_rx_count, ax
 554:../src/r_main.c **** 						break;
 1579                             		.loc 1 554 0
 1580 0b51 00                      		nop
 1581                             	.L25:
 1582                             	.LBE5:
 555:../src/r_main.c **** 				}
 556:../src/r_main.c **** 			}
 557:../src/r_main.c **** 			flagCheck();
 1583                             		.loc 1 557 0
 1584 0b52 FC 00 00 00             		call	!!%code(_flagCheck)
 558:../src/r_main.c **** 			uart1Status = R_UART1_Receive(&uart1RxBuf[rx_count],1);
 1585                             		.loc 1 558 0
 1586 0b56 AF 00 00                		movw	ax, !_rx_count
 1587 0b59 BD F0                   		movw	r8, ax
 1588 0b5b 04 00 00                		addw	ax, #_uart1RxBuf
 1589 0b5e BD F0                   		movw	r8, ax
 1590 0b60 B8 00                   		movw	[sp], ax
 1591 0b62 E6                      		onew	ax
 1592 0b63 B8 02                   		movw	[sp+2], ax
 1593 0b65 FC 00 00 00             		call	!!%code(_R_UART1_Receive)
 1594 0b69 AD F0                   		movw	ax, r8
 1595 0b6b BF 00 00                		movw	!_uart1Status, ax
 1596                             	.L16:
 559:../src/r_main.c **** 
 560:../src/r_main.c **** 		}
 561:../src/r_main.c **** 
 562:../src/r_main.c **** 
 563:../src/r_main.c **** 
 564:../src/r_main.c **** 		flagCheck();
 1597                             		.loc 1 564 0
 1598 0b6e FC 00 00 00             		call	!!%code(_flagCheck)
 565:../src/r_main.c **** 
 566:../src/r_main.c **** 
 567:../src/r_main.c **** 
 568:../src/r_main.c **** 		switch(haltState)
 1599                             		.loc 1 568 0
 1600 0b72 8F 00 00                		mov	a, !_haltState
 1601 0b75 9D F0                   		mov	r8, a
 1602 0b77 CD F1 00                		mov	r9, #0
 1603 0b7a AD F0                   		movw	ax, r8
 1604 0b7c 44 01 00                		cmpw	ax, #1 
 1605 0b7f 61 F8                   		sknz 
 1606 0b81 EC C7 0B 00             		br	!!.L66
 1607 0b85 AD F0                   		movw	ax, r8
 1608 0b87 44 02 00                		cmpw	ax, #2 
 1609 0b8a 61 F8                   		sknz 
 1610 0b8c EC C1 0B 00             		br	!!.L62
 1611 0b90 AD F0                   		movw	ax, r8
 1612 0b92 44 00 00                		cmpw	ax, #0 
 1613 0b95 61 F8                   		sknz 
 1614 0b97 EC 9F 0B 00             		br	!!.L63
 1615                             	.LBE2:
 569:../src/r_main.c **** 		{
 570:../src/r_main.c **** 		case HALT_DEFAULT :
 571:../src/r_main.c **** 			if(S==1)
 572:../src/r_main.c **** 				HALT();
 573:../src/r_main.c **** 			break;
 574:../src/r_main.c **** 		case HALT_NO_HALT :
 575:../src/r_main.c **** 
 576:../src/r_main.c **** 			break;
 577:../src/r_main.c **** 		case HALT_HALT :
 578:../src/r_main.c **** 			HALT();
 579:../src/r_main.c **** 			break;
 580:../src/r_main.c **** 		}
 581:../src/r_main.c **** 
 582:../src/r_main.c **** 	}
 1616                             		.loc 1 582 0
 1617 0b9b EC 84 02 00             		br	!!.L65
 1618                             	.L63:
 1619                             	.LBB6:
 571:../src/r_main.c **** 			if(S==1)
 1620                             		.loc 1 571 0
 1621 0b9f C9 F0 03 FF             		movw	r8, #-253
 1622 0ba3 AD F0                   		movw	ax, r8
 1623 0ba5 BD F2                   		movw	r10, ax
 1624 0ba7 FA F2                   		movw	hl, r10
 1625 0ba9 8B                      		mov	a, [hl]
 1626 0baa 9D F0                   		mov	r8, a
 1627 0bac 5A F0 02                		and	r8, #2
 1628 0baf D4 F0                   		cmp0	r8 
 1629 0bb1 61 F8                   		sknz 
 1630 0bb3 EC BD 0B 00             		br	!!.L64
 572:../src/r_main.c **** 				HALT();
 1631                             		.loc 1 572 0
 1632                             	 ; 572 "../src/r_main.c" 1
 1633 0bb7 61 ED                   		halt
 1634                             	 ; 0 "" 2
 573:../src/r_main.c **** 			break;
 1635                             		.loc 1 573 0
 1636 0bb9 EC C8 0B 00             		br	!!.L60
 1637                             	.L64:
 1638 0bbd EC C8 0B 00             		br	!!.L60
 1639                             	.L62:
 578:../src/r_main.c **** 			HALT();
 1640                             		.loc 1 578 0
 1641                             	 ; 578 "../src/r_main.c" 1
 1642 0bc1 61 ED                   		halt
 1643                             	 ; 0 "" 2
 579:../src/r_main.c **** 			break;
 1644                             		.loc 1 579 0
 1645 0bc3 EC C8 0B 00             		br	!!.L60
 1646                             	.L66:
 576:../src/r_main.c **** 			break;
 1647                             		.loc 1 576 0
 1648 0bc7 00                      		nop
 1649                             	.L60:
 1650                             	.LBE6:
 1651                             		.loc 1 582 0
 1652 0bc8 EC 84 02 00             		br	!!.L65
 1653                             	.LFE0:
 1655                             		.global	_R_MAIN_UserInit
 1657                             	_R_MAIN_UserInit:
 1658                             	.LFB1:
 583:../src/r_main.c **** 	/* End user code. Do not edit comment generated here */
 584:../src/r_main.c **** }
 585:../src/r_main.c **** 
 586:../src/r_main.c **** /**************************************************************************************************
 587:../src/r_main.c ****  * Function Name: R_MAIN_UserInit
 588:../src/r_main.c ****  * Description  : This function adds user code before implementing main function.
 589:../src/r_main.c ****  * Arguments    : None
 590:../src/r_main.c ****  * Return Value : None
 591:../src/r_main.c ****  **************************************************************************************************
 592:../src/r_main.c **** void R_MAIN_UserInit(void)
 593:../src/r_main.c **** {
 1659                             		.loc 1 593 0
 594:../src/r_main.c **** 	/* Start user code. Do not edit comment generated here */
 595:../src/r_main.c **** 	EI();
 1660                             		.loc 1 595 0
 1661                             	 ; 595 "../src/r_main.c" 1
 1662 0bcc 71 7A FA                		ei
 1663                             	 ; 0 "" 2
 596:../src/r_main.c **** 
 597:../src/r_main.c **** 	/* End user code. Do not edit comment generated here */
 598:../src/r_main.c **** }
 1664                             		.loc 1 598 0
 1665 0bcf D7                      		ret
 1666                             	.LFE1:
 1706                             	.Letext0:
 1707                             		.file 2 "../src/iodefine.h"
 1708                             		.file 3 "../src/r_cg_macrodriver.h"
 1709                             		.file 4 "../src/r_cg_rtc.h"
 1710                             		.file 5 "../src/r_cg_userdefine.h"
 		br	!!.L49
 1896                             		.loc 1 352 0 is_stmt 0 discriminator 1
 1897 0dca AF 00 00                		movw	ax, !_alarmFlag+6
 1898 0dcd BD F0                   		movw	r8, ax
 1899 0dcf 44 00 00                		cmpw	ax, #0 
 1900 0dd2 61 E8                   		skz 
 1901 0dd4 EC 39 0F 00             		br	!!.L49
 353:../src/my_functions.c **** 		{
 354:../src/my_functions.c **** 			alarmFlag[modeWind] = 1;
 1902                             		.loc 1 354 0 is_stmt 1
 1903 0dd8 E6                      		onew	ax
 1904 0dd9 BF 00 00                		movw	!_alarmFlag+6, ax
 355:../src/my_functions.c **** 			alarmsArr[alarmCount].type = alarmTypeWind;
 1905                             		.loc 1 355 0
 1906 0ddc AF 00 00                		movw	ax, !_alarmCount
 1907 0ddf BD F0                   		movw	r8, ax
 1908 0de1 B8 A4                   		movw	[sp+164], ax
 1909 0de3 BD F2                   		movw	r10, ax
 1910 0de5 B8 22                   		movw	[sp+34], ax
 1911 0de7 31 3D                   		shlw	ax, 3
 1912 0de9 B8 20                   		movw	[sp+32], ax
 1913 0deb BD F4                   		movw	r12, ax
 1914 0ded B8 22                   		movw	[sp+34], ax
 1915 0def A8 A4                   		movw	ax, [sp+164]
 1916 0df1 16                      		movw	hl, ax
 1917 0df2 A8 22                   		movw	ax, [sp+34]
 1918 0df4 27                      		subw	ax, hl
 1919 0df5 B8 22                   		movw	[sp+34], ax
 1920 0df7 04 00 00                		addw	ax, #_alarmsArr
 1921 0dfa BD F0                   		movw	r8, ax
 1922 0dfc BD F2                   		movw	r10, ax
 1923 0dfe DA F2                   		movw	bc, r10
 1924 0e00 51 E6                   		mov	a, #-26
 1925 0e02 48 00 00                		mov	[bc], a
 356:../src/my_functions.c **** 			alarmsArr[alarmCount].time[0] = my_time.month;
 1926                             		.loc 1 356 0
 1927 0e05 AF 00 00                		movw	ax, !_alarmCount
 1928 0e08 BD F4                   		movw	r12, ax
 1929 0e0a B8 A2                   		movw	[sp+162], ax
 1930 0e0c 8F 00 00                		mov	a, !_my_time+5
 1931 0e0f 9D F2                   		mov	r10, a
 1932 0e11 A8 A2                   		movw	ax, [sp+162]
 1933 0e13 BD F0                   		movw	r8, ax
 1934 0e15 B8 1E                   		movw	[sp+30], ax
 1935 0e17 31 3D                   		shlw	ax, 3
 1936 0e19 B8 1C                   		movw	[sp+28], ax
 1937 0e1b BD F4                   		movw	r12, ax
 1938 0e1d B8 1E                   		movw	[sp+30], ax
 1939 0e1f A8 A2                   		movw	ax, [sp+162]
 1940 0e21 16                      		movw	hl, ax
 1941 0e22 A8 1E                   		movw	ax, [sp+30]
 1942 0e24 27                      		subw	ax, hl
 1943 0e25 B8 1E                   		movw	[sp+30], ax
 1944 0e27 04 00 00                		addw	ax, #_alarmsArr+1
 1945 0e2a BD F0                   		movw	r8, ax
 1946 0e2c BD F4                   		movw	r12, ax
 1947 0e2e DA F4                   		movw	bc, r12
 1948 0e30 8D F2                   		mov	a, r10
 1949 0e32 48 00 00                		mov	[bc], a
 357:../src/my_functions.c **** 			alarmsArr[alarmCount].time[1] = my_time.day;
 1950                             		.loc 1 357 0
 1951 0e35 AF 00 00                		movw	ax, !_alarmCount
 1952 0e38 BD F0                   		movw	r8, ax
 1953 0e3a B8 A0                   		movw	[sp+160], ax
 1954 0e3c 8F 00 00                		mov	a, !_my_time+3
 1955 0e3f 9D F2                   		mov	r10, a
 1956 0e41 A8 A0                   		movw	ax, [sp+160]
 1957 0e43 BD F4                   		movw	r12, ax
 1958 0e45 B8 1A                   		movw	[sp+26], ax
 1959 0e47 31 3D                   		shlw	ax, 3
 1960 0e49 B8 18                   		movw	[sp+24], ax
 1961 0e4b BD F0                   		movw	r8, ax
 1962 0e4d B8 1A                   		movw	[sp+26], ax
 1963 0e4f A8 A0                   		movw	ax, [sp+160]
 1964 0e51 16                      		movw	hl, ax
 1965 0e52 A8 1A                   		movw	ax, [sp+26]
 1966 0e54 27                      		subw	ax, hl
 1967 0e55 B8 1A                   		movw	[sp+26], ax
 1968 0e57 04 00 00                		addw	ax, #_alarmsArr+2
 1969 0e5a BD F0                   		movw	r8, ax
 1970 0e5c BD F4                   		movw	r12, ax
 1971 0e5e DA F4                   		movw	bc, r12
 1972 0e60 8D F2                   		mov	a, r10
 1973 0e62 48 00 00                		mov	[bc], a
 358:../src/my_functions.c **** 			alarmsArr[alarmCount].time[2] = my_time.hour;
 1974                             		.loc 1 358 0
 1975 0e65 AF 00 00                		movw	ax, !_alarmCount
 1976 0e68 BD F0                   		movw	r8, ax
 1977 0e6a B8 9E                   		movw	[sp+158], ax
 1978 0e6c 8F 00 00                		mov	a, !_my_time+2
 1979 0e6f 9D F2                   		mov	r10, a
 1980 0e71 A8 9E                   		movw	ax, [sp+158]
 1981 0e73 BD F4                   		movw	r12, ax
 1982 0e75 B8 16                   		movw	[sp+22], ax
 1983 0e77 31 3D                   		shlw	ax, 3
 1984 0e79 B8 14                   		movw	[sp+20], ax
 1985 0e7b BD F0                   		movw	r8, ax
 1986 0e7d B8 16                   		movw	[sp+22], ax
 1987 0e7f A8 9E                   		movw	ax, [sp+158]
 1988 0e81 16                      		movw	hl, ax
 1989 0e82 A8 16                   		movw	ax, [sp+22]
 1990 0e84 27                      		subw	ax, hl
 1991 0e85 B8 16                   		movw	[sp+22], ax
 1992 0e87 04 00 00                		addw	ax, #_alarmsArr+3
 1993 0e8a BD F0                   		movw	r8, ax
 1994 0e8c BD F4                   		movw	r12, ax
 1995 0e8e DA F4                   		movw	bc, r12
 1996 0e90 8D F2                   		mov	a, r10
 1997 0e92 48 00 00                		mov	[bc], a
 359:../src/my_functions.c **** 			alarmsArr[alarmCount].time[3] = my_time.min;
 1998                             		.loc 1 359 0
 1999 0e95 AF 00 00                		movw	ax, !_alarmCount
 2000 0e98 BD F0                   		movw	r8, ax
 2001 0e9a B8 9C                   		movw	[sp+156], ax
 2002 0e9c 8F 00 00                		mov	a, !_my_time+1
 2003 0e9f 9D F2                   		mov	r10, a
 2004 0ea1 A8 9C                   		movw	ax, [sp+156]
 2005 0ea3 BD F4                   		movw	r12, ax
 2006 0ea5 B8 12                   		movw	[sp+18], ax
 2007 0ea7 31 3D                   		shlw	ax, 3
 2008 0ea9 B8 10                   		movw	[sp+16], ax
 2009 0eab BD F0                   		movw	r8, ax
 2010 0ead B8 12                   		movw	[sp+18], ax
 2011 0eaf A8 9C                   		movw	ax, [sp+156]
 2012 0eb1 16                      		movw	hl, ax
 2013 0eb2 A8 12                   		movw	ax, [sp+18]
 2014 0eb4 27                      		subw	ax, hl
 2015 0eb5 B8 12                   		movw	[sp+18], ax
 2016 0eb7 04 00 00                		addw	ax, #_alarmsArr+4
 2017 0eba BD F0                   		movw	r8, ax
 2018 0ebc BD F4                   		movw	r12, ax
 2019 0ebe DA F4                   		movw	bc, r12
 2020 0ec0 8D F2                   		mov	a, r10
 2021 0ec2 48 00 00                		mov	[bc], a
 360:../src/my_functions.c **** 			alarmsArr[alarmCount].time[4] = my_time.sec;
 2022                             		.loc 1 360 0
 2023 0ec5 AF 00 00                		movw	ax, !_alarmCount
 2024 0ec8 BD F0                   		movw	r8, ax
 2025 0eca B8 9A                   		movw	[sp+154], ax
 2026 0ecc 8F 00 00                		mov	a, !_my_time
 2027 0ecf 9D F2                   		mov	r10, a
 2028 0ed1 A8 9A                   		movw	ax, [sp+154]
 2029 0ed3 BD F4                   		movw	r12, ax
 2030 0ed5 B8 0E                   		movw	[sp+14], ax
 2031 0ed7 31 3D                   		shlw	ax, 3
 2032 0ed9 B8 0C                   		movw	[sp+12], ax
 2033 0edb BD F0                   		movw	r8, ax
 2034 0edd B8 0E                   		movw	[sp+14], ax
 2035 0edf A8 9A                   		movw	ax, [sp+154]
 2036 0ee1 16                      		movw	hl, ax
 2037 0ee2 A8 0E                   		movw	ax, [sp+14]
 2038 0ee4 27                      		subw	ax, hl
 2039 0ee5 B8 0E                   		movw	[sp+14], ax
 2040 0ee7 04 00 00                		addw	ax, #_alarmsArr+5
 2041 0eea BD F0                   		movw	r8, ax
 2042 0eec BD F4                   		movw	r12, ax
 2043 0eee DA F4                   		movw	bc, r12
 2044 0ef0 8D F2                   		mov	a, r10
 2045 0ef2 48 00 00                		mov	[bc], a
 361:../src/my_functions.c **** 			alarmsArr[alarmCount].value = WindSpeed;
 2046                             		.loc 1 361 0
 2047 0ef5 AF 00 00                		movw	ax, !_alarmCount
 2048 0ef8 BD F0                   		movw	r8, ax
 2049 0efa B8 98                   		movw	[sp+152], ax
 2050 0efc 8F 00 00                		mov	a, !_WindSpeed
 2051 0eff 9D F2                   		mov	r10, a
 2052 0f01 A8 98                   		movw	ax, [sp+152]
 2053 0f03 BD F4                   		movw	r12, ax
 2054 0f05 B8 0A                   		movw	[sp+10], ax
 2055 0f07 31 3D                   		shlw	ax, 3
 2056 0f09 B8 08                   		movw	[sp+8], ax
 2057 0f0b BD F0                   		movw	r8, ax
 2058 0f0d B8 0A                   		movw	[sp+10], ax
 2059 0f0f A8 98                   		movw	ax, [sp+152]
 2060 0f11 16                      		movw	hl, ax
 2061 0f12 A8 0A                   		movw	ax, [sp+10]
 2062 0f14 27                      		subw	ax, hl
 2063 0f15 B8 0A                   		movw	[sp+10], ax
 2064 0f17 04 00 00                		addw	ax, #_alarmsArr+6
 2065 0f1a BD F0                   		movw	r8, ax
 2066 0f1c BD F4                   		movw	r12, ax
 2067 0f1e DA F4                   		movw	bc, r12
 2068 0f20 8D F2                   		mov	a, r10
 2069 0f22 48 00 00                		mov	[bc], a
 362:../src/my_functions.c **** 			alarmCount++;
 2070                             		.loc 1 362 0
 2071 0f25 AF 00 00                		movw	ax, !_alarmCount
 2072 0f28 BD F0                   		movw	r8, ax
 2073 0f2a A6 F0                   		incw	r8
 2074 0f2c AD F0                   		movw	ax, r8
 2075 0f2e BF 00 00                		movw	!_alarmCount, ax
 363:../src/my_functions.c **** 			alarm_new();
 2076                             		.loc 1 363 0
 2077 0f31 FC 00 00 00             		call	!!%code(_alarm_new)
 2078 0f35 EC 63 0F 00             		br	!!.L50
 2079                             	.L49:
 364:../src/my_functions.c **** 		}
 365:../src/my_functions.c **** 		else if((WindSpeed<alarmConditionWind)&&(alarmFlag[modeWind]))
 2080                             		.loc 1 365 0
 2081 0f39 8F 00 00                		mov	a, !_WindSpeed
 2082 0f3c 9D F1                   		mov	r9, a
 2083 0f3e 8F 00 00                		mov	a, !_alarmConditionWind
 2084 0f41 9D F0                   		mov	r8, a
 2085 0f43 8D F1                   		mov	a, r9
 2086 0f45 4B F0                   		cmp	a, r8 
 2087 0f47 61 C8                   		skc 
 2088 0f49 EC 63 0F 00             		br	!!.L50
 2089                             		.loc 1 365 0 is_stmt 0 discriminator 1
 2090 0f4d AF 00 00                		movw	ax, !_alarmFlag+6
 2091 0f50 BD F0                   		movw	r8, ax
 2092 0f52 44 00 00                		cmpw	ax, #0 
 2093 0f55 61 F8                   		sknz 
 2094 0f57 EC 63 0F 00             		br	!!.L50
 366:../src/my_functions.c **** 		{
 367:../src/my_functions.c **** 			alarmFlag[modeWind] = 0;
 2095                             		.loc 1 367 0 is_stmt 1
 2096 0f5b F6                      		clrw	ax
 2097 0f5c BF 00 00                		movw	!_alarmFlag+6, ax
 368:../src/my_functions.c **** 		}
 369:../src/my_functions.c **** 
 370:../src/my_functions.c **** 
 371:../src/my_functions.c **** 
 372:../src/my_functions.c **** 
 373:../src/my_functions.c **** 		break;
 2098                             		.loc 1 373 0
 2099 0f5f EC 87 0F 00             		br	!!.L12
 2100                             	.L50:
 2101 0f63 EC 87 0F 00             		br	!!.L12
 2102                             	.L27:
 374:../src/my_functions.c **** 	case 51 :
 375:../src/my_functions.c **** 		valueDisplay = 1;
 2103                             		.loc 1 375 0
 2104 0f67 E6                      		onew	ax
 2105 0f68 BF 00 00                		movw	!_valueDisplay, ax
 2106                             	.L51:
 376:../src/my_functions.c **** 		do{
 377:../src/my_functions.c **** 
 378:../src/my_functions.c **** 			rtcStatus = R_RTC_Get_CounterValue(my_time_point); // Update the RTC
 2107                             		.loc 1 378 0 discriminator 1
 2108 0f6b AF 00 00                		movw	ax, !_my_time_point
 2109 0f6e BD F0                   		movw	r8, ax
 2110 0f70 B8 00                   		movw	[sp], ax
 2111 0f72 FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 2112 0f76 AD F0                   		movw	ax, r8
 2113 0f78 BF 00 00                		movw	!_rtcStatus, ax
 379:../src/my_functions.c **** 
 380:../src/my_functions.c **** 		} while(rtcStatus != MD_OK);
 2114                             		.loc 1 380 0 discriminator 1
 2115 0f7b BD F0                   		movw	r8, ax
 2116 0f7d 44 00 00                		cmpw	ax, #0 
 2117 0f80 61 E8                   		skz 
 2118 0f82 EC 6B 0F 00             		br	!!.L51
 381:../src/my_functions.c **** 		break;
 2119                             		.loc 1 381 0
 2120 0f86 00                      		nop
 2121                             	.L12:
 382:../src/my_functions.c **** 
 383:../src/my_functions.c **** 	}
 384:../src/my_functions.c **** 
 385:../src/my_functions.c **** }
 2122                             		.loc 1 385 0
 2123 0f87 10 EA                   		addw	sp, #234
 2124 0f89 D7                      		ret
 2125                             	.LFE1:
 2127                             		.global	_buttons
 2129                             	_buttons:
 2130                             	.LFB2:
 386:../src/my_functions.c **** 
 387:../src/my_functions.c **** 
 388:../src/my_functions.c **** void buttons()
 389:../src/my_functions.c **** {
 2131                             		.loc 1 389 0
 390:../src/my_functions.c **** 	centreBuf[0] = centre;
 2132                             		.loc 1 390 0
 2133 0f8a C9 F0 05 FF             		movw	r8, #-251
 2134 0f8e AD F0                   		movw	ax, r8
 2135 0f90 BD F2                   		movw	r10, ax
 2136 0f92 FA F2                   		movw	hl, r10
 2137 0f94 8B                      		mov	a, [hl]
 2138 0f95 9D F0                   		mov	r8, a
 2139 0f97 31 1A                   		shr	a, 1
 2140 0f99 9D F0                   		mov	r8, a
 2141 0f9b 5A F0 01                		and	r8, #1
 2142 0f9e 8D F0                   		mov	a, r8
 2143 0fa0 9F 00 00                		mov	!_centreBuf, a
 391:../src/my_functions.c **** 	if((!centreSet)&&(centreBuf[0]==1)&&(centreBuf[1]==1)&&(centreBuf[2]==1))
 2144                             		.loc 1 391 0
 2145 0fa3 AF 00 00                		movw	ax, !_centreSet
 2146 0fa6 BD F0                   		movw	r8, ax
 2147 0fa8 44 00 00                		cmpw	ax, #0 
 2148 0fab 61 E8                   		skz 
 2149 0fad EC DF 0F 00             		br	!!.L53
 2150                             		.loc 1 391 0 is_stmt 0 discriminator 1
 2151 0fb1 8F 00 00                		mov	a, !_centreBuf
 2152 0fb4 9D F0                   		mov	r8, a
 2153 0fb6 4A F0 01                		cmp	r8, #1 
 2154 0fb9 61 E8                   		skz 
 2155 0fbb EC DF 0F 00             		br	!!.L53
 2156 0fbf 8F 00 00                		mov	a, !_centreBuf+1
 2157 0fc2 9D F0                   		mov	r8, a
 2158 0fc4 4A F0 01                		cmp	r8, #1 
 2159 0fc7 61 E8                   		skz 
 2160 0fc9 EC DF 0F 00             		br	!!.L53
 2161 0fcd 8F 00 00                		mov	a, !_centreBuf+2
 2162 0fd0 9D F0                   		mov	r8, a
 2163 0fd2 4A F0 01                		cmp	r8, #1 
 2164 0fd5 61 E8                   		skz 
 2165 0fd7 EC DF 0F 00             		br	!!.L53
 392:../src/my_functions.c **** 		centreSet = 1;
 2166                             		.loc 1 392 0 is_stmt 1
 2167 0fdb E6                      		onew	ax
 2168 0fdc BF 00 00                		movw	!_centreSet, ax
 2169                             	.L53:
 393:../src/my_functions.c **** 
 394:../src/my_functions.c **** 	leftBuf[0] = left;
 2170                             		.loc 1 394 0
 2171 0fdf C9 F0 05 FF             		movw	r8, #-251
 2172 0fe3 AD F0                   		movw	ax, r8
 2173 0fe5 BD F2                   		movw	r10, ax
 2174 0fe7 FA F2                   		movw	hl, r10
 2175 0fe9 8B                      		mov	a, [hl]
 2176 0fea 9D F0                   		mov	r8, a
 2177 0fec 5A F0 01                		and	r8, #1
 2178 0fef 8D F0                   		mov	a, r8
 2179 0ff1 9F 00 00                		mov	!_leftBuf, a
 395:../src/my_functions.c **** 	if((!leftSet)&&(leftBuf[0]==1)&&(leftBuf[1]==1)&&(leftBuf[2]==1))
 2180                             		.loc 1 395 0
 2181 0ff4 AF 00 00                		movw	ax, !_leftSet
 2182 0ff7 BD F0                   		movw	r8, ax
 2183 0ff9 44 00 00                		cmpw	ax, #0 
 2184 0ffc 61 E8                   		skz 
 2185 0ffe EC 30 10 00             		br	!!.L54
 2186                             		.loc 1 395 0 is_stmt 0 discriminator 1
 2187 1002 8F 00 00                		mov	a, !_leftBuf
 2188 1005 9D F0                   		mov	r8, a
 2189 1007 4A F0 01                		cmp	r8, #1 
 2190 100a 61 E8                   		skz 
 2191 100c EC 30 10 00             		br	!!.L54
 2192 1010 8F 00 00                		mov	a, !_leftBuf+1
 2193 1013 9D F0                   		mov	r8, a
 2194 1015 4A F0 01                		cmp	r8, #1 
 2195 1018 61 E8                   		skz 
 2196 101a EC 30 10 00             		br	!!.L54
 2197 101e 8F 00 00                		mov	a, !_leftBuf+2
 2198 1021 9D F0                   		mov	r8, a
 2199 1023 4A F0 01                		cmp	r8, #1 
 2200 1026 61 E8                   		skz 
 2201 1028 EC 30 10 00             		br	!!.L54
 396:../src/my_functions.c **** 		leftSet = 1;
 2202                             		.loc 1 396 0 is_stmt 1
 2203 102c E6                      		onew	ax
 2204 102d BF 00 00                		movw	!_leftSet, ax
 2205                             	.L54:
 397:../src/my_functions.c **** 
 398:../src/my_functions.c **** 	rightBuf[0] = right;
 2206                             		.loc 1 398 0
 2207 1030 C9 F0 0E FF             		movw	r8, #-242
 2208 1034 AD F0                   		movw	ax, r8
 2209 1036 BD F2                   		movw	r10, ax
 2210 1038 FA F2                   		movw	hl, r10
 2211 103a 8B                      		mov	a, [hl]
 2212 103b 9D F0                   		mov	r8, a
 2213 103d 31 1A                   		shr	a, 1
 2214 103f 9D F0                   		mov	r8, a
 2215 1041 5A F0 01                		and	r8, #1
 2216 1044 8D F0                   		mov	a, r8
 2217 1046 9F 00 00                		mov	!_rightBuf, a
 399:../src/my_functions.c **** 	if((!rightSet)&&(rightBuf[0]==1)&&(rightBuf[1]==1)&&(rightBuf[2]==1))
 2218                             		.loc 1 399 0
 2219 1049 AF 00 00                		movw	ax, !_rightSet
 2220 104c BD F0                   		movw	r8, ax
 2221 104e 44 00 00                		cmpw	ax, #0 
 2222 1051 61 E8                   		skz 
 2223 1053 EC 85 10 00             		br	!!.L55
 2224                             		.loc 1 399 0 is_stmt 0 discriminator 1
 2225 1057 8F 00 00                		mov	a, !_rightBuf
 2226 105a 9D F0                   		mov	r8, a
 2227 105c 4A F0 01                		cmp	r8, #1 
 2228 105f 61 E8                   		skz 
 2229 1061 EC 85 10 00             		br	!!.L55
 2230 1065 8F 00 00                		mov	a, !_rightBuf+1
 2231 1068 9D F0                   		mov	r8, a
 2232 106a 4A F0 01                		cmp	r8, #1 
 2233 106d 61 E8                   		skz 
 2234 106f EC 85 10 00             		br	!!.L55
 2235 1073 8F 00 00                		mov	a, !_rightBuf+2
 2236 1076 9D F0                   		mov	r8, a
 2237 1078 4A F0 01                		cmp	r8, #1 
 2238 107b 61 E8                   		skz 
 2239 107d EC 85 10 00             		br	!!.L55
 400:../src/my_functions.c **** 		rightSet = 1;
 2240                             		.loc 1 400 0 is_stmt 1
 2241 1081 E6                      		onew	ax
 2242 1082 BF 00 00                		movw	!_rightSet, ax
 2243                             	.L55:
 401:../src/my_functions.c **** 
 402:../src/my_functions.c **** 	upBuf[0] = up;
 2244                             		.loc 1 402 0
 2245 1085 C9 F0 0D FF             		movw	r8, #-243
 2246 1089 AD F0                   		movw	ax, r8
 2247 108b BD F2                   		movw	r10, ax
 2248 108d FA F2                   		movw	hl, r10
 2249 108f 8B                      		mov	a, [hl]
 2250 1090 9D F0                   		mov	r8, a
 2251 1092 31 7A                   		shr	a, 7
 2252 1094 9D F0                   		mov	r8, a
 2253 1096 9F 00 00                		mov	!_upBuf, a
 403:../src/my_functions.c **** 	if((!upSet)&&(upBuf[0]==1)&&(upBuf[1]==1)&&(upBuf[2]==1))
 2254                             		.loc 1 403 0
 2255 1099 AF 00 00                		movw	ax, !_upSet
 2256 109c BD F0                   		movw	r8, ax
 2257 109e 44 00 00                		cmpw	ax, #0 
 2258 10a1 61 E8                   		skz 
 2259 10a3 EC D5 10 00             		br	!!.L56
 2260                             		.loc 1 403 0 is_stmt 0 discriminator 1
 2261 10a7 8F 00 00                		mov	a, !_upBuf
 2262 10aa 9D F0                   		mov	r8, a
 2263 10ac 4A F0 01                		cmp	r8, #1 
 2264 10af 61 E8                   		skz 
 2265 10b1 EC D5 10 00             		br	!!.L56
 2266 10b5 8F 00 00                		mov	a, !_upBuf+1
 2267 10b8 9D F0                   		mov	r8, a
 2268 10ba 4A F0 01                		cmp	r8, #1 
 2269 10bd 61 E8                   		skz 
 2270 10bf EC D5 10 00             		br	!!.L56
 2271 10c3 8F 00 00                		mov	a, !_upBuf+2
 2272 10c6 9D F0                   		mov	r8, a
 2273 10c8 4A F0 01                		cmp	r8, #1 
 2274 10cb 61 E8                   		skz 
 2275 10cd EC D5 10 00             		br	!!.L56
 404:../src/my_functions.c **** 		upSet = 1;
 2276                             		.loc 1 404 0 is_stmt 1
 2277 10d1 E6                      		onew	ax
 2278 10d2 BF 00 00                		movw	!_upSet, ax
 2279                             	.L56:
 405:../src/my_functions.c **** 
 406:../src/my_functions.c **** 	downBuf[0] = down;
 2280                             		.loc 1 406 0
 2281 10d5 C9 F0 01 FF             		movw	r8, #-255
 2282 10d9 AD F0                   		movw	ax, r8
 2283 10db BD F2                   		movw	r10, ax
 2284 10dd FA F2                   		movw	hl, r10
 2285 10df 8B                      		mov	a, [hl]
 2286 10e0 9D F0                   		mov	r8, a
 2287 10e2 31 6A                   		shr	a, 6
 2288 10e4 9D F0                   		mov	r8, a
 2289 10e6 5A F0 01                		and	r8, #1
 2290 10e9 8D F0                   		mov	a, r8
 2291 10eb 9F 00 00                		mov	!_downBuf, a
 407:../src/my_functions.c **** 	if((!downSet)&&(downBuf[0]==1)&&(downBuf[1]==1)&&(downBuf[2]==1))
 2292                             		.loc 1 407 0
 2293 10ee AF 00 00                		movw	ax, !_downSet
 2294 10f1 BD F0                   		movw	r8, ax
 2295 10f3 44 00 00                		cmpw	ax, #0 
 2296 10f6 61 E8                   		skz 
 2297 10f8 EC 2A 11 00             		br	!!.L57
 2298                             		.loc 1 407 0 is_stmt 0 discriminator 1
 2299 10fc 8F 00 00                		mov	a, !_downBuf
 2300 10ff 9D F0                   		mov	r8, a
 2301 1101 4A F0 01                		cmp	r8, #1 
 2302 1104 61 E8                   		skz 
 2303 1106 EC 2A 11 00             		br	!!.L57
 2304 110a 8F 00 00                		mov	a, !_downBuf+1
 2305 110d 9D F0                   		mov	r8, a
 2306 110f 4A F0 01                		cmp	r8, #1 
 2307 1112 61 E8                   		skz 
 2308 1114 EC 2A 11 00             		br	!!.L57
 2309 1118 8F 00 00                		mov	a, !_downBuf+2
 2310 111b 9D F0                   		mov	r8, a
 2311 111d 4A F0 01                		cmp	r8, #1 
 2312 1120 61 E8                   		skz 
 2313 1122 EC 2A 11 00             		br	!!.L57
 408:../src/my_functions.c **** 		downSet = 1;
 2314                             		.loc 1 408 0 is_stmt 1
 2315 1126 E6                      		onew	ax
 2316 1127 BF 00 00                		movw	!_downSet, ax
 2317                             	.L57:
 409:../src/my_functions.c **** 
 410:../src/my_functions.c **** 	if(centreSet)
 2318                             		.loc 1 410 0
 2319 112a AF 00 00                		movw	ax, !_centreSet
 2320 112d BD F0                   		movw	r8, ax
 2321 112f 44 00 00                		cmpw	ax, #0 
 2322 1132 61 F8                   		sknz 
 2323 1134 EC B4 11 00             		br	!!.L58
 411:../src/my_functions.c **** 	{
 412:../src/my_functions.c **** 		if((((centreBuf[0]==0)&&(centreBuf[1]==0))||((centreBuf[1]==0)&&(centreBuf[2]==0))))
 2324                             		.loc 1 412 0
 2325 1138 8F 00 00                		mov	a, !_centreBuf
 2326 113b 9D F0                   		mov	r8, a
 2327 113d D4 F0                   		cmp0	r8 
 2328 113f 61 E8                   		skz 
 2329 1141 EC 52 11 00             		br	!!.L59
 2330                             		.loc 1 412 0 is_stmt 0 discriminator 1
 2331 1145 8F 00 00                		mov	a, !_centreBuf+1
 2332 1148 9D F0                   		mov	r8, a
 2333 114a D4 F0                   		cmp0	r8 
 2334 114c 61 F8                   		sknz 
 2335 114e EC 6C 11 00             		br	!!.L60
 2336                             	.L59:
 2337                             		.loc 1 412 0 discriminator 2
 2338 1152 8F 00 00                		mov	a, !_centreBuf+1
 2339 1155 9D F0                   		mov	r8, a
 2340 1157 D4 F0                   		cmp0	r8 
 2341 1159 61 E8                   		skz 
 2342 115b EC A8 11 00             		br	!!.L61
 2343                             		.loc 1 412 0 discriminator 1
 2344 115f 8F 00 00                		mov	a, !_centreBuf+2
 2345 1162 9D F0                   		mov	r8, a
 2346 1164 D4 F0                   		cmp0	r8 
 2347 1166 61 E8                   		skz 
 2348 1168 EC A8 11 00             		br	!!.L61
 2349                             	.L60:
 413:../src/my_functions.c **** 		{
 414:../src/my_functions.c **** 			centreFlag = 1;
 2350                             		.loc 1 414 0 is_stmt 1
 2351 116c E6                      		onew	ax
 2352 116d BF 00 00                		movw	!_centreFlag, ax
 415:../src/my_functions.c **** 			centreSet = 0;
 2353                             		.loc 1 415 0
 2354 1170 F6                      		clrw	ax
 2355 1171 BF 00 00                		movw	!_centreSet, ax
 416:../src/my_functions.c **** 
 417:../src/my_functions.c **** 			if(buzFlag)
 2356                             		.loc 1 417 0
 2357 1174 AF 00 00                		movw	ax, !_buzFlag
 2358 1177 BD F0                   		movw	r8, ax
 2359 1179 44 00 00                		cmpw	ax, #0 
 2360 117c 61 F8                   		sknz 
 2361 117e EC A4 11 00             		br	!!.L62
 418:../src/my_functions.c **** 			{
 419:../src/my_functions.c **** 				buzzerON = 0;
 2362                             		.loc 1 419 0
 2363 1182 F6                      		clrw	ax
 2364 1183 BF 00 00                		movw	!_buzzerON, ax
 420:../src/my_functions.c **** 				buzState = buzzOff;
 2365                             		.loc 1 420 0
 2366 1186 F6                      		clrw	ax
 2367 1187 BF 00 00                		movw	!_buzState, ax
 421:../src/my_functions.c **** 				buzFlag = 0;
 2368                             		.loc 1 421 0
 2369 118a F6                      		clrw	ax
 2370 118b BF 00 00                		movw	!_buzFlag, ax
 422:../src/my_functions.c **** 				R_TAU0_Channel2_Stop();
 2371                             		.loc 1 422 0
 2372 118e FC 00 00 00             		call	!!%code(_R_TAU0_Channel2_Stop)
 423:../src/my_functions.c **** 				buzTime=10;
 2373                             		.loc 1 423 0
 2374 1192 30 0A 00                		movw	ax, #10
 2375 1195 BF 00 00                		movw	!_buzTime, ax
 424:../src/my_functions.c **** 				buzzalarm = 0;
 2376                             		.loc 1 424 0
 2377 1198 F6                      		clrw	ax
 2378 1199 BF 00 00                		movw	!_buzzalarm, ax
 425:../src/my_functions.c **** 				R_PCLBUZ0_Stop();
 2379                             		.loc 1 425 0
 2380 119c FC 00 00 00             		call	!!%code(_R_PCLBUZ0_Stop)
 417:../src/my_functions.c **** 			if(buzFlag)
 2381                             		.loc 1 417 0
 2382 11a0 EC B0 11 00             		br	!!.L63
 2383                             	.L62:
 417:../src/my_functions.c **** 			if(buzFlag)
 2384                             		.loc 1 417 0 is_stmt 0 discriminator 1
 2385 11a4 EC B0 11 00             		br	!!.L63
 2386                             	.L61:
 426:../src/my_functions.c **** 			}
 427:../src/my_functions.c **** 
 428:../src/my_functions.c **** 		}
 429:../src/my_functions.c **** 		else
 430:../src/my_functions.c **** 			centreFlag = 0;
 2387                             		.loc 1 430 0 is_stmt 1
 2388 11a8 F6                      		clrw	ax
 2389 11a9 BF 00 00                		movw	!_centreFlag, ax
 2390 11ac EC B8 11 00             		br	!!.L64
 2391                             	.L63:
 2392 11b0 EC B8 11 00             		br	!!.L64
 2393                             	.L58:
 431:../src/my_functions.c **** 	}
 432:../src/my_functions.c **** 	else
 433:../src/my_functions.c **** 		centreFlag = 0;
 2394                             		.loc 1 433 0
 2395 11b4 F6                      		clrw	ax
 2396 11b5 BF 00 00                		movw	!_centreFlag, ax
 2397                             	.L64:
 434:../src/my_functions.c **** 
 435:../src/my_functions.c **** 	if(leftSet)
 2398                             		.loc 1 435 0
 2399 11b8 AF 00 00                		movw	ax, !_leftSet
 2400 11bb BD F0                   		movw	r8, ax
 2401 11bd 44 00 00                		cmpw	ax, #0 
 2402 11c0 61 F8                   		sknz 
 2403 11c2 EC 60 12 00             		br	!!.L65
 436:../src/my_functions.c **** 	{
 437:../src/my_functions.c **** 		if((((leftBuf[0]==0)&&(leftBuf[1]==0))||((leftBuf[1]==0)&&(leftBuf[2]==0))))
 2404                             		.loc 1 437 0
 2405 11c6 8F 00 00                		mov	a, !_leftBuf
 2406 11c9 9D F0                   		mov	r8, a
 2407 11cb D4 F0                   		cmp0	r8 
 2408 11cd 61 E8                   		skz 
 2409 11cf EC E0 11 00             		br	!!.L66
 2410                             		.loc 1 437 0 is_stmt 0 discriminator 1
 2411 11d3 8F 00 00                		mov	a, !_leftBuf+1
 2412 11d6 9D F0                   		mov	r8, a
 2413 11d8 D4 F0                   		cmp0	r8 
 2414 11da 61 F8                   		sknz 
 2415 11dc EC FA 11 00             		br	!!.L67
 2416                             	.L66:
 2417                             		.loc 1 437 0 discriminator 2
 2418 11e0 8F 00 00                		mov	a, !_leftBuf+1
 2419 11e3 9D F0                   		mov	r8, a
 2420 11e5 D4 F0                   		cmp0	r8 
 2421 11e7 61 E8                   		skz 
 2422 11e9 EC 54 12 00             		br	!!.L68
 2423                             		.loc 1 437 0 discriminator 1
 2424 11ed 8F 00 00                		mov	a, !_leftBuf+2
 2425 11f0 9D F0                   		mov	r8, a
 2426 11f2 D4 F0                   		cmp0	r8 
 2427 11f4 61 E8                   		skz 
 2428 11f6 EC 54 12 00             		br	!!.L68
 2429                             	.L67:
 438:../src/my_functions.c **** 		{
 439:../src/my_functions.c **** 			leftFlag = 1;
 2430                             		.loc 1 439 0 is_stmt 1
 2431 11fa E6                      		onew	ax
 2432 11fb BF 00 00                		movw	!_leftFlag, ax
 440:../src/my_functions.c **** 			leftSet = 0;
 2433                             		.loc 1 440 0
 2434 11fe F6                      		clrw	ax
 2435 11ff BF 00 00                		movw	!_leftSet, ax
 441:../src/my_functions.c **** 			if(Mode=='N')
 2436                             		.loc 1 441 0
 2437 1202 8F 00 00                		mov	a, !_Mode
 2438 1205 9D F0                   		mov	r8, a
 2439 1207 4A F0 4E                		cmp	r8, #78 
 2440 120a 61 E8                   		skz 
 2441 120c EC 50 12 00             		br	!!.L69
 442:../src/my_functions.c **** 			{
 443:../src/my_functions.c **** 				if(menuState==CYCLE)
 2442                             		.loc 1 443 0
 2443 1210 AF 00 00                		movw	ax, !_menuState
 2444 1213 BD F0                   		movw	r8, ax
 2445 1215 44 00 00                		cmpw	ax, #0 
 2446 1218 61 E8                   		skz 
 2447 121a EC 28 12 00             		br	!!.L70
 444:../src/my_functions.c **** 					menuState = ALARMS;
 2448                             		.loc 1 444 0
 2449 121e 30 02 00                		movw	ax, #2
 2450 1221 BF 00 00                		movw	!_menuState, ax
 2451 1224 EC 34 12 00             		br	!!.L71
 2452                             	.L70:
 445:../src/my_functions.c **** 				else
 446:../src/my_functions.c **** 					menuState--;
 2453                             		.loc 1 446 0
 2454 1228 AF 00 00                		movw	ax, !_menuState
 2455 122b BD F0                   		movw	r8, ax
 2456 122d B6 F0                   		decw	r8
 2457 122f AD F0                   		movw	ax, r8
 2458 1231 BF 00 00                		movw	!_menuState, ax
 2459                             	.L71:
 447:../src/my_functions.c **** 
 448:../src/my_functions.c **** 				oneFlag = 0;
 2460                             		.loc 1 448 0
 2461 1234 F6                      		clrw	ax
 2462 1235 BF 00 00                		movw	!_oneFlag, ax
 449:../src/my_functions.c **** 				twoFlag = 0;
 2463                             		.loc 1 449 0
 2464 1238 F6                      		clrw	ax
 2465 1239 BF 00 00                		movw	!_twoFlag, ax
 450:../src/my_functions.c **** 				cycleTimer = 0;
 2466                             		.loc 1 450 0
 2467 123c F6                      		clrw	ax
 2468 123d BF 00 00                		movw	!_cycleTimer, ax
 451:../src/my_functions.c **** 				cycleStart = 1;
 2469                             		.loc 1 451 0
 2470 1240 E6                      		onew	ax
 2471 1241 BF 00 00                		movw	!_cycleStart, ax
 452:../src/my_functions.c **** 
 453:../src/my_functions.c **** 				cycleMode = modeTemp;
 2472                             		.loc 1 453 0
 2473 1244 F6                      		clrw	ax
 2474 1245 BF 00 00                		movw	!_cycleMode, ax
 454:../src/my_functions.c **** 				valueDisplay = 1;
 2475                             		.loc 1 454 0
 2476 1248 E6                      		onew	ax
 2477 1249 BF 00 00                		movw	!_valueDisplay, ax
 441:../src/my_functions.c **** 			if(Mode=='N')
 2478                             		.loc 1 441 0
 2479 124c EC 5C 12 00             		br	!!.L72
 2480                             	.L69:
 441:../src/my_functions.c **** 			if(Mode=='N')
 2481                             		.loc 1 441 0 is_stmt 0 discriminator 1
 2482 1250 EC 5C 12 00             		br	!!.L72
 2483                             	.L68:
 455:../src/my_functions.c **** 
 456:../src/my_functions.c **** 
 457:../src/my_functions.c **** 			}
 458:../src/my_functions.c **** 
 459:../src/my_functions.c **** 		}
 460:../src/my_functions.c **** 		else
 461:../src/my_functions.c **** 			leftFlag = 0;
 2484                             		.loc 1 461 0 is_stmt 1
 2485 1254 F6                      		clrw	ax
 2486 1255 BF 00 00                		movw	!_leftFlag, ax
 2487 1258 EC 64 12 00             		br	!!.L73
 2488                             	.L72:
 2489 125c EC 64 12 00             		br	!!.L73
 2490                             	.L65:
 462:../src/my_functions.c **** 	}
 463:../src/my_functions.c **** 	else
 464:../src/my_functions.c **** 		leftFlag = 0;
 2491                             		.loc 1 464 0
 2492 1260 F6                      		clrw	ax
 2493 1261 BF 00 00                		movw	!_leftFlag, ax
 2494                             	.L73:
 465:../src/my_functions.c **** 
 466:../src/my_functions.c **** 	if(rightSet)
 2495                             		.loc 1 466 0
 2496 1264 AF 00 00                		movw	ax, !_rightSet
 2497 1267 BD F0                   		movw	r8, ax
 2498 1269 44 00 00                		cmpw	ax, #0 
 2499 126c 61 F8                   		sknz 
 2500 126e EC 0A 13 00             		br	!!.L74
 467:../src/my_functions.c **** 	{
 468:../src/my_functions.c **** 		if((((rightBuf[0]==0)&&(rightBuf[1]==0))||((rightBuf[1]==0)&&(rightBuf[2]==0))))
 2501                             		.loc 1 468 0
 2502 1272 8F 00 00                		mov	a, !_rightBuf
 2503 1275 9D F0                   		mov	r8, a
 2504 1277 D4 F0                   		cmp0	r8 
 2505 1279 61 E8                   		skz 
 2506 127b EC 8C 12 00             		br	!!.L75
 2507                             		.loc 1 468 0 is_stmt 0 discriminator 1
 2508 127f 8F 00 00                		mov	a, !_rightBuf+1
 2509 1282 9D F0                   		mov	r8, a
 2510 1284 D4 F0                   		cmp0	r8 
 2511 1286 61 F8                   		sknz 
 2512 1288 EC A6 12 00             		br	!!.L76
 2513                             	.L75:
 2514                             		.loc 1 468 0 discriminator 2
 2515 128c 8F 00 00                		mov	a, !_rightBuf+1
 2516 128f 9D F0                   		mov	r8, a
 2517 1291 D4 F0                   		cmp0	r8 
 2518 1293 61 E8                   		skz 
 2519 1295 EC FE 12 00             		br	!!.L77
 2520                             		.loc 1 468 0 discriminator 1
 2521 1299 8F 00 00                		mov	a, !_rightBuf+2
 2522 129c 9D F0                   		mov	r8, a
 2523 129e D4 F0                   		cmp0	r8 
 2524 12a0 61 E8                   		skz 
 2525 12a2 EC FE 12 00             		br	!!.L77
 2526                             	.L76:
 469:../src/my_functions.c **** 		{
 470:../src/my_functions.c **** 			rightFlag = 1;
 2527                             		.loc 1 470 0 is_stmt 1
 2528 12a6 E6                      		onew	ax
 2529 12a7 BF 00 00                		movw	!_rightFlag, ax
 471:../src/my_functions.c **** 			rightSet = 0;
 2530                             		.loc 1 471 0
 2531 12aa F6                      		clrw	ax
 2532 12ab BF 00 00                		movw	!_rightSet, ax
 472:../src/my_functions.c **** 			if(Mode=='N')
 2533                             		.loc 1 472 0
 2534 12ae 8F 00 00                		mov	a, !_Mode
 2535 12b1 9D F0                   		mov	r8, a
 2536 12b3 4A F0 4E                		cmp	r8, #78 
 2537 12b6 61 E8                   		skz 
 2538 12b8 EC FA 12 00             		br	!!.L78
 473:../src/my_functions.c **** 			{
 474:../src/my_functions.c **** 				if(menuState==ALARMS)
 2539                             		.loc 1 474 0
 2540 12bc AF 00 00                		movw	ax, !_menuState
 2541 12bf BD F0                   		movw	r8, ax
 2542 12c1 44 02 00                		cmpw	ax, #2 
 2543 12c4 61 E8                   		skz 
 2544 12c6 EC D2 12 00             		br	!!.L79
 475:../src/my_functions.c **** 					menuState = CYCLE;
 2545                             		.loc 1 475 0
 2546 12ca F6                      		clrw	ax
 2547 12cb BF 00 00                		movw	!_menuState, ax
 2548 12ce EC DE 12 00             		br	!!.L80
 2549                             	.L79:
 476:../src/my_functions.c **** 				else
 477:../src/my_functions.c **** 					menuState++;
 2550                             		.loc 1 477 0
 2551 12d2 AF 00 00                		movw	ax, !_menuState
 2552 12d5 BD F0                   		movw	r8, ax
 2553 12d7 A6 F0                   		incw	r8
 2554 12d9 AD F0                   		movw	ax, r8
 2555 12db BF 00 00                		movw	!_menuState, ax
 2556                             	.L80:
 478:../src/my_functions.c **** 
 479:../src/my_functions.c **** 				oneFlag = 0;
 2557                             		.loc 1 479 0
 2558 12de F6                      		clrw	ax
 2559 12df BF 00 00                		movw	!_oneFlag, ax
 480:../src/my_functions.c **** 				twoFlag = 0;
 2560                             		.loc 1 480 0
 2561 12e2 F6                      		clrw	ax
 2562 12e3 BF 00 00                		movw	!_twoFlag, ax
 481:../src/my_functions.c **** 				cycleTimer = 0;
 2563                             		.loc 1 481 0
 2564 12e6 F6                      		clrw	ax
 2565 12e7 BF 00 00                		movw	!_cycleTimer, ax
 482:../src/my_functions.c **** 				cycleStart = 1;
 2566                             		.loc 1 482 0
 2567 12ea E6                      		onew	ax
 2568 12eb BF 00 00                		movw	!_cycleStart, ax
 483:../src/my_functions.c **** 
 484:../src/my_functions.c **** 				cycleMode = modeTemp;
 2569                             		.loc 1 484 0
 2570 12ee F6                      		clrw	ax
 2571 12ef BF 00 00                		movw	!_cycleMode, ax
 485:../src/my_functions.c **** 				valueDisplay = 1;
 2572                             		.loc 1 485 0
 2573 12f2 E6                      		onew	ax
 2574 12f3 BF 00 00                		movw	!_valueDisplay, ax
 472:../src/my_functions.c **** 			if(Mode=='N')
 2575                             		.loc 1 472 0
 2576 12f6 EC 06 13 00             		br	!!.L81
 2577                             	.L78:
 472:../src/my_functions.c **** 			if(Mode=='N')
 2578                             		.loc 1 472 0 is_stmt 0 discriminator 1
 2579 12fa EC 06 13 00             		br	!!.L81
 2580                             	.L77:
 486:../src/my_functions.c **** 
 487:../src/my_functions.c **** 
 488:../src/my_functions.c **** 			}
 489:../src/my_functions.c **** 
 490:../src/my_functions.c **** 		}
 491:../src/my_functions.c **** 		else
 492:../src/my_functions.c **** 			rightFlag = 0;
 2581                             		.loc 1 492 0 is_stmt 1
 2582 12fe F6                      		clrw	ax
 2583 12ff BF 00 00                		movw	!_rightFlag, ax
 2584 1302 EC 0E 13 00             		br	!!.L82
 2585                             	.L81:
 2586 1306 EC 0E 13 00             		br	!!.L82
 2587                             	.L74:
 493:../src/my_functions.c **** 	}
 494:../src/my_functions.c **** 	else
 495:../src/my_functions.c **** 		rightFlag = 0;
 2588                             		.loc 1 495 0
 2589 130a F6                      		clrw	ax
 2590 130b BF 00 00                		movw	!_rightFlag, ax
 2591                             	.L82:
 496:../src/my_functions.c **** 	if(upSet)
 2592                             		.loc 1 496 0
 2593 130e AF 00 00                		movw	ax, !_upSet
 2594 1311 BD F0                   		movw	r8, ax
 2595 1313 44 00 00                		cmpw	ax, #0 
 2596 1316 61 F8                   		sknz 
 2597 1318 EC FA 13 00             		br	!!.L83
 497:../src/my_functions.c **** 	{
 498:../src/my_functions.c **** 		if((((upBuf[0]==0)&&(upBuf[1]==0))||((upBuf[1]==0)&&(upBuf[2]==0))))
 2598                             		.loc 1 498 0
 2599 131c 8F 00 00                		mov	a, !_upBuf
 2600 131f 9D F0                   		mov	r8, a
 2601 1321 D4 F0                   		cmp0	r8 
 2602 1323 61 E8                   		skz 
 2603 1325 EC 36 13 00             		br	!!.L84
 2604                             		.loc 1 498 0 is_stmt 0 discriminator 1
 2605 1329 8F 00 00                		mov	a, !_upBuf+1
 2606 132c 9D F0                   		mov	r8, a
 2607 132e D4 F0                   		cmp0	r8 
 2608 1330 61 F8                   		sknz 
 2609 1332 EC 50 13 00             		br	!!.L85
 2610                             	.L84:
 2611                             		.loc 1 498 0 discriminator 2
 2612 1336 8F 00 00                		mov	a, !_upBuf+1
 2613 1339 9D F0                   		mov	r8, a
 2614 133b D4 F0                   		cmp0	r8 
 2615 133d 61 E8                   		skz 
 2616 133f EC EE 13 00             		br	!!.L86
 2617                             		.loc 1 498 0 discriminator 1
 2618 1343 8F 00 00                		mov	a, !_upBuf+2
 2619 1346 9D F0                   		mov	r8, a
 2620 1348 D4 F0                   		cmp0	r8 
 2621 134a 61 E8                   		skz 
 2622 134c EC EE 13 00             		br	!!.L86
 2623                             	.L85:
 499:../src/my_functions.c **** 		{
 500:../src/my_functions.c **** 			upFlag = 1;
 2624                             		.loc 1 500 0 is_stmt 1
 2625 1350 E6                      		onew	ax
 2626 1351 BF 00 00                		movw	!_upFlag, ax
 501:../src/my_functions.c **** 			upSet = 0;
 2627                             		.loc 1 501 0
 2628 1354 F6                      		clrw	ax
 2629 1355 BF 00 00                		movw	!_upSet, ax
 502:../src/my_functions.c **** 			if((Mode=='N')&&(menuState==VALUES))
 2630                             		.loc 1 502 0
 2631 1358 8F 00 00                		mov	a, !_Mode
 2632 135b 9D F0                   		mov	r8, a
 2633 135d 4A F0 4E                		cmp	r8, #78 
 2634 1360 61 E8                   		skz 
 2635 1362 EC A0 13 00             		br	!!.L87
 2636                             		.loc 1 502 0 is_stmt 0 discriminator 1
 2637 1366 AF 00 00                		movw	ax, !_menuState
 2638 1369 BD F0                   		movw	r8, ax
 2639 136b 44 01 00                		cmpw	ax, #1 
 2640 136e 61 E8                   		skz 
 2641 1370 EC A0 13 00             		br	!!.L87
 503:../src/my_functions.c **** 			{
 504:../src/my_functions.c **** 				if(cycleMode==modeTemp)
 2642                             		.loc 1 504 0 is_stmt 1
 2643 1374 AF 00 00                		movw	ax, !_cycleMode
 2644 1377 BD F0                   		movw	r8, ax
 2645 1379 44 00 00                		cmpw	ax, #0 
 2646 137c 61 E8                   		skz 
 2647 137e EC 8C 13 00             		br	!!.L88
 505:../src/my_functions.c **** 					cycleMode = modeDT;
 2648                             		.loc 1 505 0
 2649 1382 30 04 00                		movw	ax, #4
 2650 1385 BF 00 00                		movw	!_cycleMode, ax
 2651 1388 EC 98 13 00             		br	!!.L89
 2652                             	.L88:
 506:../src/my_functions.c **** 				else
 507:../src/my_functions.c **** 					cycleMode--;
 2653                             		.loc 1 507 0
 2654 138c AF 00 00                		movw	ax, !_cycleMode
 2655 138f BD F0                   		movw	r8, ax
 2656 1391 B6 F0                   		decw	r8
 2657 1393 AD F0                   		movw	ax, r8
 2658 1395 BF 00 00                		movw	!_cycleMode, ax
 2659                             	.L89:
 508:../src/my_functions.c **** 
 509:../src/my_functions.c **** 				valueView = 0;
 2660                             		.loc 1 509 0
 2661 1398 F6                      		clrw	ax
 2662 1399 BF 00 00                		movw	!_valueView, ax
 2663 139c EC EA 13 00             		br	!!.L90
 2664                             	.L87:
 510:../src/my_functions.c **** 
 511:../src/my_functions.c **** 
 512:../src/my_functions.c **** 			}
 513:../src/my_functions.c **** 			else if((Mode=='N')&&(menuState==ALARMS))
 2665                             		.loc 1 513 0
 2666 13a0 8F 00 00                		mov	a, !_Mode
 2667 13a3 9D F0                   		mov	r8, a
 2668 13a5 4A F0 4E                		cmp	r8, #78 
 2669 13a8 61 E8                   		skz 
 2670 13aa EC EA 13 00             		br	!!.L90
 2671                             		.loc 1 513 0 is_stmt 0 discriminator 1
 2672 13ae AF 00 00                		movw	ax, !_menuState
 2673 13b1 BD F0                   		movw	r8, ax
 2674 13b3 44 02 00                		cmpw	ax, #2 
 2675 13b6 61 E8                   		skz 
 2676 13b8 EC EA 13 00             		br	!!.L90
 514:../src/my_functions.c **** 			{
 515:../src/my_functions.c **** 				if(alarmCurrent==0)
 2677                             		.loc 1 515 0 is_stmt 1
 2678 13bc AF 00 00                		movw	ax, !_alarmCurrent
 2679 13bf BD F0                   		movw	r8, ax
 2680 13c1 44 00 00                		cmpw	ax, #0 
 2681 13c4 61 E8                   		skz 
 2682 13c6 EC DA 13 00             		br	!!.L91
 516:../src/my_functions.c **** 				{
 517:../src/my_functions.c **** 					alarmCurrent = alarmCount-1;
 2683                             		.loc 1 517 0
 2684 13ca AF 00 00                		movw	ax, !_alarmCount
 2685 13cd BD F0                   		movw	r8, ax
 2686 13cf B6 F0                   		decw	r8
 2687 13d1 AD F0                   		movw	ax, r8
 2688 13d3 BF 00 00                		movw	!_alarmCurrent, ax
 2689 13d6 EC EA 13 00             		br	!!.L90
 2690                             	.L91:
 518:../src/my_functions.c **** 				}
 519:../src/my_functions.c **** 				else
 520:../src/my_functions.c **** 				{
 521:../src/my_functions.c **** 					alarmCurrent--;
 2691                             		.loc 1 521 0
 2692 13da AF 00 00                		movw	ax, !_alarmCurrent
 2693 13dd BD F0                   		movw	r8, ax
 2694 13df B6 F0                   		decw	r8
 2695 13e1 AD F0                   		movw	ax, r8
 2696 13e3 BF 00 00                		movw	!_alarmCurrent, ax
 502:../src/my_functions.c **** 			if((Mode=='N')&&(menuState==VALUES))
 2697                             		.loc 1 502 0
 2698 13e6 EC F6 13 00             		br	!!.L92
 2699                             	.L90:
 2700 13ea EC F6 13 00             		br	!!.L92
 2701                             	.L86:
 522:../src/my_functions.c **** 				}
 523:../src/my_functions.c **** 			}
 524:../src/my_functions.c **** 
 525:../src/my_functions.c **** 
 526:../src/my_functions.c **** 		}
 527:../src/my_functions.c **** 		else
 528:../src/my_functions.c **** 			upFlag = 0;
 2702                             		.loc 1 528 0
 2703 13ee F6                      		clrw	ax
 2704 13ef BF 00 00                		movw	!_upFlag, ax
 2705 13f2 EC FE 13 00             		br	!!.L93
 2706                             	.L92:
 2707 13f6 EC FE 13 00             		br	!!.L93
 2708                             	.L83:
 529:../src/my_functions.c **** 	}
 530:../src/my_functions.c **** 	else
 531:../src/my_functions.c **** 		upFlag = 0;
 2709                             		.loc 1 531 0
 2710 13fa F6                      		clrw	ax
 2711 13fb BF 00 00                		movw	!_upFlag, ax
 2712                             	.L93:
 532:../src/my_functions.c **** 
 533:../src/my_functions.c **** 	if(downSet)
 2713                             		.loc 1 533 0
 2714 13fe AF 00 00                		movw	ax, !_downSet
 2715 1401 BD F0                   		movw	r8, ax
 2716 1403 44 00 00                		cmpw	ax, #0 
 2717 1406 61 F8                   		sknz 
 2718 1408 EC E9 14 00             		br	!!.L94
 534:../src/my_functions.c **** 	{
 535:../src/my_functions.c **** 		if((((downBuf[0]==0)&&(downBuf[1]==0))||((downBuf[1]==0)&&(downBuf[2]==0))))
 2719                             		.loc 1 535 0
 2720 140c 8F 00 00                		mov	a, !_downBuf
 2721 140f 9D F0                   		mov	r8, a
 2722 1411 D4 F0                   		cmp0	r8 
 2723 1413 61 E8                   		skz 
 2724 1415 EC 26 14 00             		br	!!.L95
 2725                             		.loc 1 535 0 is_stmt 0 discriminator 1
 2726 1419 8F 00 00                		mov	a, !_downBuf+1
 2727 141c 9D F0                   		mov	r8, a
 2728 141e D4 F0                   		cmp0	r8 
 2729 1420 61 F8                   		sknz 
 2730 1422 EC 40 14 00             		br	!!.L96
 2731                             	.L95:
 2732                             		.loc 1 535 0 discriminator 2
 2733 1426 8F 00 00                		mov	a, !_downBuf+1
 2734 1429 9D F0                   		mov	r8, a
 2735 142b D4 F0                   		cmp0	r8 
 2736 142d 61 E8                   		skz 
 2737 142f EC DD 14 00             		br	!!.L97
 2738                             		.loc 1 535 0 discriminator 1
 2739 1433 8F 00 00                		mov	a, !_downBuf+2
 2740 1436 9D F0                   		mov	r8, a
 2741 1438 D4 F0                   		cmp0	r8 
 2742 143a 61 E8                   		skz 
 2743 143c EC DD 14 00             		br	!!.L97
 2744                             	.L96:
 536:../src/my_functions.c **** 		{
 537:../src/my_functions.c **** 			downFlag = 1;
 2745                             		.loc 1 537 0 is_stmt 1
 2746 1440 E6                      		onew	ax
 2747 1441 BF 00 00                		movw	!_downFlag, ax
 538:../src/my_functions.c **** 			downSet = 0;
 2748                             		.loc 1 538 0
 2749 1444 F6                      		clrw	ax
 2750 1445 BF 00 00                		movw	!_downSet, ax
 539:../src/my_functions.c **** 			if((Mode=='N')&&(menuState==VALUES))
 2751                             		.loc 1 539 0
 2752 1448 8F 00 00                		mov	a, !_Mode
 2753 144b 9D F0                   		mov	r8, a
 2754 144d 4A F0 4E                		cmp	r8, #78 
 2755 1450 61 E8                   		skz 
 2756 1452 EC 8E 14 00             		br	!!.L98
 2757                             		.loc 1 539 0 is_stmt 0 discriminator 1
 2758 1456 AF 00 00                		movw	ax, !_menuState
 2759 1459 BD F0                   		movw	r8, ax
 2760 145b 44 01 00                		cmpw	ax, #1 
 2761 145e 61 E8                   		skz 
 2762 1460 EC 8E 14 00             		br	!!.L98
 540:../src/my_functions.c **** 			{
 541:../src/my_functions.c **** 				if(cycleMode==modeDT)
 2763                             		.loc 1 541 0 is_stmt 1
 2764 1464 AF 00 00                		movw	ax, !_cycleMode
 2765 1467 BD F0                   		movw	r8, ax
 2766 1469 44 04 00                		cmpw	ax, #4 
 2767 146c 61 E8                   		skz 
 2768 146e EC 7A 14 00             		br	!!.L99
 542:../src/my_functions.c **** 					cycleMode = modeTemp;
 2769                             		.loc 1 542 0
 2770 1472 F6                      		clrw	ax
 2771 1473 BF 00 00                		movw	!_cycleMode, ax
 2772 1476 EC 86 14 00             		br	!!.L100
 2773                             	.L99:
 543:../src/my_functions.c **** 				else
 544:../src/my_functions.c **** 					cycleMode++;
 2774                             		.loc 1 544 0
 2775 147a AF 00 00                		movw	ax, !_cycleMode
 2776 147d BD F0                   		movw	r8, ax
 2777 147f A6 F0                   		incw	r8
 2778 1481 AD F0                   		movw	ax, r8
 2779 1483 BF 00 00                		movw	!_cycleMode, ax
 2780                             	.L100:
 545:../src/my_functions.c **** 
 546:../src/my_functions.c **** 				valueView = 0;
 2781                             		.loc 1 546 0
 2782 1486 F6                      		clrw	ax
 2783 1487 BF 00 00                		movw	!_valueView, ax
 2784 148a EC D9 14 00             		br	!!.L101
 2785                             	.L98:
 547:../src/my_functions.c **** 			}
 548:../src/my_functions.c **** 			else if((Mode=='N')&&(menuState==ALARMS))
 2786                             		.loc 1 548 0
 2787 148e 8F 00 00                		mov	a, !_Mode
 2788 1491 9D F0                   		mov	r8, a
 2789 1493 4A F0 4E                		cmp	r8, #78 
 2790 1496 61 E8                   		skz 
 2791 1498 EC D9 14 00             		br	!!.L101
 2792                             		.loc 1 548 0 is_stmt 0 discriminator 1
 2793 149c AF 00 00                		movw	ax, !_menuState
 2794 149f BD F0                   		movw	r8, ax
 2795 14a1 44 02 00                		cmpw	ax, #2 
 2796 14a4 61 E8                   		skz 
 2797 14a6 EC D9 14 00             		br	!!.L101
 549:../src/my_functions.c **** 			{
 550:../src/my_functions.c **** 				if(alarmCurrent==(alarmCount-1))
 2798                             		.loc 1 550 0 is_stmt 1
 2799 14aa AF 00 00                		movw	ax, !_alarmCount
 2800 14ad BD F0                   		movw	r8, ax
 2801 14af B1                      		decw	ax
 2802 14b0 BD F2                   		movw	r10, ax
 2803 14b2 AF 00 00                		movw	ax, !_alarmCurrent
 2804 14b5 BD F0                   		movw	r8, ax
 2805 14b7 AD F2                   		movw	ax, r10
 2806 14b9 46 F0                   		cmpw	ax, r8 
 2807 14bb 61 E8                   		skz 
 2808 14bd EC C9 14 00             		br	!!.L102
 551:../src/my_functions.c **** 				{
 552:../src/my_functions.c **** 					alarmCurrent = 0;
 2809                             		.loc 1 552 0
 2810 14c1 F6                      		clrw	ax
 2811 14c2 BF 00 00                		movw	!_alarmCurrent, ax
 2812 14c5 EC D9 14 00             		br	!!.L101
 2813                             	.L102:
 553:../src/my_functions.c **** 				}
 554:../src/my_functions.c **** 				else
 555:../src/my_functions.c **** 				{
 556:../src/my_functions.c **** 					alarmCurrent++;
 2814                             		.loc 1 556 0
 2815 14c9 AF 00 00                		movw	ax, !_alarmCurrent
 2816 14cc BD F0                   		movw	r8, ax
 2817 14ce A6 F0                   		incw	r8
 2818 14d0 AD F0                   		movw	ax, r8
 2819 14d2 BF 00 00                		movw	!_alarmCurrent, ax
 539:../src/my_functions.c **** 			if((Mode=='N')&&(menuState==VALUES))
 2820                             		.loc 1 539 0
 2821 14d5 EC E5 14 00             		br	!!.L103
 2822                             	.L101:
 2823 14d9 EC E5 14 00             		br	!!.L103
 2824                             	.L97:
 557:../src/my_functions.c **** 				}
 558:../src/my_functions.c **** 			}
 559:../src/my_functions.c **** 
 560:../src/my_functions.c **** 		}
 561:../src/my_functions.c **** 		else
 562:../src/my_functions.c **** 			downFlag = 0;
 2825                             		.loc 1 562 0
 2826 14dd F6                      		clrw	ax
 2827 14de BF 00 00                		movw	!_downFlag, ax
 2828 14e1 EC ED 14 00             		br	!!.L104
 2829                             	.L103:
 2830 14e5 EC ED 14 00             		br	!!.L104
 2831                             	.L94:
 563:../src/my_functions.c **** 	}
 564:../src/my_functions.c **** 	else
 565:../src/my_functions.c **** 		downFlag = 0;
 2832                             		.loc 1 565 0
 2833 14e9 F6                      		clrw	ax
 2834 14ea BF 00 00                		movw	!_downFlag, ax
 2835                             	.L104:
 566:../src/my_functions.c **** 
 567:../src/my_functions.c **** 	centreBuf[2] = centreBuf[1];
 2836                             		.loc 1 567 0
 2837 14ed 8F 00 00                		mov	a, !_centreBuf+1
 2838 14f0 9D F0                   		mov	r8, a
 2839 14f2 9F 00 00                		mov	!_centreBuf+2, a
 568:../src/my_functions.c **** 	centreBuf[1] = centreBuf[0];
 2840                             		.loc 1 568 0
 2841 14f5 8F 00 00                		mov	a, !_centreBuf
 2842 14f8 9D F0                   		mov	r8, a
 2843 14fa 9F 00 00                		mov	!_centreBuf+1, a
 569:../src/my_functions.c **** 
 570:../src/my_functions.c **** 	leftBuf[2] = leftBuf[1];
 2844                             		.loc 1 570 0
 2845 14fd 8F 00 00                		mov	a, !_leftBuf+1
 2846 1500 9D F0                   		mov	r8, a
 2847 1502 9F 00 00                		mov	!_leftBuf+2, a
 571:../src/my_functions.c **** 	leftBuf[1] = leftBuf[0];
 2848                             		.loc 1 571 0
 2849 1505 8F 00 00                		mov	a, !_leftBuf
 2850 1508 9D F0                   		mov	r8, a
 2851 150a 9F 00 00                		mov	!_leftBuf+1, a
 572:../src/my_functions.c **** 
 573:../src/my_functions.c **** 	rightBuf[2] = rightBuf[1];
 2852                             		.loc 1 573 0
 2853 150d 8F 00 00                		mov	a, !_rightBuf+1
 2854 1510 9D F0                   		mov	r8, a
 2855 1512 9F 00 00                		mov	!_rightBuf+2, a
 574:../src/my_functions.c **** 	rightBuf[1] = rightBuf[0];
 2856                             		.loc 1 574 0
 2857 1515 8F 00 00                		mov	a, !_rightBuf
 2858 1518 9D F0                   		mov	r8, a
 2859 151a 9F 00 00                		mov	!_rightBuf+1, a
 575:../src/my_functions.c **** 
 576:../src/my_functions.c **** 	upBuf[2] = upBuf[1];
 2860                             		.loc 1 576 0
 2861 151d 8F 00 00                		mov	a, !_upBuf+1
 2862 1520 9D F0                   		mov	r8, a
 2863 1522 9F 00 00                		mov	!_upBuf+2, a
 577:../src/my_functions.c **** 	upBuf[1] = upBuf[0];
 2864                             		.loc 1 577 0
 2865 1525 8F 00 00                		mov	a, !_upBuf
 2866 1528 9D F0                   		mov	r8, a
 2867 152a 9F 00 00                		mov	!_upBuf+1, a
 578:../src/my_functions.c **** 
 579:../src/my_functions.c **** 	downBuf[2] = downBuf[1];
 2868                             		.loc 1 579 0
 2869 152d 8F 00 00                		mov	a, !_downBuf+1
 2870 1530 9D F0                   		mov	r8, a
 2871 1532 9F 00 00                		mov	!_downBuf+2, a
 580:../src/my_functions.c **** 	downBuf[1] = downBuf[0];
 2872                             		.loc 1 580 0
 2873 1535 8F 00 00                		mov	a, !_downBuf
 2874 1538 9D F0                   		mov	r8, a
 2875 153a 9F 00 00                		mov	!_downBuf+1, a
 581:../src/my_functions.c **** 
 582:../src/my_functions.c **** 
 583:../src/my_functions.c **** 
 584:../src/my_functions.c **** }
 2876                             		.loc 1 584 0
 2877 153d D7                      		ret
 2878                             	.LFE2:
 2880                             		.global	_flagCheck
 2882                             	_flagCheck:
 2883                             	.LFB3:
 585:../src/my_functions.c **** 
 586:../src/my_functions.c **** void flagCheck()
 587:../src/my_functions.c **** {
 2884                             		.loc 1 587 0
 2885                             		; start of function
 2886                             		; locals: 2 bytes
 2887 153e 20 02                   		subw	sp, #2
 2888                             	.LCFI2:
 588:../src/my_functions.c **** 	if ((S != oldstate)&&(welcomeFlag))
 2889                             		.loc 1 588 0
 2890 1540 C9 F0 03 FF             		movw	r8, #-253
 2891 1544 AD F0                   		movw	ax, r8
 2892 1546 BD F2                   		movw	r10, ax
 2893 1548 FA F2                   		movw	hl, r10
 2894 154a 8B                      		mov	a, [hl]
 2895 154b 9D F0                   		mov	r8, a
 2896 154d 31 1A                   		shr	a, 1
 2897 154f 9D F0                   		mov	r8, a
 2898 1551 5A F0 01                		and	r8, #1
 2899 1554 8D F0                   		mov	a, r8
 2900 1556 70                      		mov	x, a 
 2901 1557 51 00                   		mov	a, #0
 2902 1559 BD F2                   		movw	r10, ax
 2903 155b 8F 00 00                		mov	a, !_oldstate
 2904 155e 9D F0                   		mov	r8, a
 2905 1560 CD F1 00                		mov	r9, #0
 2906 1563 AD F2                   		movw	ax, r10
 2907 1565 46 F0                   		cmpw	ax, r8 
 2908 1567 61 F8                   		sknz 
 2909 1569 EC 7F 15 00             		br	!!.L106
 2910                             		.loc 1 588 0 is_stmt 0 discriminator 1
 2911 156d AF 00 00                		movw	ax, !_welcomeFlag
 2912 1570 BD F0                   		movw	r8, ax
 2913 1572 44 00 00                		cmpw	ax, #0 
 2914 1575 61 F8                   		sknz 
 2915 1577 EC 7F 15 00             		br	!!.L106
 589:../src/my_functions.c **** 	{
 590:../src/my_functions.c **** 		powerCheck();
 2916                             		.loc 1 590 0 is_stmt 1
 2917 157b FC 00 00 00             		call	!!%code(_powerCheck)
 2918                             	.L106:
 591:../src/my_functions.c **** 
 592:../src/my_functions.c **** 	}
 593:../src/my_functions.c **** 	if(fiveMilFlag)
 2919                             		.loc 1 593 0
 2920 157f AF 00 00                		movw	ax, !_fiveMilFlag
 2921 1582 BD F0                   		movw	r8, ax
 2922 1584 44 00 00                		cmpw	ax, #0 
 2923 1587 61 F8                   		sknz 
 2924 1589 EC 95 15 00             		br	!!.L107
 2925                             	.LBB3:
 594:../src/my_functions.c **** 	{
 595:../src/my_functions.c **** 		Buzzer();
 2926                             		.loc 1 595 0
 2927 158d FC 00 00 00             		call	!!%code(_Buzzer)
 596:../src/my_functions.c **** 		fiveMilFlag = 0;
 2928                             		.loc 1 596 0
 2929 1591 F6                      		clrw	ax
 2930 1592 BF 00 00                		movw	!_fiveMilFlag, ax
 2931                             	.L107:
 2932                             	.LBE3:
 597:../src/my_functions.c **** 	}
 598:../src/my_functions.c **** 	if(centreFlag)
 2933                             		.loc 1 598 0
 2934 1595 AF 00 00                		movw	ax, !_centreFlag
 2935 1598 BD F0                   		movw	r8, ax
 2936 159a 44 00 00                		cmpw	ax, #0 
 2937 159d 61 F8                   		sknz 
 2938 159f EC CF 15 00             		br	!!.L108
 2939                             	.LBB4:
 599:../src/my_functions.c **** 	{
 600:../src/my_functions.c **** 		centreFlag = 0;
 2940                             		.loc 1 600 0
 2941 15a3 F6                      		clrw	ax
 2942 15a4 BF 00 00                		movw	!_centreFlag, ax
 601:../src/my_functions.c **** 		//BUZZ_SHORT();
 602:../src/my_functions.c **** 		int a;
 603:../src/my_functions.c **** 		for(a=0;a<3;a++)
 2943                             		.loc 1 603 0
 2944 15a7 F6                      		clrw	ax
 2945 15a8 B8 00                   		movw	[sp], ax
 2946 15aa EC C2 15 00             		br	!!.L109
 2947                             	.L110:
 604:../src/my_functions.c **** 			centreBuf[a] = 1;
 2948                             		.loc 1 604 0 discriminator 2
 2949 15ae A8 00                   		movw	ax, [sp]
 2950 15b0 04 00 00                		addw	ax, #_centreBuf
 2951 15b3 BD F0                   		movw	r8, ax
 2952 15b5 BD F2                   		movw	r10, ax
 2953 15b7 DA F2                   		movw	bc, r10
 2954 15b9 E1                      		oneb	a
 2955 15ba 48 00 00                		mov	[bc], a
 603:../src/my_functions.c **** 		for(a=0;a<3;a++)
 2956                             		.loc 1 603 0 discriminator 2
 2957 15bd A8 00                   		movw	ax, [sp]
 2958 15bf A1                      		incw	ax
 2959 15c0 B8 00                   		movw	[sp], ax
 2960                             	.L109:
 603:../src/my_functions.c **** 		for(a=0;a<3;a++)
 2961                             		.loc 1 603 0 is_stmt 0 discriminator 1
 2962 15c2 A8 00                   		movw	ax, [sp]
 2963 15c4 44 02 00                		cmpw	ax, #2 
 2964 15c7 71 FF                   		xor1 CY,a.7
 2965 15c9 61 E3                   		skh 
 2966 15cb EC AE 15 00             		br	!!.L110
 2967                             	.L108:
 2968                             	.LBE4:
 605:../src/my_functions.c **** 	}
 606:../src/my_functions.c **** 	if(tenMilFlag)
 2969                             		.loc 1 606 0 is_stmt 1
 2970 15cf AF 00 00                		movw	ax, !_tenMilFlag
 2971 15d2 BD F0                   		movw	r8, ax
 2972 15d4 44 00 00                		cmpw	ax, #0 
 2973 15d7 61 F8                   		sknz 
 2974 15d9 EC 41 16 00             		br	!!.L111
 607:../src/my_functions.c **** 	{
 608:../src/my_functions.c **** 		tenMilFlag = 0;
 2975                             		.loc 1 608 0
 2976 15dd F6                      		clrw	ax
 2977 15de BF 00 00                		movw	!_tenMilFlag, ax
 609:../src/my_functions.c **** 		buttons();
 2978                             		.loc 1 609 0
 2979 15e1 FC 00 00 00             		call	!!%code(_buttons)
 610:../src/my_functions.c **** 
 611:../src/my_functions.c **** 		if((!powerFlag)&&(Mode == 'N'))
 2980                             		.loc 1 611 0
 2981 15e5 AF 00 00                		movw	ax, !_powerFlag
 2982 15e8 BD F0                   		movw	r8, ax
 2983 15ea 44 00 00                		cmpw	ax, #0 
 2984 15ed 61 E8                   		skz 
 2985 15ef EC 29 16 00             		br	!!.L112
 2986                             		.loc 1 611 0 is_stmt 0 discriminator 1
 2987 15f3 8F 00 00                		mov	a, !_Mode
 2988 15f6 9D F0                   		mov	r8, a
 2989 15f8 4A F0 4E                		cmp	r8, #78 
 2990 15fb 61 E8                   		skz 
 2991 15fd EC 29 16 00             		br	!!.L112
 612:../src/my_functions.c **** 		{
 613:../src/my_functions.c **** 
 614:../src/my_functions.c **** 			if(menuState==VALUES)
 2992                             		.loc 1 614 0 is_stmt 1
 2993 1601 AF 00 00                		movw	ax, !_menuState
 2994 1604 BD F0                   		movw	r8, ax
 2995 1606 44 01 00                		cmpw	ax, #1 
 2996 1609 61 E8                   		skz 
 2997 160b EC 17 16 00             		br	!!.L113
 615:../src/my_functions.c **** 				values_menu();
 2998                             		.loc 1 615 0
 2999 160f FC 00 00 00             		call	!!%code(_values_menu)
 3000 1613 EC 29 16 00             		br	!!.L112
 3001                             	.L113:
 616:../src/my_functions.c **** 			else if(menuState==ALARMS)
 3002                             		.loc 1 616 0
 3003 1617 AF 00 00                		movw	ax, !_menuState
 3004 161a BD F0                   		movw	r8, ax
 3005 161c 44 02 00                		cmpw	ax, #2 
 3006 161f 61 E8                   		skz 
 3007 1621 EC 29 16 00             		br	!!.L112
 617:../src/my_functions.c **** 				alarms_menu();
 3008                             		.loc 1 617 0
 3009 1625 FC 00 00 00             		call	!!%code(_alarms_menu)
 3010                             	.L112:
 618:../src/my_functions.c **** 		}
 619:../src/my_functions.c **** 		if(valuesTimer>=100)
 3011                             		.loc 1 619 0
 3012 1629 AF 00 00                		movw	ax, !_valuesTimer
 3013 162c BD F0                   		movw	r8, ax
 3014 162e 44 63 00                		cmpw	ax, #99 
 3015 1631 71 FF                   		xor1 CY,a.7
 3016 1633 61 E3                   		skh 
 3017 1635 EC 3D 16 00             		br	!!.L114
 620:../src/my_functions.c **** 			valuesTimer = 0;
 3018                             		.loc 1 620 0
 3019 1639 F6                      		clrw	ax
 3020 163a BF 00 00                		movw	!_valuesTimer, ax
 3021                             	.L114:
 621:../src/my_functions.c **** 		IIC_Receive();
 3022                             		.loc 1 621 0
 3023 163d FC 00 00 00             		call	!!%code(_IIC_Receive)
 3024                             	.L111:
 622:../src/my_functions.c **** 	}
 623:../src/my_functions.c **** 
 624:../src/my_functions.c **** 	if(sec_flag)
 3025                             		.loc 1 624 0
 3026 1641 AF 00 00                		movw	ax, !_sec_flag
 3027 1644 BD F0                   		movw	r8, ax
 3028 1646 44 00 00                		cmpw	ax, #0 
 3029 1649 61 F8                   		sknz 
 3030 164b EC 53 16 00             		br	!!.L115
 625:../src/my_functions.c **** 	{
 626:../src/my_functions.c **** 		calWind();
 3031                             		.loc 1 626 0
 3032 164f FC 00 00 00             		call	!!%code(_calWind)
 3033                             	.L115:
 627:../src/my_functions.c **** 	}
 628:../src/my_functions.c **** 	if(buzFlag&&buzTimeFlag)
 3034                             		.loc 1 628 0
 3035 1653 AF 00 00                		movw	ax, !_buzFlag
 3036 1656 BD F0                   		movw	r8, ax
 3037 1658 44 00 00                		cmpw	ax, #0 
 3038 165b 61 F8                   		sknz 
 3039 165d EC 77 16 00             		br	!!.L105
 3040                             		.loc 1 628 0 is_stmt 0 discriminator 1
 3041 1661 AF 00 00                		movw	ax, !_buzTimeFlag
 3042 1664 BD F0                   		movw	r8, ax
 3043 1666 44 00 00                		cmpw	ax, #0 
 3044 1669 61 F8                   		sknz 
 3045 166b EC 77 16 00             		br	!!.L105
 629:../src/my_functions.c **** 	{
 630:../src/my_functions.c **** 
 631:../src/my_functions.c **** 		buzTimeFlag = 0;
 3046                             		.loc 1 631 0 is_stmt 1
 3047 166f F6                      		clrw	ax
 3048 1670 BF 00 00                		movw	!_buzTimeFlag, ax
 632:../src/my_functions.c **** 		BUZZ_LOOP();
 3049                             		.loc 1 632 0
 3050 1673 FC 00 00 00             		call	!!%code(_BUZZ_LOOP)
 3051                             	.L105:
 633:../src/my_functions.c **** 	}
 634:../src/my_functions.c **** }
 3052                             		.loc 1 634 0
 3053 1677 10 02                   		addw	sp, #2
 3054 1679 D7                      		ret
 3055                             	.LFE3:
 3057                             		.global	_values_menu
 3059                             	_values_menu:
 3060                             	.LFB4:
 635:../src/my_functions.c **** 
 636:../src/my_functions.c **** void values_menu()
 637:../src/my_functions.c **** {
 3061                             		.loc 1 637 0
 3062                             		; start of function
 3063                             		; outgoing: 4 bytes
 3064 167a 20 04                   		subw	sp, #4
 3065                             	.LCFI3:
 638:../src/my_functions.c **** 	switch(cycleMode)
 3066                             		.loc 1 638 0
 3067 167c AF 00 00                		movw	ax, !_cycleMode
 3068 167f BD F0                   		movw	r8, ax
 3069 1681 44 02 00                		cmpw	ax, #2 
 3070 1684 61 F8                   		sknz 
 3071 1686 EC 07 18 00             		br	!!.L119
 3072 168a AD F0                   		movw	ax, r8
 3073 168c 44 02 00                		cmpw	ax, #2 
 3074 168f 71 FF                   		xor1 CY,a.7
 3075 1691 61 F3                   		sknh 
 3076 1693 EC B1 16 00             		br	!!.L120
 3077 1697 AD F0                   		movw	ax, r8
 3078 1699 44 00 00                		cmpw	ax, #0 
 3079 169c 61 F8                   		sknz 
 3080 169e EC CB 16 00             		br	!!.L121
 3081 16a2 AD F0                   		movw	ax, r8
 3082 16a4 44 01 00                		cmpw	ax, #1 
 3083 16a7 61 F8                   		sknz 
 3084 16a9 EC 6B 17 00             		br	!!.L122
 3085 16ad EC B5 1A 00             		br	!!.L117
 3086                             	.L120:
 3087 16b1 AD F0                   		movw	ax, r8
 3088 16b3 44 03 00                		cmpw	ax, #3 
 3089 16b6 61 F8                   		sknz 
 3090 16b8 EC AB 18 00             		br	!!.L123
 3091 16bc AD F0                   		movw	ax, r8
 3092 16be 44 04 00                		cmpw	ax, #4 
 3093 16c1 61 F8                   		sknz 
 3094 16c3 EC 4F 19 00             		br	!!.L124
 3095 16c7 EC B5 1A 00             		br	!!.L117
 3096                             	.L121:
 639:../src/my_functions.c **** 	{
 640:../src/my_functions.c **** 	case modeTemp :
 641:../src/my_functions.c **** 	{
 642:../src/my_functions.c **** 		if(centreFlag)
 3097                             		.loc 1 642 0
 3098 16cb AF 00 00                		movw	ax, !_centreFlag
 3099 16ce BD F0                   		movw	r8, ax
 3100 16d0 44 00 00                		cmpw	ax, #0 
 3101 16d3 61 F8                   		sknz 
 3102 16d5 EC E1 16 00             		br	!!.L125
 643:../src/my_functions.c **** 		{
 644:../src/my_functions.c **** 			valueView = 1;
 3103                             		.loc 1 644 0
 3104 16d9 E6                      		onew	ax
 3105 16da BF 00 00                		movw	!_valueView, ax
 645:../src/my_functions.c **** 			valueDisplay = 1;
 3106                             		.loc 1 645 0
 3107 16dd E6                      		onew	ax
 3108 16de BF 00 00                		movw	!_valueDisplay, ax
 3109                             	.L125:
 646:../src/my_functions.c **** 		}
 647:../src/my_functions.c **** 		if((!valueView)&&(valueDisplay))
 3110                             		.loc 1 647 0
 3111 16e1 AF 00 00                		movw	ax, !_valueView
 3112 16e4 BD F0                   		movw	r8, ax
 3113 16e6 44 00 00                		cmpw	ax, #0 
 3114 16e9 61 E8                   		skz 
 3115 16eb EC 13 17 00             		br	!!.L126
 3116                             		.loc 1 647 0 is_stmt 0 discriminator 1
 3117 16ef AF 00 00                		movw	ax, !_valueDisplay
 3118 16f2 BD F0                   		movw	r8, ax
 3119 16f4 44 00 00                		cmpw	ax, #0 
 3120 16f7 61 F8                   		sknz 
 3121 16f9 EC 13 17 00             		br	!!.L126
 648:../src/my_functions.c **** 		{
 649:../src/my_functions.c **** 			Start(tempArr1,sizeof(tempArr1)-1);
 3122                             		.loc 1 649 0 is_stmt 1
 3123 16fd 30 00 00                		movw	ax, #_tempArr1
 3124 1700 B8 00                   		movw	[sp], ax
 3125 1702 30 0B 00                		movw	ax, #11
 3126 1705 B8 02                   		movw	[sp+2], ax
 3127 1707 FC 00 00 00             		call	!!%code(_Start)
 650:../src/my_functions.c **** 			valueDisplay = 0;
 3128                             		.loc 1 650 0
 3129 170b F6                      		clrw	ax
 3130 170c BF 00 00                		movw	!_valueDisplay, ax
 3131 170f EC 67 17 00             		br	!!.L127
 3132                             	.L126:
 651:../src/my_functions.c **** 		}
 652:../src/my_functions.c **** 		else if((valueView)&&(valueDisplay))
 3133                             		.loc 1 652 0
 3134 1713 AF 00 00                		movw	ax, !_valueView
 3135 1716 BD F0                   		movw	r8, ax
 3136 1718 44 00 00                		cmpw	ax, #0 
 3137 171b 61 F8                   		sknz 
 3138 171d EC 67 17 00             		br	!!.L127
 3139                             		.loc 1 652 0 is_stmt 0 discriminator 1
 3140 1721 AF 00 00                		movw	ax, !_valueDisplay
 3141 1724 BD F0                   		movw	r8, ax
 3142 1726 44 00 00                		cmpw	ax, #0 
 3143 1729 61 F8                   		sknz 
 3144 172b EC 67 17 00             		br	!!.L127
 653:../src/my_functions.c **** 		{
 654:../src/my_functions.c **** 			valueDisplay = 0;
 3145                             		.loc 1 654 0 is_stmt 1
 3146 172f F6                      		clrw	ax
 3147 1730 BF 00 00                		movw	!_valueDisplay, ax
 655:../src/my_functions.c **** 			strcpy(displayArr, "");
 3148                             		.loc 1 655 0
 3149 1733 CD F0 00                		mov	r8, #0
 3150 1736 8D F0                   		mov	a, r8
 3151 1738 9F 00 00                		mov	!_displayArr, a
 656:../src/my_functions.c **** 			writeNumber(displayArr, Temperature);
 3152                             		.loc 1 656 0
 3153 173b 8F 00 00                		mov	a, !_Temperature
 3154 173e 9D F0                   		mov	r8, a
 3155 1740 30 00 00                		movw	ax, #_displayArr
 3156 1743 B8 00                   		movw	[sp], ax
 3157 1745 8D F0                   		mov	a, r8
 3158 1747 98 02                   		mov	[sp+2], a
 3159 1749 FC 00 00 00             		call	!!%code(_writeNumber)
 657:../src/my_functions.c **** 			displayArr[5] = '\'';
 3160                             		.loc 1 657 0
 3161 174d CF 00 00 27             		mov	!_displayArr+5, #39
 658:../src/my_functions.c **** 			displayArr[6] = 'C';
 3162                             		.loc 1 658 0
 3163 1751 CF 00 00 43             		mov	!_displayArr+6, #67
 659:../src/my_functions.c **** 			Start(displayArr,7);
 3164                             		.loc 1 659 0
 3165 1755 30 00 00                		movw	ax, #_displayArr
 3166 1758 B8 00                   		movw	[sp], ax
 3167 175a 30 07 00                		movw	ax, #7
 3168 175d B8 02                   		movw	[sp+2], ax
 3169 175f FC 00 00 00             		call	!!%code(_Start)
 660:../src/my_functions.c **** 		}
 661:../src/my_functions.c **** 
 662:../src/my_functions.c **** 
 663:../src/my_functions.c **** 	}
 664:../src/my_functions.c **** 	break;
 3170                             		.loc 1 664 0
 3171 1763 EC B5 1A 00             		br	!!.L117
 3172                             	.L127:
 3173 1767 EC B5 1A 00             		br	!!.L117
 3174                             	.L122:
 665:../src/my_functions.c **** 
 666:../src/my_functions.c **** 	case modeHum :
 667:../src/my_functions.c **** 	{
 668:../src/my_functions.c **** 		if(centreFlag)
 3175                             		.loc 1 668 0
 3176 176b AF 00 00                		movw	ax, !_centreFlag
 3177 176e BD F0                   		movw	r8, ax
 3178 1770 44 00 00                		cmpw	ax, #0 
 3179 1773 61 F8                   		sknz 
 3180 1775 EC 81 17 00             		br	!!.L128
 669:../src/my_functions.c **** 		{
 670:../src/my_functions.c **** 			valueView = 1;
 3181                             		.loc 1 670 0
 3182 1779 E6                      		onew	ax
 3183 177a BF 00 00                		movw	!_valueView, ax
 671:../src/my_functions.c **** 			valueDisplay = 1;
 3184                             		.loc 1 671 0
 3185 177d E6                      		onew	ax
 3186 177e BF 00 00                		movw	!_valueDisplay, ax
 3187                             	.L128:
 672:../src/my_functions.c **** 		}
 673:../src/my_functions.c **** 		if((!valueView)&&(valueDisplay))
 3188                             		.loc 1 673 0
 3189 1781 AF 00 00                		movw	ax, !_valueView
 3190 1784 BD F0                   		movw	r8, ax
 3191 1786 44 00 00                		cmpw	ax, #0 
 3192 1789 61 E8                   		skz 
 3193 178b EC B3 17 00             		br	!!.L129
 3194                             		.loc 1 673 0 is_stmt 0 discriminator 1
 3195 178f AF 00 00                		movw	ax, !_valueDisplay
 3196 1792 BD F0                   		movw	r8, ax
 3197 1794 44 00 00                		cmpw	ax, #0 
 3198 1797 61 F8                   		sknz 
 3199 1799 EC B3 17 00             		br	!!.L129
 674:../src/my_functions.c **** 		{
 675:../src/my_functions.c **** 			Start(humArr1,sizeof(humArr1)-1);
 3200                             		.loc 1 675 0 is_stmt 1
 3201 179d 30 00 00                		movw	ax, #_humArr1
 3202 17a0 B8 00                   		movw	[sp], ax
 3203 17a2 30 08 00                		movw	ax, #8
 3204 17a5 B8 02                   		movw	[sp+2], ax
 3205 17a7 FC 00 00 00             		call	!!%code(_Start)
 676:../src/my_functions.c **** 			valueDisplay = 0;
 3206                             		.loc 1 676 0
 3207 17ab F6                      		clrw	ax
 3208 17ac BF 00 00                		movw	!_valueDisplay, ax
 3209 17af EC 03 18 00             		br	!!.L130
 3210                             	.L129:
 677:../src/my_functions.c **** 		}
 678:../src/my_functions.c **** 		else if((valueView)&&(valueDisplay))
 3211                             		.loc 1 678 0
 3212 17b3 AF 00 00                		movw	ax, !_valueView
 3213 17b6 BD F0                   		movw	r8, ax
 3214 17b8 44 00 00                		cmpw	ax, #0 
 3215 17bb 61 F8                   		sknz 
 3216 17bd EC 03 18 00             		br	!!.L130
 3217                             		.loc 1 678 0 is_stmt 0 discriminator 1
 3218 17c1 AF 00 00                		movw	ax, !_valueDisplay
 3219 17c4 BD F0                   		movw	r8, ax
 3220 17c6 44 00 00                		cmpw	ax, #0 
 3221 17c9 61 F8                   		sknz 
 3222 17cb EC 03 18 00             		br	!!.L130
 679:../src/my_functions.c **** 		{
 680:../src/my_functions.c **** 			valueDisplay = 0;
 3223                             		.loc 1 680 0 is_stmt 1
 3224 17cf F6                      		clrw	ax
 3225 17d0 BF 00 00                		movw	!_valueDisplay, ax
 681:../src/my_functions.c **** 			strcpy(displayArr, "");
 3226                             		.loc 1 681 0
 3227 17d3 CD F0 00                		mov	r8, #0
 3228 17d6 8D F0                   		mov	a, r8
 3229 17d8 9F 00 00                		mov	!_displayArr, a
 682:../src/my_functions.c **** 			writeNumber(displayArr, Humidity);
 3230                             		.loc 1 682 0
 3231 17db 8F 00 00                		mov	a, !_Humidity
 3232 17de 9D F0                   		mov	r8, a
 3233 17e0 30 00 00                		movw	ax, #_displayArr
 3234 17e3 B8 00                   		movw	[sp], ax
 3235 17e5 8D F0                   		mov	a, r8
 3236 17e7 98 02                   		mov	[sp+2], a
 3237 17e9 FC 00 00 00             		call	!!%code(_writeNumber)
 683:../src/my_functions.c **** 			displayArr[5] = '%';
 3238                             		.loc 1 683 0
 3239 17ed CF 00 00 25             		mov	!_displayArr+5, #37
 684:../src/my_functions.c **** 			Start(displayArr,6);
 3240                             		.loc 1 684 0
 3241 17f1 30 00 00                		movw	ax, #_displayArr
 3242 17f4 B8 00                   		movw	[sp], ax
 3243 17f6 30 06 00                		movw	ax, #6
 3244 17f9 B8 02                   		movw	[sp+2], ax
 3245 17fb FC 00 00 00             		call	!!%code(_Start)
 685:../src/my_functions.c **** 		}
 686:../src/my_functions.c **** 	}
 687:../src/my_functions.c **** 	break;
 3246                             		.loc 1 687 0
 3247 17ff EC B5 1A 00             		br	!!.L117
 3248                             	.L130:
 3249 1803 EC B5 1A 00             		br	!!.L117
 3250                             	.L119:
 688:../src/my_functions.c **** 
 689:../src/my_functions.c **** 	case modePres :
 690:../src/my_functions.c **** 	{
 691:../src/my_functions.c **** 		if(centreFlag)
 3251                             		.loc 1 691 0
 3252 1807 AF 00 00                		movw	ax, !_centreFlag
 3253 180a BD F0                   		movw	r8, ax
 3254 180c 44 00 00                		cmpw	ax, #0 
 3255 180f 61 F8                   		sknz 
 3256 1811 EC 1D 18 00             		br	!!.L131
 692:../src/my_functions.c **** 		{
 693:../src/my_functions.c **** 			valueView = 1;
 3257                             		.loc 1 693 0
 3258 1815 E6                      		onew	ax
 3259 1816 BF 00 00                		movw	!_valueView, ax
 694:../src/my_functions.c **** 			valueDisplay = 1;
 3260                             		.loc 1 694 0
 3261 1819 E6                      		onew	ax
 3262 181a BF 00 00                		movw	!_valueDisplay, ax
 3263                             	.L131:
 695:../src/my_functions.c **** 		}
 696:../src/my_functions.c **** 		if((!valueView)&&(valueDisplay))
 3264                             		.loc 1 696 0
 3265 181d AF 00 00                		movw	ax, !_valueView
 3266 1820 BD F0                   		movw	r8, ax
 3267 1822 44 00 00                		cmpw	ax, #0 
 3268 1825 61 E8                   		skz 
 3269 1827 EC 4F 18 00             		br	!!.L132
 3270                             		.loc 1 696 0 is_stmt 0 discriminator 1
 3271 182b AF 00 00                		movw	ax, !_valueDisplay
 3272 182e BD F0                   		movw	r8, ax
 3273 1830 44 00 00                		cmpw	ax, #0 
 3274 1833 61 F8                   		sknz 
 3275 1835 EC 4F 18 00             		br	!!.L132
 697:../src/my_functions.c **** 		{
 698:../src/my_functions.c **** 			Start(presArr1,sizeof(presArr1)-1);
 3276                             		.loc 1 698 0 is_stmt 1
 3277 1839 30 00 00                		movw	ax, #_presArr1
 3278 183c B8 00                   		movw	[sp], ax
 3279 183e 30 08 00                		movw	ax, #8
 3280 1841 B8 02                   		movw	[sp+2], ax
 3281 1843 FC 00 00 00             		call	!!%code(_Start)
 699:../src/my_functions.c **** 			valueDisplay = 0;
 3282                             		.loc 1 699 0
 3283 1847 F6                      		clrw	ax
 3284 1848 BF 00 00                		movw	!_valueDisplay, ax
 3285 184b EC A7 18 00             		br	!!.L133
 3286                             	.L132:
 700:../src/my_functions.c **** 		}
 701:../src/my_functions.c **** 		else if((valueView)&&(valueDisplay))
 3287                             		.loc 1 701 0
 3288 184f AF 00 00                		movw	ax, !_valueView
 3289 1852 BD F0                   		movw	r8, ax
 3290 1854 44 00 00                		cmpw	ax, #0 
 3291 1857 61 F8                   		sknz 
 3292 1859 EC A7 18 00             		br	!!.L133
 3293                             		.loc 1 701 0 is_stmt 0 discriminator 1
 3294 185d AF 00 00                		movw	ax, !_valueDisplay
 3295 1860 BD F0                   		movw	r8, ax
 3296 1862 44 00 00                		cmpw	ax, #0 
 3297 1865 61 F8                   		sknz 
 3298 1867 EC A7 18 00             		br	!!.L133
 702:../src/my_functions.c **** 		{
 703:../src/my_functions.c **** 			valueDisplay = 0;
 3299                             		.loc 1 703 0 is_stmt 1
 3300 186b F6                      		clrw	ax
 3301 186c BF 00 00                		movw	!_valueDisplay, ax
 704:../src/my_functions.c **** 			strcpy(displayArr, "");
 3302                             		.loc 1 704 0
 3303 186f CD F0 00                		mov	r8, #0
 3304 1872 8D F0                   		mov	a, r8
 3305 1874 9F 00 00                		mov	!_displayArr, a
 705:../src/my_functions.c **** 			writeNumber(displayArr, Pressure);
 3306                             		.loc 1 705 0
 3307 1877 8F 00 00                		mov	a, !_Pressure
 3308 187a 9D F0                   		mov	r8, a
 3309 187c 30 00 00                		movw	ax, #_displayArr
 3310 187f B8 00                   		movw	[sp], ax
 3311 1881 8D F0                   		mov	a, r8
 3312 1883 98 02                   		mov	[sp+2], a
 3313 1885 FC 00 00 00             		call	!!%code(_writeNumber)
 706:../src/my_functions.c **** 			displayArr[5] = 'k';
 3314                             		.loc 1 706 0
 3315 1889 CF 00 00 6B             		mov	!_displayArr+5, #107
 707:../src/my_functions.c **** 			displayArr[6] = 'P';
 3316                             		.loc 1 707 0
 3317 188d CF 00 00 50             		mov	!_displayArr+6, #80
 708:../src/my_functions.c **** 			displayArr[7] = 'a';
 3318                             		.loc 1 708 0
 3319 1891 CF 00 00 61             		mov	!_displayArr+7, #97
 709:../src/my_functions.c **** 			Start(displayArr,8);
 3320                             		.loc 1 709 0
 3321 1895 30 00 00                		movw	ax, #_displayArr
 3322 1898 B8 00                   		movw	[sp], ax
 3323 189a 30 08 00                		movw	ax, #8
 3324 189d B8 02                   		movw	[sp+2], ax
 3325 189f FC 00 00 00             		call	!!%code(_Start)
 710:../src/my_functions.c **** 		}
 711:../src/my_functions.c **** 	}
 712:../src/my_functions.c **** 	break;
 3326                             		.loc 1 712 0
 3327 18a3 EC B5 1A 00             		br	!!.L117
 3328                             	.L133:
 3329 18a7 EC B5 1A 00             		br	!!.L117
 3330                             	.L123:
 713:../src/my_functions.c **** 
 714:../src/my_functions.c **** 	case modeWind :
 715:../src/my_functions.c **** 	{
 716:../src/my_functions.c **** 		if(centreFlag)
 3331                             		.loc 1 716 0
 3332 18ab AF 00 00                		movw	ax, !_centreFlag
 3333 18ae BD F0                   		movw	r8, ax
 3334 18b0 44 00 00                		cmpw	ax, #0 
 3335 18b3 61 F8                   		sknz 
 3336 18b5 EC C1 18 00             		br	!!.L134
 717:../src/my_functions.c **** 		{
 718:../src/my_functions.c **** 			valueView = 1;
 3337                             		.loc 1 718 0
 3338 18b9 E6                      		onew	ax
 3339 18ba BF 00 00                		movw	!_valueView, ax
 719:../src/my_functions.c **** 			valueDisplay = 1;
 3340                             		.loc 1 719 0
 3341 18bd E6                      		onew	ax
 3342 18be BF 00 00                		movw	!_valueDisplay, ax
 3343                             	.L134:
 720:../src/my_functions.c **** 		}
 721:../src/my_functions.c **** 		if((!valueView)&&(valueDisplay))
 3344                             		.loc 1 721 0
 3345 18c1 AF 00 00                		movw	ax, !_valueView
 3346 18c4 BD F0                   		movw	r8, ax
 3347 18c6 44 00 00                		cmpw	ax, #0 
 3348 18c9 61 E8                   		skz 
 3349 18cb EC F3 18 00             		br	!!.L135
 3350                             		.loc 1 721 0 is_stmt 0 discriminator 1
 3351 18cf AF 00 00                		movw	ax, !_valueDisplay
 3352 18d2 BD F0                   		movw	r8, ax
 3353 18d4 44 00 00                		cmpw	ax, #0 
 3354 18d7 61 F8                   		sknz 
 3355 18d9 EC F3 18 00             		br	!!.L135
 722:../src/my_functions.c **** 		{
 723:../src/my_functions.c **** 			Start(windArr1,sizeof(windArr1)-1);
 3356                             		.loc 1 723 0 is_stmt 1
 3357 18dd 30 00 00                		movw	ax, #_windArr1
 3358 18e0 B8 00                   		movw	[sp], ax
 3359 18e2 30 0A 00                		movw	ax, #10
 3360 18e5 B8 02                   		movw	[sp+2], ax
 3361 18e7 FC 00 00 00             		call	!!%code(_Start)
 724:../src/my_functions.c **** 			valueDisplay = 0;
 3362                             		.loc 1 724 0
 3363 18eb F6                      		clrw	ax
 3364 18ec BF 00 00                		movw	!_valueDisplay, ax
 3365 18ef EC 4B 19 00             		br	!!.L136
 3366                             	.L135:
 725:../src/my_functions.c **** 		}
 726:../src/my_functions.c **** 		else if((valueView)&&(valueDisplay))
 3367                             		.loc 1 726 0
 3368 18f3 AF 00 00                		movw	ax, !_valueView
 3369 18f6 BD F0                   		movw	r8, ax
 3370 18f8 44 00 00                		cmpw	ax, #0 
 3371 18fb 61 F8                   		sknz 
 3372 18fd EC 4B 19 00             		br	!!.L136
 3373                             		.loc 1 726 0 is_stmt 0 discriminator 1
 3374 1901 AF 00 00                		movw	ax, !_valueDisplay
 3375 1904 BD F0                   		movw	r8, ax
 3376 1906 44 00 00                		cmpw	ax, #0 
 3377 1909 61 F8                   		sknz 
 3378 190b EC 4B 19 00             		br	!!.L136
 727:../src/my_functions.c **** 		{
 728:../src/my_functions.c **** 			valueDisplay = 0;
 3379                             		.loc 1 728 0 is_stmt 1
 3380 190f F6                      		clrw	ax
 3381 1910 BF 00 00                		movw	!_valueDisplay, ax
 729:../src/my_functions.c **** 			strcpy(displayArr, "");
 3382                             		.loc 1 729 0
 3383 1913 CD F0 00                		mov	r8, #0
 3384 1916 8D F0                   		mov	a, r8
 3385 1918 9F 00 00                		mov	!_displayArr, a
 730:../src/my_functions.c **** 			writeNumber(displayArr, WindSpeed);
 3386                             		.loc 1 730 0
 3387 191b 8F 00 00                		mov	a, !_WindSpeed
 3388 191e 9D F0                   		mov	r8, a
 3389 1920 30 00 00                		movw	ax, #_displayArr
 3390 1923 B8 00                   		movw	[sp], ax
 3391 1925 8D F0                   		mov	a, r8
 3392 1927 98 02                   		mov	[sp+2], a
 3393 1929 FC 00 00 00             		call	!!%code(_writeNumber)
 731:../src/my_functions.c **** 			displayArr[5] = 'm';
 3394                             		.loc 1 731 0
 3395 192d CF 00 00 6D             		mov	!_displayArr+5, #109
 732:../src/my_functions.c **** 			displayArr[6] = '/';
 3396                             		.loc 1 732 0
 3397 1931 CF 00 00 2F             		mov	!_displayArr+6, #47
 733:../src/my_functions.c **** 			displayArr[7] = 's';
 3398                             		.loc 1 733 0
 3399 1935 CF 00 00 73             		mov	!_displayArr+7, #115
 734:../src/my_functions.c **** 			Start(displayArr,8);
 3400                             		.loc 1 734 0
 3401 1939 30 00 00                		movw	ax, #_displayArr
 3402 193c B8 00                   		movw	[sp], ax
 3403 193e 30 08 00                		movw	ax, #8
 3404 1941 B8 02                   		movw	[sp+2], ax
 3405 1943 FC 00 00 00             		call	!!%code(_Start)
 735:../src/my_functions.c **** 		}
 736:../src/my_functions.c **** 	}
 737:../src/my_functions.c **** 	break;
 3406                             		.loc 1 737 0
 3407 1947 EC B5 1A 00             		br	!!.L117
 3408                             	.L136:
 3409 194b EC B5 1A 00             		br	!!.L117
 3410                             	.L124:
 738:../src/my_functions.c **** 
 739:../src/my_functions.c **** 	case modeDT :
 740:../src/my_functions.c **** 	{
 741:../src/my_functions.c **** 		if(centreFlag)
 3411                             		.loc 1 741 0
 3412 194f AF 00 00                		movw	ax, !_centreFlag
 3413 1952 BD F0                   		movw	r8, ax
 3414 1954 44 00 00                		cmpw	ax, #0 
 3415 1957 61 F8                   		sknz 
 3416 1959 EC 65 19 00             		br	!!.L137
 742:../src/my_functions.c **** 		{
 743:../src/my_functions.c **** 			valueView = 1;
 3417                             		.loc 1 743 0
 3418 195d E6                      		onew	ax
 3419 195e BF 00 00                		movw	!_valueView, ax
 744:../src/my_functions.c **** 			valueDisplay = 1;
 3420                             		.loc 1 744 0
 3421 1961 E6                      		onew	ax
 3422 1962 BF 00 00                		movw	!_valueDisplay, ax
 3423                             	.L137:
 745:../src/my_functions.c **** 		}
 746:../src/my_functions.c **** 		if((!valueView)&&(valueDisplay))
 3424                             		.loc 1 746 0
 3425 1965 AF 00 00                		movw	ax, !_valueView
 3426 1968 BD F0                   		movw	r8, ax
 3427 196a 44 00 00                		cmpw	ax, #0 
 3428 196d 61 E8                   		skz 
 3429 196f EC 97 19 00             		br	!!.L138
 3430                             		.loc 1 746 0 is_stmt 0 discriminator 1
 3431 1973 AF 00 00                		movw	ax, !_valueDisplay
 3432 1976 BD F0                   		movw	r8, ax
 3433 1978 44 00 00                		cmpw	ax, #0 
 3434 197b 61 F8                   		sknz 
 3435 197d EC 97 19 00             		br	!!.L138
 747:../src/my_functions.c **** 		{
 748:../src/my_functions.c **** 			Start(DTArr1,sizeof(DTArr1)-1);
 3436                             		.loc 1 748 0 is_stmt 1
 3437 1981 30 00 00                		movw	ax, #_DTArr1
 3438 1984 B8 00                   		movw	[sp], ax
 3439 1986 30 09 00                		movw	ax, #9
 3440 1989 B8 02                   		movw	[sp+2], ax
 3441 198b FC 00 00 00             		call	!!%code(_Start)
 749:../src/my_functions.c **** 			valueDisplay = 0;
 3442                             		.loc 1 749 0
 3443 198f F6                      		clrw	ax
 3444 1990 BF 00 00                		movw	!_valueDisplay, ax
 3445 1993 EC B4 1A 00             		br	!!.L139
 3446                             	.L138:
 750:../src/my_functions.c **** 		}
 751:../src/my_functions.c **** 		else if((valueView)&&(valueDisplay))
 3447                             		.loc 1 751 0
 3448 1997 AF 00 00                		movw	ax, !_valueView
 3449 199a BD F0                   		movw	r8, ax
 3450 199c 44 00 00                		cmpw	ax, #0 
 3451 199f 61 F8                   		sknz 
 3452 19a1 EC B4 1A 00             		br	!!.L139
 3453                             		.loc 1 751 0 is_stmt 0 discriminator 1
 3454 19a5 AF 00 00                		movw	ax, !_valueDisplay
 3455 19a8 BD F0                   		movw	r8, ax
 3456 19aa 44 00 00                		cmpw	ax, #0 
 3457 19ad 61 F8                   		sknz 
 3458 19af EC B4 1A 00             		br	!!.L139
 3459                             	.LBB5:
 752:../src/my_functions.c **** 		{
 753:../src/my_functions.c **** 			valueDisplay = 0;
 3460                             		.loc 1 753 0 is_stmt 1
 3461 19b3 F6                      		clrw	ax
 3462 19b4 BF 00 00                		movw	!_valueDisplay, ax
 754:../src/my_functions.c **** 			uart1TxBuf[5] = BCD_to_Dec(my_time.sec);
 3463                             		.loc 1 754 0
 3464 19b7 8F 00 00                		mov	a, !_my_time
 3465 19ba 9D F0                   		mov	r8, a
 3466 19bc CD F1 00                		mov	r9, #0
 3467 19bf AD F0                   		movw	ax, r8
 3468 19c1 B8 00                   		movw	[sp], ax
 3469 19c3 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 3470 19c7 8D F0                   		mov	a, r8
 3471 19c9 9F 00 00                		mov	!_uart1TxBuf+5, a
 755:../src/my_functions.c **** 			uart1TxBuf[4] = BCD_to_Dec(my_time.min);
 3472                             		.loc 1 755 0
 3473 19cc 8F 00 00                		mov	a, !_my_time+1
 3474 19cf 9D F0                   		mov	r8, a
 3475 19d1 CD F1 00                		mov	r9, #0
 3476 19d4 AD F0                   		movw	ax, r8
 3477 19d6 B8 00                   		movw	[sp], ax
 3478 19d8 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 3479 19dc 8D F0                   		mov	a, r8
 3480 19de 9F 00 00                		mov	!_uart1TxBuf+4, a
 756:../src/my_functions.c **** 			uart1TxBuf[3] = BCD_to_Dec(my_time.hour);
 3481                             		.loc 1 756 0
 3482 19e1 8F 00 00                		mov	a, !_my_time+2
 3483 19e4 9D F0                   		mov	r8, a
 3484 19e6 CD F1 00                		mov	r9, #0
 3485 19e9 AD F0                   		movw	ax, r8
 3486 19eb B8 00                   		movw	[sp], ax
 3487 19ed FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 3488 19f1 8D F0                   		mov	a, r8
 3489 19f3 9F 00 00                		mov	!_uart1TxBuf+3, a
 757:../src/my_functions.c **** 			uart1TxBuf[2] = BCD_to_Dec(my_time.day);
 3490                             		.loc 1 757 0
 3491 19f6 8F 00 00                		mov	a, !_my_time+3
 3492 19f9 9D F0                   		mov	r8, a
 3493 19fb CD F1 00                		mov	r9, #0
 3494 19fe AD F0                   		movw	ax, r8
 3495 1a00 B8 00                   		movw	[sp], ax
 3496 1a02 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 3497 1a06 8D F0                   		mov	a, r8
 3498 1a08 9F 00 00                		mov	!_uart1TxBuf+2, a
 758:../src/my_functions.c **** 			uart1TxBuf[1] = BCD_to_Dec(my_time.month);
 3499                             		.loc 1 758 0
 3500 1a0b 8F 00 00                		mov	a, !_my_time+5
 3501 1a0e 9D F0                   		mov	r8, a
 3502 1a10 CD F1 00                		mov	r9, #0
 3503 1a13 AD F0                   		movw	ax, r8
 3504 1a15 B8 00                   		movw	[sp], ax
 3505 1a17 FC 00 00 00             		call	!!%code(_BCD_to_Dec)
 3506 1a1b 8D F0                   		mov	a, r8
 3507 1a1d 9F 00 00                		mov	!_uart1TxBuf+1, a
 759:../src/my_functions.c **** 
 760:../src/my_functions.c **** 			strcpy(displayArr, "");
 3508                             		.loc 1 760 0
 3509 1a20 CD F0 00                		mov	r8, #0
 3510 1a23 8D F0                   		mov	a, r8
 3511 1a25 9F 00 00                		mov	!_displayArr, a
 761:../src/my_functions.c **** 			writeNumber2(displayArr, uart1TxBuf[2]*2);
 3512                             		.loc 1 761 0
 3513 1a28 8F 00 00                		mov	a, !_uart1TxBuf+2
 3514 1a2b 9D F0                   		mov	r8, a
 3515 1a2d 61 01                   		add	a, a
 3516 1a2f 9D F0                   		mov	r8, a
 3517 1a31 30 00 00                		movw	ax, #_displayArr
 3518 1a34 B8 00                   		movw	[sp], ax
 3519 1a36 8D F0                   		mov	a, r8
 3520 1a38 98 02                   		mov	[sp+2], a
 3521 1a3a FC 00 00 00             		call	!!%code(_writeNumber2)
 762:../src/my_functions.c **** 			displayArr[2] = '/';
 3522                             		.loc 1 762 0
 3523 1a3e CF 00 00 2F             		mov	!_displayArr+2, #47
 763:../src/my_functions.c **** 			writeNumber2(displayArr+3, uart1TxBuf[1]*2);
 3524                             		.loc 1 763 0
 3525 1a42 8F 00 00                		mov	a, !_uart1TxBuf+1
 3526 1a45 9D F0                   		mov	r8, a
 3527 1a47 61 01                   		add	a, a
 3528 1a49 9D F0                   		mov	r8, a
 3529 1a4b 30 00 00                		movw	ax, #_displayArr+3
 3530 1a4e B8 00                   		movw	[sp], ax
 3531 1a50 8D F0                   		mov	a, r8
 3532 1a52 98 02                   		mov	[sp+2], a
 3533 1a54 FC 00 00 00             		call	!!%code(_writeNumber2)
 764:../src/my_functions.c **** 			displayArr[5] = ' ';
 3534                             		.loc 1 764 0
 3535 1a58 CF 00 00 20             		mov	!_displayArr+5, #32
 765:../src/my_functions.c **** 			writeNumber2(displayArr+6, uart1TxBuf[3]*2);
 3536                             		.loc 1 765 0
 3537 1a5c 8F 00 00                		mov	a, !_uart1TxBuf+3
 3538 1a5f 9D F0                   		mov	r8, a
 3539 1a61 61 01                   		add	a, a
 3540 1a63 9D F0                   		mov	r8, a
 3541 1a65 30 00 00                		movw	ax, #_displayArr+6
 3542 1a68 B8 00                   		movw	[sp], ax
 3543 1a6a 8D F0                   		mov	a, r8
 3544 1a6c 98 02                   		mov	[sp+2], a
 3545 1a6e FC 00 00 00             		call	!!%code(_writeNumber2)
 766:../src/my_functions.c **** 			displayArr[8] = ':';
 3546                             		.loc 1 766 0
 3547 1a72 CF 00 00 3A             		mov	!_displayArr+8, #58
 767:../src/my_functions.c **** 			writeNumber2(displayArr+9, uart1TxBuf[4]*2);
 3548                             		.loc 1 767 0
 3549 1a76 8F 00 00                		mov	a, !_uart1TxBuf+4
 3550 1a79 9D F0                   		mov	r8, a
 3551 1a7b 61 01                   		add	a, a
 3552 1a7d 9D F0                   		mov	r8, a
 3553 1a7f 30 00 00                		movw	ax, #_displayArr+9
 3554 1a82 B8 00                   		movw	[sp], ax
 3555 1a84 8D F0                   		mov	a, r8
 3556 1a86 98 02                   		mov	[sp+2], a
 3557 1a88 FC 00 00 00             		call	!!%code(_writeNumber2)
 768:../src/my_functions.c **** 			displayArr[11] = ':';
 3558                             		.loc 1 768 0
 3559 1a8c CF 00 00 3A             		mov	!_displayArr+11, #58
 769:../src/my_functions.c **** 			writeNumber2(displayArr+12, uart1TxBuf[5]*2);
 3560                             		.loc 1 769 0
 3561 1a90 8F 00 00                		mov	a, !_uart1TxBuf+5
 3562 1a93 9D F0                   		mov	r8, a
 3563 1a95 61 01                   		add	a, a
 3564 1a97 9D F0                   		mov	r8, a
 3565 1a99 30 00 00                		movw	ax, #_displayArr+12
 3566 1a9c B8 00                   		movw	[sp], ax
 3567 1a9e 8D F0                   		mov	a, r8
 3568 1aa0 98 02                   		mov	[sp+2], a
 3569 1aa2 FC 00 00 00             		call	!!%code(_writeNumber2)
 770:../src/my_functions.c **** 
 771:../src/my_functions.c **** 
 772:../src/my_functions.c **** 
 773:../src/my_functions.c **** 			Start(displayArr,14);
 3570                             		.loc 1 773 0
 3571 1aa6 30 00 00                		movw	ax, #_displayArr
 3572 1aa9 B8 00                   		movw	[sp], ax
 3573 1aab 30 0E 00                		movw	ax, #14
 3574 1aae B8 02                   		movw	[sp+2], ax
 3575 1ab0 FC 00 00 00             		call	!!%code(_Start)
 3576                             	.L139:
 3577                             	.LBE5:
 774:../src/my_functions.c **** 		}
 775:../src/my_functions.c **** 	}
 776:../src/my_functions.c **** 	break;
 3578                             		.loc 1 776 0
 3579 1ab4 00                      		nop
 3580                             	.L117:
 777:../src/my_functions.c **** 
 778:../src/my_functions.c **** 	}
 779:../src/my_functions.c **** }
 3581                             		.loc 1 779 0
 3582 1ab5 10 04                   		addw	sp, #4
 3583 1ab7 D7                      		ret
 3584                             	.LFE4:
 3586                             		.section	.rodata
 3587                             	.LC0:
 3588 0000 4E 6F 20 41 6C 61 72 6D 		.string	"No Alarms"
 3588      73 00 
 3589                             	.LC1:
 3590 000a 48 69 67 68 20 54 65 6D 		.string	"High Temperature"
 3590      70 65 72 61 74 75 72 65 
 3590      00 
 3591                             	.LC2:
 3592 001b 4C 6F 77 20 54 65 6D 70 		.string	"Low Temperature"
 3592      65 72 61 74 75 72 65 00 
 3593                             	.LC3:
 3594 002b 48 69 67 68 20 48 75 6D 		.string	"High Humidity"
 3594      69 64 69 74 79 00 
 3595                             	.LC4:
 3596 0039 48 69 67 68 20 50 72 65 		.string	"High Pressure"
 3596      73 73 75 72 65 00 
 3597                             	.LC5:
 3598 0047 48 69 67 68 20 57 69 6E 		.string	"High Wind Speed"
 3598      64 20 53 70 65 65 64 00 
 3599                             	.text
 3600                             		.global	_alarms_menu
 3602                             	_alarms_menu:
 3603                             	.LFB5:
 780:../src/my_functions.c **** 
 781:../src/my_functions.c **** void alarms_menu()
 782:../src/my_functions.c **** {
 3604                             		.loc 1 782 0
 3605                             		; start of function
 3606                             		; locals: 6 bytes
 3607                             		; outgoing: 4 bytes
 3608 1ab8 20 0A                   		subw	sp, #10
 3609                             	.LCFI4:
 783:../src/my_functions.c **** 	if((!alarmCount)&&(valueDisplay))
 3610                             		.loc 1 783 0
 3611 1aba AF 00 00                		movw	ax, !_alarmCount
 3612 1abd BD F0                   		movw	r8, ax
 3613 1abf 44 00 00                		cmpw	ax, #0 
 3614 1ac2 61 E8                   		skz 
 3615 1ac4 EC EC 1A 00             		br	!!.L141
 3616                             		.loc 1 783 0 is_stmt 0 discriminator 1
 3617 1ac8 AF 00 00                		movw	ax, !_valueDisplay
 3618 1acb BD F0                   		movw	r8, ax
 3619 1acd 44 00 00                		cmpw	ax, #0 
 3620 1ad0 61 F8                   		sknz 
 3621 1ad2 EC EC 1A 00             		br	!!.L141
 784:../src/my_functions.c **** 	{
 785:../src/my_functions.c **** 		Start("No Alarms",9);
 3622                             		.loc 1 785 0 is_stmt 1
 3623 1ad6 30 00 00                		movw	ax, #.LC0
 3624 1ad9 B8 00                   		movw	[sp], ax
 3625 1adb 30 09 00                		movw	ax, #9
 3626 1ade B8 02                   		movw	[sp+2], ax
 3627 1ae0 FC 00 00 00             		call	!!%code(_Start)
 786:../src/my_functions.c **** 		valueDisplay = 0;
 3628                             		.loc 1 786 0
 3629 1ae4 F6                      		clrw	ax
 3630 1ae5 BF 00 00                		movw	!_valueDisplay, ax
 3631 1ae8 EC DB 1B 00             		br	!!.L140
 3632                             	.L141:
 787:../src/my_functions.c **** 	}
 788:../src/my_functions.c **** 	else if((alarmCount>0)&&(valueDisplay))
 3633                             		.loc 1 788 0
 3634 1aec AF 00 00                		movw	ax, !_alarmCount
 3635 1aef BD F0                   		movw	r8, ax
 3636 1af1 44 00 00                		cmpw	ax, #0 
 3637 1af4 71 FF                   		xor1 CY,a.7
 3638 1af6 61 E3                   		skh 
 3639 1af8 EC DB 1B 00             		br	!!.L140
 3640                             		.loc 1 788 0 is_stmt 0 discriminator 1
 3641 1afc AF 00 00                		movw	ax, !_valueDisplay
 3642 1aff BD F0                   		movw	r8, ax
 3643 1b01 44 00 00                		cmpw	ax, #0 
 3644 1b04 61 F8                   		sknz 
 3645 1b06 EC DB 1B 00             		br	!!.L140
 789:../src/my_functions.c **** 	{
 790:../src/my_functions.c **** 		valueDisplay=0;
 3646                             		.loc 1 790 0 is_stmt 1
 3647 1b0a F6                      		clrw	ax
 3648 1b0b BF 00 00                		movw	!_valueDisplay, ax
 791:../src/my_functions.c **** 		switch(alarmsArr[alarmCurrent].type)
 3649                             		.loc 1 791 0
 3650 1b0e AF 00 00                		movw	ax, !_alarmCurrent
 3651 1b11 BD F0                   		movw	r8, ax
 3652 1b13 B8 08                   		movw	[sp+8], ax
 3653 1b15 BD F2                   		movw	r10, ax
 3654 1b17 B8 06                   		movw	[sp+6], ax
 3655 1b19 31 3D                   		shlw	ax, 3
 3656 1b1b B8 04                   		movw	[sp+4], ax
 3657 1b1d BD F0                   		movw	r8, ax
 3658 1b1f B8 06                   		movw	[sp+6], ax
 3659 1b21 A8 08                   		movw	ax, [sp+8]
 3660 1b23 16                      		movw	hl, ax
 3661 1b24 A8 06                   		movw	ax, [sp+6]
 3662 1b26 27                      		subw	ax, hl
 3663 1b27 B8 06                   		movw	[sp+6], ax
 3664 1b29 04 00 00                		addw	ax, #_alarmsArr
 3665 1b2c BD F0                   		movw	r8, ax
 3666 1b2e BD F2                   		movw	r10, ax
 3667 1b30 FA F2                   		movw	hl, r10
 3668 1b32 8B                      		mov	a, [hl]
 3669 1b33 9D F0                   		mov	r8, a
 3670 1b35 CD F1 00                		mov	r9, #0
 3671 1b38 AD F0                   		movw	ax, r8
 3672 1b3a 44 E3 00                		cmpw	ax, #227 
 3673 1b3d 61 F8                   		sknz 
 3674 1b3f EC A8 1B 00             		br	!!.L143
 3675 1b43 AD F0                   		movw	ax, r8
 3676 1b45 44 E3 00                		cmpw	ax, #227 
 3677 1b48 71 FF                   		xor1 CY,a.7
 3678 1b4a 61 F3                   		sknh 
 3679 1b4c EC 6A 1B 00             		br	!!.L144
 3680 1b50 AD F0                   		movw	ax, r8
 3681 1b52 44 E1 00                		cmpw	ax, #225 
 3682 1b55 61 F8                   		sknz 
 3683 1b57 EC 84 1B 00             		br	!!.L145
 3684 1b5b AD F0                   		movw	ax, r8
 3685 1b5d 44 E2 00                		cmpw	ax, #226 
 3686 1b60 61 F8                   		sknz 
 3687 1b62 EC 96 1B 00             		br	!!.L146
 3688 1b66 EC DB 1B 00             		br	!!.L140
 3689                             	.L144:
 3690 1b6a AD F0                   		movw	ax, r8
 3691 1b6c 44 E4 00                		cmpw	ax, #228 
 3692 1b6f 61 F8                   		sknz 
 3693 1b71 EC BA 1B 00             		br	!!.L147
 3694 1b75 AD F0                   		movw	ax, r8
 3695 1b77 44 E6 00                		cmpw	ax, #230 
 3696 1b7a 61 F8                   		sknz 
 3697 1b7c EC CC 1B 00             		br	!!.L148
 3698 1b80 EC DB 1B 00             		br	!!.L140
 3699                             	.L145:
 792:../src/my_functions.c **** 		{
 793:../src/my_functions.c **** 		case alarmTypeTemp :
 794:../src/my_functions.c **** 			Start("High Temperature",16);
 3700                             		.loc 1 794 0
 3701 1b84 30 0A 00                		movw	ax, #.LC1
 3702 1b87 B8 00                   		movw	[sp], ax
 3703 1b89 30 10 00                		movw	ax, #16
 3704 1b8c B8 02                   		movw	[sp+2], ax
 3705 1b8e FC 00 00 00             		call	!!%code(_Start)
 795:../src/my_functions.c **** 			break;
 3706                             		.loc 1 795 0
 3707 1b92 EC DB 1B 00             		br	!!.L140
 3708                             	.L146:
 796:../src/my_functions.c **** 		case alarmTypeLowTemp :
 797:../src/my_functions.c **** 			Start("Low Temperature",15);
 3709                             		.loc 1 797 0
 3710 1b96 30 1B 00                		movw	ax, #.LC2
 3711 1b99 B8 00                   		movw	[sp], ax
 3712 1b9b 30 0F 00                		movw	ax, #15
 3713 1b9e B8 02                   		movw	[sp+2], ax
 3714 1ba0 FC 00 00 00             		call	!!%code(_Start)
 798:../src/my_functions.c **** 			break;
 3715                             		.loc 1 798 0
 3716 1ba4 EC DB 1B 00             		br	!!.L140
 3717                             	.L143:
 799:../src/my_functions.c **** 		case alarmTypeHum :
 800:../src/my_functions.c **** 			Start("High Humidity",13);
 3718                             		.loc 1 800 0
 3719 1ba8 30 2B 00                		movw	ax, #.LC3
 3720 1bab B8 00                   		movw	[sp], ax
 3721 1bad 30 0D 00                		movw	ax, #13
 3722 1bb0 B8 02                   		movw	[sp+2], ax
 3723 1bb2 FC 00 00 00             		call	!!%code(_Start)
 801:../src/my_functions.c **** 			break;
 3724                             		.loc 1 801 0
 3725 1bb6 EC DB 1B 00             		br	!!.L140
 3726                             	.L147:
 802:../src/my_functions.c **** 		case alarmTypePres :
 803:../src/my_functions.c **** 			Start("High Pressure",13);
 3727                             		.loc 1 803 0
 3728 1bba 30 39 00                		movw	ax, #.LC4
 3729 1bbd B8 00                   		movw	[sp], ax
 3730 1bbf 30 0D 00                		movw	ax, #13
 3731 1bc2 B8 02                   		movw	[sp+2], ax
 3732 1bc4 FC 00 00 00             		call	!!%code(_Start)
 804:../src/my_functions.c **** 			break;
 3733                             		.loc 1 804 0
 3734 1bc8 EC DB 1B 00             		br	!!.L140
 3735                             	.L148:
 805:../src/my_functions.c **** 		case alarmTypeWind :
 806:../src/my_functions.c **** 			Start("High Wind Speed",15);
 3736                             		.loc 1 806 0
 3737 1bcc 30 47 00                		movw	ax, #.LC5
 3738 1bcf B8 00                   		movw	[sp], ax
 3739 1bd1 30 0F 00                		movw	ax, #15
 3740 1bd4 B8 02                   		movw	[sp+2], ax
 3741 1bd6 FC 00 00 00             		call	!!%code(_Start)
 807:../src/my_functions.c **** 			break;
 3742                             		.loc 1 807 0
 3743 1bda 00                      		nop
 3744                             	.L140:
 808:../src/my_functions.c **** 		}
 809:../src/my_functions.c **** 	}
 810:../src/my_functions.c **** 
 811:../src/my_functions.c **** }
 3745                             		.loc 1 811 0
 3746 1bdb 10 0A                   		addw	sp, #10
 3747 1bdd D7                      		ret
 3748                             	.LFE5:
 3750                             		.global	_alarm_new
 3752                             	_alarm_new:
 3753                             	.LFB6:
 812:../src/my_functions.c **** 
 813:../src/my_functions.c **** void alarm_new()
 814:../src/my_functions.c **** {
 3754                             		.loc 1 814 0
 3755                             		; start of function
 3756                             		; locals: 6 bytes
 3757                             		; outgoing: 4 bytes
 3758 1bde 20 0A                   		subw	sp, #10
 3759                             	.LCFI5:
 815:../src/my_functions.c **** 	if(Mode == 'N')
 3760                             		.loc 1 815 0
 3761 1be0 8F 00 00                		mov	a, !_Mode
 3762 1be3 9D F0                   		mov	r8, a
 3763 1be5 4A F0 4E                		cmp	r8, #78 
 3764 1be8 61 E8                   		skz 
 3765 1bea EC 04 1C 00             		br	!!.L150
 816:../src/my_functions.c **** 	{
 817:../src/my_functions.c **** 		menuState = ALARMS;
 3766                             		.loc 1 817 0
 3767 1bee 30 02 00                		movw	ax, #2
 3768 1bf1 BF 00 00                		movw	!_menuState, ax
 818:../src/my_functions.c **** 		alarmCurrent = alarmCount-1;
 3769                             		.loc 1 818 0
 3770 1bf4 AF 00 00                		movw	ax, !_alarmCount
 3771 1bf7 BD F0                   		movw	r8, ax
 3772 1bf9 B6 F0                   		decw	r8
 3773 1bfb AD F0                   		movw	ax, r8
 3774 1bfd BF 00 00                		movw	!_alarmCurrent, ax
 3775 1c00 EC D2 1C 00             		br	!!.L151
 3776                             	.L150:
 819:../src/my_functions.c **** 
 820:../src/my_functions.c **** 	}
 821:../src/my_functions.c **** 	else
 822:../src/my_functions.c **** 	{
 823:../src/my_functions.c **** 		switch(alarmsArr[alarmCount-1].type)
 3777                             		.loc 1 823 0
 3778 1c04 AF 00 00                		movw	ax, !_alarmCount
 3779 1c07 BD F0                   		movw	r8, ax
 3780 1c09 B1                      		decw	ax
 3781 1c0a B8 08                   		movw	[sp+8], ax
 3782 1c0c BD F0                   		movw	r8, ax
 3783 1c0e B8 06                   		movw	[sp+6], ax
 3784 1c10 31 3D                   		shlw	ax, 3
 3785 1c12 B8 04                   		movw	[sp+4], ax
 3786 1c14 BD F2                   		movw	r10, ax
 3787 1c16 B8 06                   		movw	[sp+6], ax
 3788 1c18 A8 08                   		movw	ax, [sp+8]
 3789 1c1a 16                      		movw	hl, ax
 3790 1c1b A8 06                   		movw	ax, [sp+6]
 3791 1c1d 27                      		subw	ax, hl
 3792 1c1e B8 06                   		movw	[sp+6], ax
 3793 1c20 04 00 00                		addw	ax, #_alarmsArr
 3794 1c23 BD F0                   		movw	r8, ax
 3795 1c25 BD F2                   		movw	r10, ax
 3796 1c27 FA F2                   		movw	hl, r10
 3797 1c29 8B                      		mov	a, [hl]
 3798 1c2a 9D F0                   		mov	r8, a
 3799 1c2c CD F1 00                		mov	r9, #0
 3800 1c2f AD F0                   		movw	ax, r8
 3801 1c31 44 E3 00                		cmpw	ax, #227 
 3802 1c34 61 F8                   		sknz 
 3803 1c36 EC 9F 1C 00             		br	!!.L152
 3804 1c3a AD F0                   		movw	ax, r8
 3805 1c3c 44 E3 00                		cmpw	ax, #227 
 3806 1c3f 71 FF                   		xor1 CY,a.7
 3807 1c41 61 F3                   		sknh 
 3808 1c43 EC 61 1C 00             		br	!!.L153
 3809 1c47 AD F0                   		movw	ax, r8
 3810 1c49 44 E1 00                		cmpw	ax, #225 
 3811 1c4c 61 F8                   		sknz 
 3812 1c4e EC 7B 1C 00             		br	!!.L154
 3813 1c52 AD F0                   		movw	ax, r8
 3814 1c54 44 E2 00                		cmpw	ax, #226 
 3815 1c57 61 F8                   		sknz 
 3816 1c59 EC 8D 1C 00             		br	!!.L155
 3817 1c5d EC D2 1C 00             		br	!!.L151
 3818                             	.L153:
 3819 1c61 AD F0                   		movw	ax, r8
 3820 1c63 44 E4 00                		cmpw	ax, #228 
 3821 1c66 61 F8                   		sknz 
 3822 1c68 EC B1 1C 00             		br	!!.L156
 3823 1c6c AD F0                   		movw	ax, r8
 3824 1c6e 44 E6 00                		cmpw	ax, #230 
 3825 1c71 61 F8                   		sknz 
 3826 1c73 EC C3 1C 00             		br	!!.L157
 3827 1c77 EC D2 1C 00             		br	!!.L151
 3828                             	.L154:
 824:../src/my_functions.c **** 		{
 825:../src/my_functions.c **** 		case alarmTypeTemp :
 826:../src/my_functions.c **** 			Start("High Temperature",16);
 3829                             		.loc 1 826 0
 3830 1c7b 30 0A 00                		movw	ax, #.LC1
 3831 1c7e B8 00                   		movw	[sp], ax
 3832 1c80 30 10 00                		movw	ax, #16
 3833 1c83 B8 02                   		movw	[sp+2], ax
 3834 1c85 FC 00 00 00             		call	!!%code(_Start)
 827:../src/my_functions.c **** 			break;
 3835                             		.loc 1 827 0
 3836 1c89 EC D2 1C 00             		br	!!.L151
 3837                             	.L155:
 828:../src/my_functions.c **** 		case alarmTypeLowTemp :
 829:../src/my_functions.c **** 			Start("Low Temperature",15);
 3838                             		.loc 1 829 0
 3839 1c8d 30 1B 00                		movw	ax, #.LC2
 3840 1c90 B8 00                   		movw	[sp], ax
 3841 1c92 30 0F 00                		movw	ax, #15
 3842 1c95 B8 02                   		movw	[sp+2], ax
 3843 1c97 FC 00 00 00             		call	!!%code(_Start)
 830:../src/my_functions.c **** 			break;
 3844                             		.loc 1 830 0
 3845 1c9b EC D2 1C 00             		br	!!.L151
 3846                             	.L152:
 831:../src/my_functions.c **** 		case alarmTypeHum :
 832:../src/my_functions.c **** 			Start("High Humidity",13);
 3847                             		.loc 1 832 0
 3848 1c9f 30 2B 00                		movw	ax, #.LC3
 3849 1ca2 B8 00                   		movw	[sp], ax
 3850 1ca4 30 0D 00                		movw	ax, #13
 3851 1ca7 B8 02                   		movw	[sp+2], ax
 3852 1ca9 FC 00 00 00             		call	!!%code(_Start)
 833:../src/my_functions.c **** 			break;
 3853                             		.loc 1 833 0
 3854 1cad EC D2 1C 00             		br	!!.L151
 3855                             	.L156:
 834:../src/my_functions.c **** 		case alarmTypePres :
 835:../src/my_functions.c **** 			Start("High Pressure",13);
 3856                             		.loc 1 835 0
 3857 1cb1 30 39 00                		movw	ax, #.LC4
 3858 1cb4 B8 00                   		movw	[sp], ax
 3859 1cb6 30 0D 00                		movw	ax, #13
 3860 1cb9 B8 02                   		movw	[sp+2], ax
 3861 1cbb FC 00 00 00             		call	!!%code(_Start)
 836:../src/my_functions.c **** 			break;
 3862                             		.loc 1 836 0
 3863 1cbf EC D2 1C 00             		br	!!.L151
 3864                             	.L157:
 837:../src/my_functions.c **** 		case alarmTypeWind :
 838:../src/my_functions.c **** 			Start("High Wind Speed",15);
 3865                             		.loc 1 838 0
 3866 1cc3 30 47 00                		movw	ax, #.LC5
 3867 1cc6 B8 00                   		movw	[sp], ax
 3868 1cc8 30 0F 00                		movw	ax, #15
 3869 1ccb B8 02                   		movw	[sp+2], ax
 3870 1ccd FC 00 00 00             		call	!!%code(_Start)
 839:../src/my_functions.c **** 			break;
 3871                             		.loc 1 839 0
 3872 1cd1 00                      		nop
 3873                             	.L151:
 840:../src/my_functions.c **** 		}
 841:../src/my_functions.c **** 	}
 842:../src/my_functions.c **** 	buzzerON = 0;
 3874                             		.loc 1 842 0
 3875 1cd2 F6                      		clrw	ax
 3876 1cd3 BF 00 00                		movw	!_buzzerON, ax
 843:../src/my_functions.c **** 	buzState = buzzOff;
 3877                             		.loc 1 843 0
 3878 1cd6 F6                      		clrw	ax
 3879 1cd7 BF 00 00                		movw	!_buzState, ax
 844:../src/my_functions.c **** 	buzFlag = 0;
 3880                             		.loc 1 844 0
 3881 1cda F6                      		clrw	ax
 3882 1cdb BF 00 00                		movw	!_buzFlag, ax
 845:../src/my_functions.c **** 	R_TAU0_Channel2_Stop();
 3883                             		.loc 1 845 0
 3884 1cde FC 00 00 00             		call	!!%code(_R_TAU0_Channel2_Stop)
 846:../src/my_functions.c **** 	buzzalarm = 1;
 3885                             		.loc 1 846 0
 3886 1ce2 E6                      		onew	ax
 3887 1ce3 BF 00 00                		movw	!_buzzalarm, ax
 847:../src/my_functions.c **** 	BUZZ_LOOP();
 3888                             		.loc 1 847 0
 3889 1ce6 FC 00 00 00             		call	!!%code(_BUZZ_LOOP)
 848:../src/my_functions.c **** }
 3890                             		.loc 1 848 0
 3891 1cea 10 0A                   		addw	sp, #10
 3892 1cec D7                      		ret
 3893                             	.LFE6:
 3895                             		.global	_readStatus
 3897                             	_readStatus:
 3898                             	.LFB7:
 849:../src/my_functions.c **** 
 850:../src/my_functions.c **** void readStatus()
 851:../src/my_functions.c **** {
 3899                             		.loc 1 851 0
 3900                             		; start of function
 3901                             		; locals: 4 bytes
 3902 1ced 20 04                   		subw	sp, #4
 3903                             	.LCFI6:
 852:../src/my_functions.c **** 	int a,flag=0;
 3904                             		.loc 1 852 0
 3905 1cef F6                      		clrw	ax
 3906 1cf0 B8 00                   		movw	[sp], ax
 853:../src/my_functions.c **** 	statusByte = 0;
 3907                             		.loc 1 853 0
 3908 1cf2 F5 00 00                		clrb	!_statusByte
 854:../src/my_functions.c **** 	while((a<5)&&(!flag))
 3909                             		.loc 1 854 0
 3910 1cf5 EC 13 1D 00             		br	!!.L159
 3911                             	.L161:
 855:../src/my_functions.c **** 	{
 856:../src/my_functions.c **** 		flag = alarmFlag[a];
 3912                             		.loc 1 856 0
 3913 1cf9 A8 02                   		movw	ax, [sp+2]
 3914 1cfb BD F0                   		movw	r8, ax
 3915 1cfd 01                      		addw	ax, ax
 3916 1cfe BD F0                   		movw	r8, ax
 3917 1d00 04 00 00                		addw	ax, #_alarmFlag
 3918 1d03 BD F0                   		movw	r8, ax
 3919 1d05 BD F2                   		movw	r10, ax
 3920 1d07 FA F2                   		movw	hl, r10
 3921 1d09 AB                      		movw	ax, [hl]
 3922 1d0a BD F0                   		movw	r8, ax
 3923 1d0c B8 00                   		movw	[sp], ax
 857:../src/my_functions.c **** 		a++;
 3924                             		.loc 1 857 0
 3925 1d0e A8 02                   		movw	ax, [sp+2]
 3926 1d10 A1                      		incw	ax
 3927 1d11 B8 02                   		movw	[sp+2], ax
 3928                             	.L159:
 854:../src/my_functions.c **** 	while((a<5)&&(!flag))
 3929                             		.loc 1 854 0 discriminator 1
 3930 1d13 A8 02                   		movw	ax, [sp+2]
 3931 1d15 44 04 00                		cmpw	ax, #4 
 3932 1d18 71 FF                   		xor1 CY,a.7
 3933 1d1a 61 F3                   		sknh 
 3934 1d1c EC 2B 1D 00             		br	!!.L160
 854:../src/my_functions.c **** 	while((a<5)&&(!flag))
 3935                             		.loc 1 854 0 is_stmt 0 discriminator 2
 3936 1d20 A8 00                   		movw	ax, [sp]
 3937 1d22 44 00 00                		cmpw	ax, #0 
 3938 1d25 61 F8                   		sknz 
 3939 1d27 EC F9 1C 00             		br	!!.L161
 3940                             	.L160:
 858:../src/my_functions.c **** 	}
 859:../src/my_functions.c **** 	if(flag)
 3941                             		.loc 1 859 0 is_stmt 1
 3942 1d2b A8 00                   		movw	ax, [sp]
 3943 1d2d 44 00 00                		cmpw	ax, #0 
 3944 1d30 61 F8                   		sknz 
 3945 1d32 EC 8C 1D 00             		br	!!.L158
 860:../src/my_functions.c **** 	{
 861:../src/my_functions.c **** 
 862:../src/my_functions.c **** 		statusByte = (0x80)+(alarmFlag[modeWind]<<5)+(alarmFlag[modeHum]<<3)+(alarmFlag[modePres]<<2)+(al
 3946                             		.loc 1 862 0
 3947 1d36 AF 00 00                		movw	ax, !_alarmFlag+6
 3948 1d39 BD F0                   		movw	r8, ax
 3949 1d3b 8D F0                   		mov	a, r8
 3950 1d3d 31 59                   		shl	a, 5
 3951 1d3f 9D F2                   		mov	r10, a
 3952 1d41 AF 00 00                		movw	ax, !_alarmFlag+2
 3953 1d44 BD F0                   		movw	r8, ax
 3954 1d46 8D F0                   		mov	a, r8
 3955 1d48 31 39                   		shl	a, 3
 3956 1d4a 9D F0                   		mov	r8, a
 3957 1d4c 76                      		mov	l, a
 3958 1d4d 8D F2                   		mov	a, r10
 3959 1d4f 61 0E                   		add	a, l
 3960 1d51 9D F2                   		mov	r10, a
 3961 1d53 AF 00 00                		movw	ax, !_alarmFlag+4
 3962 1d56 BD F0                   		movw	r8, ax
 3963 1d58 8D F0                   		mov	a, r8
 3964 1d5a 31 29                   		shl	a, 2
 3965 1d5c 9D F0                   		mov	r8, a
 3966 1d5e 76                      		mov	l, a
 3967 1d5f 8D F2                   		mov	a, r10
 3968 1d61 61 0E                   		add	a, l
 3969 1d63 9D F2                   		mov	r10, a
 3970 1d65 AF 00 00                		movw	ax, !_alarmFlag+8
 3971 1d68 BD F0                   		movw	r8, ax
 3972 1d6a 8D F0                   		mov	a, r8
 3973 1d6c 61 01                   		add	a, a
 3974 1d6e 9D F0                   		mov	r8, a
 3975 1d70 76                      		mov	l, a
 3976 1d71 8D F2                   		mov	a, r10
 3977 1d73 61 0E                   		add	a, l
 3978 1d75 9D F2                   		mov	r10, a
 3979 1d77 AF 00 00                		movw	ax, !_alarmFlag
 3980 1d7a BD F0                   		movw	r8, ax
 3981 1d7c 8D F0                   		mov	a, r8
 3982 1d7e 76                      		mov	l, a
 3983 1d7f 8D F2                   		mov	a, r10
 3984 1d81 61 0E                   		add	a, l
 3985 1d83 9D F0                   		mov	r8, a
 3986 1d85 0C 80                   		add	a, #-128
 3987 1d87 9D F0                   		mov	r8, a
 3988 1d89 9F 00 00                		mov	!_statusByte, a
 3989                             	.L158:
 863:../src/my_functions.c **** 	}
 864:../src/my_functions.c **** }
 3990                             		.loc 1 864 0
 3991 1d8c 10 04                   		addw	sp, #4
 3992 1d8e D7                      		ret
 3993                             	.LFE7:
 4105                             	.Letext0:
 4106                             		.file 2 "../src/iodefine.h"
 4107                             		.file 3 "../src/r_cg_macrodriver.h"
 4108                             		.file 4 "../src/r_cg_rtc.h"
 4109                             		.file 5 "../src/r_cg_userdefine.h"
